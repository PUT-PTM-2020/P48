
P48.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e34  08003e34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e3c  08003e3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e40  08003e40  00013e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000070  08003eb4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08003eb4  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001536e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b35  00000000  00000000  0003540e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  00037f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  00038ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f6e  00000000  00000000  00039d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dca6  00000000  00000000  0005dcae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d01bb  00000000  00000000  0006b954  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bb0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004180  00000000  00000000  0013bb8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d60 	.word	0x08003d60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003d60 	.word	0x08003d60

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <createList>:
 *      Author: Grzesio
 */

#include "List.h"

List* createList(uint64_t dataSize) {
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	e9c7 0100 	strd	r0, r1, [r7]
	List *list = (List*) malloc(sizeof (List));
 80004e2:	2018      	movs	r0, #24
 80004e4:	f003 fb6a 	bl	8003bbc <malloc>
 80004e8:	4603      	mov	r3, r0
 80004ea:	60fb      	str	r3, [r7, #12]
	list->head = (Node*) malloc(sizeof (Node));
 80004ec:	2008      	movs	r0, #8
 80004ee:	f003 fb65 	bl	8003bbc <malloc>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	601a      	str	r2, [r3, #0]
	list->last = list->head;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	605a      	str	r2, [r3, #4]

	list->head->data = (uint16_t*) malloc(sizeof (uint16_t) * dataSize);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	005a      	lsls	r2, r3, #1
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681c      	ldr	r4, [r3, #0]
 800050a:	4610      	mov	r0, r2
 800050c:	f003 fb56 	bl	8003bbc <malloc>
 8000510:	4603      	mov	r3, r0
 8000512:	6023      	str	r3, [r4, #0]
	list->head->next = NULL;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]

	list->lastFreeIndex = 0;
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	f04f 0300 	mov.w	r3, #0
 8000522:	f04f 0400 	mov.w	r4, #0
 8000526:	e9c2 3402 	strd	r3, r4, [r2, #8]
	list->dataSize = dataSize;
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000530:	e9c2 3404 	strd	r3, r4, [r2, #16]

	return list;
 8000534:	68fb      	ldr	r3, [r7, #12]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bd90      	pop	{r4, r7, pc}

0800053e <createNode>:

Node* createNode(uint64_t dataSize) {
 800053e:	b580      	push	{r7, lr}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	e9c7 0100 	strd	r0, r1, [r7]
	Node *node = (Node*) malloc(sizeof (Node));
 8000548:	2008      	movs	r0, #8
 800054a:	f003 fb37 	bl	8003bbc <malloc>
 800054e:	4603      	mov	r3, r0
 8000550:	60fb      	str	r3, [r7, #12]

	node->data = (uint16_t*) malloc(sizeof (uint16_t) * dataSize);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fb30 	bl	8003bbc <malloc>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	601a      	str	r2, [r3, #0]
	node->next = NULL;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]

	return node;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <addToList>:

void addToList(List *list, uint16_t data) {
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	807b      	strh	r3, [r7, #2]
	if (list->lastFreeIndex >= list->dataSize) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800058c:	42a2      	cmp	r2, r4
 800058e:	bf08      	it	eq
 8000590:	4299      	cmpeq	r1, r3
 8000592:	d316      	bcc.n	80005c2 <addToList+0x4e>
		list->last->next = createNode(list->dataSize);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	6855      	ldr	r5, [r2, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	4621      	mov	r1, r4
 80005a2:	f7ff ffcc 	bl	800053e <createNode>
 80005a6:	4603      	mov	r3, r0
 80005a8:	606b      	str	r3, [r5, #4]
		list->last = list->last->next;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	605a      	str	r2, [r3, #4]
		list->lastFreeIndex = 0;
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	f04f 0300 	mov.w	r3, #0
 80005ba:	f04f 0400 	mov.w	r4, #0
 80005be:	e9c2 3402 	strd	r3, r4, [r2, #8]
	}

	list->last->data[list->lastFreeIndex] = data;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4413      	add	r3, r2
 80005d2:	887a      	ldrh	r2, [r7, #2]
 80005d4:	801a      	strh	r2, [r3, #0]
	++list->lastFreeIndex;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80005dc:	1c4b      	adds	r3, r1, #1
 80005de:	f142 0400 	adc.w	r4, r2, #0
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bdb0      	pop	{r4, r5, r7, pc}

080005f0 <freeList>:

void freeList(List *list) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	Node *current;
	Node *next = list->head;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]

	while (next != NULL) {
 80005fe:	e00c      	b.n	800061a <freeList+0x2a>
		current = next;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	60bb      	str	r3, [r7, #8]
		next = current->next;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	60fb      	str	r3, [r7, #12]

		free(current->data);
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fadc 	bl	8003bcc <free>
		free(current);
 8000614:	68b8      	ldr	r0, [r7, #8]
 8000616:	f003 fad9 	bl	8003bcc <free>
	while (next != NULL) {
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1ef      	bne.n	8000600 <freeList+0x10>
	}

	free(list);
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f003 fad3 	bl	8003bcc <free>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <startTimer>:
#include "Recorder.h"
#include "StateWaiting.h"
#include "StateRecording.h"
#include "StatePlaying.h"

void startTimer(TIM_HandleTypeDef *timer) {
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(timer);
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f002 fe95 	bl	8003366 <HAL_TIM_Base_Start_IT>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <setTimer>:

void setTimer(TIM_HandleTypeDef *timer,
		short prescaler, short period) {
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	807b      	strh	r3, [r7, #2]
 8000650:	4613      	mov	r3, r2
 8000652:	803b      	strh	r3, [r7, #0]
	timer->Instance->PSC = prescaler;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
	timer->Instance->ARR = period;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <stopTimer>:

void stopTimer(TIM_HandleTypeDef *timer) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(timer);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f002 fe96 	bl	80033ae <HAL_TIM_Base_Stop_IT>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <startSpeaker>:

void startSpeaker(Recorder *recorder) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start(recorder->speaker, DAC_CHANNEL_1);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fed0 	bl	800243e <HAL_DAC_Start>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <setSpeakerValue>:

void setSpeakerValue(Recorder *recorder, uint32_t value) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
	// mask is needed make sure that errors in code won't break speaker
	HAL_DAC_SetValue(recorder->speaker, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value & 0x000000FF);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6858      	ldr	r0, [r3, #4]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	f001 ff8d 	bl	80025da <HAL_DAC_SetValue>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <stopSpeaker>:

void stopSpeaker(Recorder *recorder) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	HAL_DAC_Stop(recorder->speaker, DAC_CHANNEL_1);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 ff17 	bl	800250a <HAL_DAC_Stop>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <setLcdCursor>:

void setLcdCursor(Recorder *recorder, uint8_t row, uint8_t col) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
 80006f0:	4613      	mov	r3, r2
 80006f2:	70bb      	strb	r3, [r7, #2]
	Lcd_cursor(recorder->lcd, row, col);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	78ba      	ldrb	r2, [r7, #2]
 80006fa:	78f9      	ldrb	r1, [r7, #3]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fb6f 	bl	8000de0 <Lcd_cursor>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <setLcdText>:

void setLcdText(Recorder *recorder, char *string) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	6039      	str	r1, [r7, #0]
	Lcd_string(recorder->lcd, string);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	6839      	ldr	r1, [r7, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fb42 	bl	8000da4 <Lcd_string>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <readMicrophoneData>:

uint32_t readMicrophoneData(Recorder *recorder) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(recorder->microphone);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f9d9 	bl	8001aec <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(recorder->microphone, 10) == HAL_OK) {
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	210a      	movs	r1, #10
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fa99 	bl	8001c78 <HAL_ADC_PollForConversion>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d106      	bne.n	800075a <readMicrophoneData+0x32>
		return HAL_ADC_GetValue(recorder->microphone);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fb15 	bl	8001d80 <HAL_ADC_GetValue>
 8000756:	4603      	mov	r3, r0
 8000758:	e000      	b.n	800075c <readMicrophoneData+0x34>
	}

	return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <changeToStateWaiting>:

void changeToStateWaiting(Recorder *recorder) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	recorder->onStartState = onStartStateWaiting;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a09      	ldr	r2, [pc, #36]	; (8000794 <changeToStateWaiting+0x30>)
 8000770:	611a      	str	r2, [r3, #16]
	recorder->onUpdateState = onUpdateStateWaiting;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <changeToStateWaiting+0x34>)
 8000776:	615a      	str	r2, [r3, #20]
	recorder->onTimerUpdateState = onTimerUpdateStateWaiting;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <changeToStateWaiting+0x38>)
 800077c:	619a      	str	r2, [r3, #24]
	recorder->onButtonState = onButtonStateWaiting;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <changeToStateWaiting+0x3c>)
 8000782:	61da      	str	r2, [r3, #28]

	onStart(recorder);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 f84d 	bl	8000824 <onStart>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	08000b99 	.word	0x08000b99
 8000798:	08000bd5 	.word	0x08000bd5
 800079c:	08000c19 	.word	0x08000c19
 80007a0:	08000c31 	.word	0x08000c31

080007a4 <changeToStateRecording>:

void changeToStateRecording(Recorder *recorder) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	recorder->onStartState = onStartStateRecording;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <changeToStateRecording+0x30>)
 80007b0:	611a      	str	r2, [r3, #16]
	recorder->onUpdateState = onUpdateStateRecording;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <changeToStateRecording+0x34>)
 80007b6:	615a      	str	r2, [r3, #20]
	recorder->onTimerUpdateState = onTimerUpdateStateRecording;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <changeToStateRecording+0x38>)
 80007bc:	619a      	str	r2, [r3, #24]
	recorder->onButtonState = onButtonStateRecording;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <changeToStateRecording+0x3c>)
 80007c2:	61da      	str	r2, [r3, #28]

	onStart(recorder);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 f82d 	bl	8000824 <onStart>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08000a31 	.word	0x08000a31
 80007d8:	08000aa1 	.word	0x08000aa1
 80007dc:	08000af1 	.word	0x08000af1
 80007e0:	08000b21 	.word	0x08000b21

080007e4 <changeToStatePlaying>:

void changeToStatePlaying(Recorder *recorder) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	recorder->onStartState = onStartStatePlaying;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <changeToStatePlaying+0x30>)
 80007f0:	611a      	str	r2, [r3, #16]
	recorder->onUpdateState = onUpdateStatePlaying;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <changeToStatePlaying+0x34>)
 80007f6:	615a      	str	r2, [r3, #20]
	recorder->onTimerUpdateState = onTimerUpdateStatePlaying;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <changeToStatePlaying+0x38>)
 80007fc:	619a      	str	r2, [r3, #24]
	recorder->onButtonState = onButtonStatePlaying;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <changeToStatePlaying+0x3c>)
 8000802:	61da      	str	r2, [r3, #28]

	onStart(recorder);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 f80d 	bl	8000824 <onStart>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	080008c1 	.word	0x080008c1
 8000818:	0800093d 	.word	0x0800093d
 800081c:	08000991 	.word	0x08000991
 8000820:	08000a19 	.word	0x08000a19

08000824 <onStart>:

void onStart(Recorder *recorder) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	recorder->onStartState(recorder);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	4798      	blx	r3
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <onUpdate>:

void onUpdate(Recorder *recorder) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	recorder->onUpdateState(recorder);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	4798      	blx	r3
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <onTimerUpdate>:

void onTimerUpdate(Recorder *recorder, TIM_HandleTypeDef *timer) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	recorder->onTimerUpdateState(recorder, timer);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	6839      	ldr	r1, [r7, #0]
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	4798      	blx	r3
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <onButton>:

void onButton(Recorder *recorder, uint16_t pin) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
	recorder->onButtonState(recorder, pin);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	887a      	ldrh	r2, [r7, #2]
 8000882:	4611      	mov	r1, r2
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	4798      	blx	r3
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <cleanUp>:
 *      Author: Grzesio
 */

#include "StatePlaying.h"

void cleanUp(Recorder *recorder) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	freeList(recorder->soundList);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6a1b      	ldr	r3, [r3, #32]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fea7 	bl	80005f0 <freeList>

	stopSpeaker(recorder);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ff10 	bl	80006c8 <stopSpeaker>
	stopTimer(recorder->soundTimer);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fee1 	bl	8000674 <stopTimer>
	changeToStateWaiting(recorder);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ff56 	bl	8000764 <changeToStateWaiting>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <onStartStatePlaying>:

void onStartStatePlaying(Recorder *recorder) {
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	setLcdCursor(recorder, 1, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2101      	movs	r1, #1
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff09 	bl	80006e4 <setLcdCursor>
	setLcdText(recorder, "Playing current rec-");
 80008d2:	4918      	ldr	r1, [pc, #96]	; (8000934 <onStartStatePlaying+0x74>)
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff18 	bl	800070a <setLcdText>
	setLcdCursor(recorder, 2, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2102      	movs	r1, #2
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ff00 	bl	80006e4 <setLcdCursor>
	setLcdText(recorder, "-ording ...         ");
 80008e4:	4914      	ldr	r1, [pc, #80]	; (8000938 <onStartStatePlaying+0x78>)
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff0f 	bl	800070a <setLcdText>

	recorder->soundData = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
	recorder->currentDataIndex = 0;
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	f04f 0400 	mov.w	r4, #0
 80008fc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	recorder->currentSoundNode = recorder->soundList->head;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a1b      	ldr	r3, [r3, #32]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	629a      	str	r2, [r3, #40]	; 0x28

	startSpeaker(recorder);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff febd 	bl	800068a <startSpeaker>
	setTimer(recorder->soundTimer, 1049, 4);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2204      	movs	r2, #4
 8000916:	f240 4119 	movw	r1, #1049	; 0x419
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fe92 	bl	8000644 <setTimer>
	startTimer(recorder->soundTimer);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fe82 	bl	800062e <startTimer>
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	bf00      	nop
 8000934:	08003d78 	.word	0x08003d78
 8000938:	08003d90 	.word	0x08003d90

0800093c <onUpdateStatePlaying>:

void onUpdateStatePlaying(Recorder *recorder) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094a:	4810      	ldr	r0, [pc, #64]	; (800098c <onUpdateStatePlaying+0x50>)
 800094c:	f002 f81c 	bl	8002988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <onUpdateStatePlaying+0x50>)
 8000958:	f002 f816 	bl	8002988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <onUpdateStatePlaying+0x50>)
 8000964:	f002 f810 	bl	8002988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <onUpdateStatePlaying+0x50>)
 8000970:	f002 f80a 	bl	8002988 <HAL_GPIO_WritePin>

	// scale 12 bit sound sample to 8 bit
	setSpeakerValue(recorder, recorder->soundData / 16);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000978:	091b      	lsrs	r3, r3, #4
 800097a:	4619      	mov	r1, r3
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fe92 	bl	80006a6 <setSpeakerValue>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020c00 	.word	0x40020c00

08000990 <onTimerUpdateStatePlaying>:

void onTimerUpdateStatePlaying(Recorder *recorder, TIM_HandleTypeDef *timer) {
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	if (timer == recorder->soundTimer) {
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d136      	bne.n	8000a12 <onTimerUpdateStatePlaying+0x82>
		volatile uint64_t *dataIndex = &recorder->currentDataIndex;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3330      	adds	r3, #48	; 0x30
 80009a8:	60fb      	str	r3, [r7, #12]

		if (*dataIndex >= recorder->soundList->dataSize) {
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	e9d3 1200 	ldrd	r1, r2, [r3]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a1b      	ldr	r3, [r3, #32]
 80009b4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80009b8:	42a2      	cmp	r2, r4
 80009ba:	bf08      	it	eq
 80009bc:	4299      	cmpeq	r1, r3
 80009be:	d313      	bcc.n	80009e8 <onTimerUpdateStatePlaying+0x58>
			recorder->currentSoundNode = recorder->currentSoundNode->next;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	685a      	ldr	r2, [r3, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
			*dataIndex = 0;
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	f04f 0300 	mov.w	r3, #0
 80009d0:	f04f 0400 	mov.w	r4, #0
 80009d4:	e9c2 3400 	strd	r3, r4, [r2]

			if (recorder->currentSoundNode == NULL) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d103      	bne.n	80009e8 <onTimerUpdateStatePlaying+0x58>
				cleanUp(recorder);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff55 	bl	8000890 <cleanUp>
				return;
 80009e6:	e014      	b.n	8000a12 <onTimerUpdateStatePlaying+0x82>
			}
		}

		recorder->soundData = recorder->currentSoundNode->data[*dataIndex];
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
		++(*dataIndex);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000a06:	1c4b      	adds	r3, r1, #1
 8000a08:	f142 0400 	adc.w	r4, r2, #0
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}

08000a18 <onButtonStatePlaying>:

void onButtonStatePlaying(Recorder *recorder, uint16_t pin) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
//	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
//		cleanUp(recorder);
//	}
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <onStartStateRecording>:
 */

#include "StateRecording.h"
#include "List.h"

void onStartStateRecording(Recorder *recorder) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	setLcdCursor(recorder, 1, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fe51 	bl	80006e4 <setLcdCursor>
	setLcdText(recorder, "Recording with micr-");
 8000a42:	4915      	ldr	r1, [pc, #84]	; (8000a98 <onStartStateRecording+0x68>)
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fe60 	bl	800070a <setLcdText>
	setLcdCursor(recorder, 2, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff fe48 	bl	80006e4 <setLcdCursor>
	setLcdText(recorder, "-ophone ...         ");
 8000a54:	4911      	ldr	r1, [pc, #68]	; (8000a9c <onStartStateRecording+0x6c>)
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff fe57 	bl	800070a <setLcdText>

	recorder->soundData = 0;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
	recorder->soundList = createList(800);// 50 ms at 16k Hz
 8000a62:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a66:	f04f 0100 	mov.w	r1, #0
 8000a6a:	f7ff fd35 	bl	80004d8 <createList>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	621a      	str	r2, [r3, #32]

	setTimer(recorder->soundTimer, 1049, 4);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2204      	movs	r2, #4
 8000a7a:	f240 4119 	movw	r1, #1049	; 0x419
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fde0 	bl	8000644 <setTimer>
	startTimer(recorder->soundTimer);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fdd0 	bl	800062e <startTimer>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	08003da8 	.word	0x08003da8
 8000a9c:	08003dc0 	.word	0x08003dc0

08000aa0 <onUpdateStateRecording>:

void onUpdateStateRecording(Recorder *recorder) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aae:	480f      	ldr	r0, [pc, #60]	; (8000aec <onUpdateStateRecording+0x4c>)
 8000ab0:	f001 ff6a 	bl	8002988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <onUpdateStateRecording+0x4c>)
 8000abc:	f001 ff64 	bl	8002988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <onUpdateStateRecording+0x4c>)
 8000ac8:	f001 ff5e 	bl	8002988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <onUpdateStateRecording+0x4c>)
 8000ad4:	f001 ff58 	bl	8002988 <HAL_GPIO_WritePin>

	recorder->soundData = readMicrophoneData(recorder);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff fe25 	bl	8000728 <readMicrophoneData>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40020c00 	.word	0x40020c00

08000af0 <onTimerUpdateStateRecording>:

void onTimerUpdateStateRecording(Recorder *recorder, TIM_HandleTypeDef *timer) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
	if (timer == recorder->soundTimer) {
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d108      	bne.n	8000b16 <onTimerUpdateStateRecording+0x26>
		addToList(recorder->soundList, recorder->soundData);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a1a      	ldr	r2, [r3, #32]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4610      	mov	r0, r2
 8000b12:	f7ff fd2f 	bl	8000574 <addToList>
	}
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <onButtonStateRecording>:

void onButtonStateRecording(Recorder *recorder, uint16_t pin) {
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4819      	ldr	r0, [pc, #100]	; (8000b94 <onButtonStateRecording+0x74>)
 8000b30:	f001 ff12 	bl	8002958 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d128      	bne.n	8000b8c <onButtonStateRecording+0x6c>
		stopTimer(recorder->soundTimer);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fd98 	bl	8000674 <stopTimer>

		List *list = recorder->soundList;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	60fb      	str	r3, [r7, #12]
		for (uint64_t i = list->lastFreeIndex; i < list->dataSize; ++i) {
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000b50:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8000b54:	e00e      	b.n	8000b74 <onButtonStateRecording+0x54>
			list->last->data[i] = 0;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4413      	add	r3, r2
 8000b62:	2200      	movs	r2, #0
 8000b64:	801a      	strh	r2, [r3, #0]
		for (uint64_t i = list->lastFreeIndex; i < list->dataSize; ++i) {
 8000b66:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000b6a:	1c59      	adds	r1, r3, #1
 8000b6c:	f144 0200 	adc.w	r2, r4, #0
 8000b70:	e9c7 1204 	strd	r1, r2, [r7, #16]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000b7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000b7e:	42a2      	cmp	r2, r4
 8000b80:	bf08      	it	eq
 8000b82:	4299      	cmpeq	r1, r3
 8000b84:	d3e7      	bcc.n	8000b56 <onButtonStateRecording+0x36>
		}

		changeToStatePlaying(recorder);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff fe2c 	bl	80007e4 <changeToStatePlaying>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd90      	pop	{r4, r7, pc}
 8000b94:	40020000 	.word	0x40020000

08000b98 <onStartStateWaiting>:
 *      Author: Grzesio
 */

#include "StateWaiting.h"

void onStartStateWaiting(Recorder *recorder) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	setLcdCursor(recorder, 1, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fd9d 	bl	80006e4 <setLcdCursor>
	setLcdText(recorder, "Waiting for an acti-");
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <onStartStateWaiting+0x34>)
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fdac 	bl	800070a <setLcdText>
	setLcdCursor(recorder, 2, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fd94 	bl	80006e4 <setLcdCursor>
	setLcdText(recorder, "-on ...             ");
 8000bbc:	4904      	ldr	r1, [pc, #16]	; (8000bd0 <onStartStateWaiting+0x38>)
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fda3 	bl	800070a <setLcdText>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	08003dd8 	.word	0x08003dd8
 8000bd0:	08003df0 	.word	0x08003df0

08000bd4 <onUpdateStateWaiting>:

void onUpdateStateWaiting(Recorder *recorder) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be2:	480c      	ldr	r0, [pc, #48]	; (8000c14 <onUpdateStateWaiting+0x40>)
 8000be4:	f001 fed0 	bl	8002988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bee:	4809      	ldr	r0, [pc, #36]	; (8000c14 <onUpdateStateWaiting+0x40>)
 8000bf0:	f001 feca 	bl	8002988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <onUpdateStateWaiting+0x40>)
 8000bfc:	f001 fec4 	bl	8002988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c06:	4803      	ldr	r0, [pc, #12]	; (8000c14 <onUpdateStateWaiting+0x40>)
 8000c08:	f001 febe 	bl	8002988 <HAL_GPIO_WritePin>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40020c00 	.word	0x40020c00

08000c18 <onTimerUpdateStateWaiting>:

void onTimerUpdateStateWaiting(Recorder *recorder, TIM_HandleTypeDef *timer) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]

}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <onButtonStateWaiting>:

void onButtonStateWaiting(Recorder *recorder, uint16_t pin) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <onButtonStateWaiting+0x28>)
 8000c40:	f001 fe8a 	bl	8002958 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d102      	bne.n	8000c50 <onButtonStateWaiting+0x20>
		changeToStateRecording(recorder);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fdaa 	bl	80007a4 <changeToStateRecording>
	}
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40020000 	.word	0x40020000

08000c5c <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <disk_timerproc+0x44>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <disk_timerproc+0x1e>
		Timer1 = --n;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <disk_timerproc+0x44>)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <disk_timerproc+0x48>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d005      	beq.n	8000c92 <disk_timerproc+0x36>
		Timer2 = --n;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <disk_timerproc+0x48>)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	7013      	strb	r3, [r2, #0]

}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	2000008c 	.word	0x2000008c
 8000ca4:	2000008d 	.word	0x2000008d

08000ca8 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <sdcard_systick_timerproc+0x2c>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <sdcard_systick_timerproc+0x2c>)
 8000cb8:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <sdcard_systick_timerproc+0x2c>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	2b09      	cmp	r3, #9
 8000cc2:	d904      	bls.n	8000cce <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <sdcard_systick_timerproc+0x2c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8000cca:	f7ff ffc7 	bl	8000c5c <disk_timerproc>
	}
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000a0 	.word	0x200000a0

08000cd8 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000ce6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000cea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000cee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cf2:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cf6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000cf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000cfa:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f80e 	bl	8000d2e <Lcd_init>

	return lcd;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	461d      	mov	r5, r3
 8000d16:	f107 0410 	add.w	r4, r7, #16
 8000d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d22:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bdb0      	pop	{r4, r5, r7, pc}

08000d2e <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	// test
	if(lcd->mode == LCD_4_BIT_MODE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7d9b      	ldrb	r3, [r3, #22]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d112      	bne.n	8000d64 <Lcd_init+0x36>
	{
			lcd_write_command(lcd, 0x33);
 8000d3e:	2133      	movs	r1, #51	; 0x33
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f867 	bl	8000e14 <lcd_write_command>
			DELAY(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 fe6a 	bl	8001a20 <HAL_Delay>
			lcd_write_command(lcd, 0x32);
 8000d4c:	2132      	movs	r1, #50	; 0x32
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f860 	bl	8000e14 <lcd_write_command>
			DELAY(1);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f000 fe63 	bl	8001a20 <HAL_Delay>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000d5a:	2128      	movs	r1, #40	; 0x28
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f859 	bl	8000e14 <lcd_write_command>
 8000d62:	e003      	b.n	8000d6c <Lcd_init+0x3e>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000d64:	2138      	movs	r1, #56	; 0x38
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f000 f854 	bl	8000e14 <lcd_write_command>

	DELAY(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f000 fe57 	bl	8001a20 <HAL_Delay>

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f84d 	bl	8000e14 <lcd_write_command>
	DELAY(1);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f000 fe50 	bl	8001a20 <HAL_Delay>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000d80:	210c      	movs	r1, #12
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f846 	bl	8000e14 <lcd_write_command>
	DELAY(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 fe49 	bl	8001a20 <HAL_Delay>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000d8e:	2106      	movs	r1, #6
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 f83f 	bl	8000e14 <lcd_write_command>
	DELAY(1);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f000 fe42 	bl	8001a20 <HAL_Delay>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e00a      	b.n	8000dca <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f856 	bl	8000e70 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	7bfc      	ldrb	r4, [r7, #15]
 8000dcc:	6838      	ldr	r0, [r7, #0]
 8000dce:	f7ff f9fb 	bl	80001c8 <strlen>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	d3ed      	bcc.n	8000db4 <Lcd_string+0x10>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd90      	pop	{r4, r7, pc}

08000de0 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
 8000dec:	4613      	mov	r3, r2
 8000dee:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <Lcd_cursor+0x30>)
 8000df4:	5cd2      	ldrb	r2, [r2, r3]
 8000df6:	78bb      	ldrb	r3, [r7, #2]
 8000df8:	4413      	add	r3, r2
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	3b80      	subs	r3, #128	; 0x80
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4619      	mov	r1, r3
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f806 	bl	8000e14 <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	08003e20 	.word	0x08003e20

08000e14 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6898      	ldr	r0, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	899b      	ldrh	r3, [r3, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f001 fdac 	bl	8002988 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7d9b      	ldrb	r3, [r3, #22]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d111      	bne.n	8000e5c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2204      	movs	r2, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f842 	bl	8000ecc <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2204      	movs	r2, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f839 	bl	8000ecc <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000e5a:	e005      	b.n	8000e68 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	2208      	movs	r2, #8
 8000e60:	4619      	mov	r1, r3
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f832 	bl	8000ecc <lcd_write>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6898      	ldr	r0, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	899b      	ldrh	r3, [r3, #12]
 8000e84:	2201      	movs	r2, #1
 8000e86:	4619      	mov	r1, r3
 8000e88:	f001 fd7e 	bl	8002988 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7d9b      	ldrb	r3, [r3, #22]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d111      	bne.n	8000eb8 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f814 	bl	8000ecc <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2204      	movs	r2, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f80b 	bl	8000ecc <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000eb6:	e005      	b.n	8000ec4 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	2208      	movs	r2, #8
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f804 	bl	8000ecc <lcd_write>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e019      	b.n	8000f16 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	8819      	ldrh	r1, [r3, #0]
 8000efa:	78fa      	ldrb	r2, [r7, #3]
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	fa42 f303 	asr.w	r3, r2, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f001 fd3c 	bl	8002988 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	3301      	adds	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3e1      	bcc.n	8000ee2 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6918      	ldr	r0, [r3, #16]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	8a9b      	ldrh	r3, [r3, #20]
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f001 fd2d 	bl	8002988 <HAL_GPIO_WritePin>
	// test
	// no ja wiem wiem ze timery i te sprawy ale
	// NJE CHCE MI SIE
	// a to dziala i sa niskie opoznienia!
	// niby jest 62.5 us (> 53.3 us) wiec jest git!
	for (int i = 0; i < 500; ++i);
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	e002      	b.n	8000f3a <lcd_write+0x6e>
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f40:	dbf8      	blt.n	8000f34 <lcd_write+0x68>

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6918      	ldr	r0, [r3, #16]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	8a9b      	ldrh	r3, [r3, #20]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f001 fd1b 	bl	8002988 <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_TIM_PeriodElapsedCallback>:
static void MX_DAC_Init(void);
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d104      	bne.n	8000f78 <HAL_TIM_PeriodElapsedCallback+0x1c>
		onTimerUpdate(&recorder, htim);
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f72:	f7ff fc6f 	bl	8000854 <onTimerUpdate>
	}
	else if (htim->Instance == TIM3 && buttonLock > 0) {
		buttonLock = 0;
		stopTimer(&htim3);
	}
}
 8000f76:	e00e      	b.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x3a>
	else if (htim->Instance == TIM3 && buttonLock > 0) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d109      	bne.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	dd05      	ble.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x3a>
		buttonLock = 0;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
		stopTimer(&htim3);
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f92:	f7ff fb6f 	bl	8000674 <stopTimer>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40000800 	.word	0x40000800
 8000fa4:	20000158 	.word	0x20000158
 8000fa8:	40000400 	.word	0x40000400
 8000fac:	20000090 	.word	0x20000090
 8000fb0:	20000190 	.word	0x20000190

08000fb4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
	if (buttonLock != 0) return;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_GPIO_EXTI_Callback+0x50>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d119      	bne.n	8000ffa <HAL_GPIO_EXTI_Callback+0x46>
	buttonLock = 1;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_GPIO_EXTI_Callback+0x50>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]

	setTimer(&htim3, 1000, 8399);
 8000fcc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000fd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fd6:	f7ff fb35 	bl	8000644 <setTimer>
	startTimer(&htim3);
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fdc:	f7ff fb27 	bl	800062e <startTimer>

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	480a      	ldr	r0, [pc, #40]	; (800100c <HAL_GPIO_EXTI_Callback+0x58>)
 8000fe4:	f001 fcb8 	bl	8002958 <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d106      	bne.n	8000ffc <HAL_GPIO_EXTI_Callback+0x48>
		onButton(&recorder, GPIO_Pin);
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ff4:	f7ff fc3c 	bl	8000870 <onButton>
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_EXTI_Callback+0x48>
	if (buttonLock != 0) return;
 8000ffa:	bf00      	nop
	}
}
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000090 	.word	0x20000090
 8001008:	20000190 	.word	0x20000190
 800100c:	40020000 	.word	0x40020000
 8001010:	20000158 	.word	0x20000158

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b090      	sub	sp, #64	; 0x40
 8001018:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101a:	f000 fc8f 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101e:	f000 f863 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001022:	f000 fa15 	bl	8001450 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001026:	f000 f9c7 	bl	80013b8 <MX_TIM4_Init>
  MX_DAC_Init();
 800102a:	f000 f919 	bl	8001260 <MX_DAC_Init>
  MX_TIM3_Init();
 800102e:	f000 f977 	bl	8001320 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001032:	f000 f8c3 	bl	80011bc <MX_ADC1_Init>
  MX_SPI2_Init();
 8001036:	f000 f93d 	bl	80012b4 <MX_SPI2_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  recorder.soundTimer = &htim4;
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <main+0xac>)
 800103c:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <main+0xb0>)
 800103e:	601a      	str	r2, [r3, #0]
  recorder.speaker = &hdac;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <main+0xac>)
 8001042:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <main+0xb4>)
 8001044:	605a      	str	r2, [r3, #4]
  recorder.microphone = &hadc1;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <main+0xac>)
 8001048:	4a20      	ldr	r2, [pc, #128]	; (80010cc <main+0xb8>)
 800104a:	609a      	str	r2, [r3, #8]

  Lcd_PortType dataPorts[] = {
 800104c:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <main+0xbc>)
 800104e:	f107 0420 	add.w	r4, r7, #32
 8001052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOD, GPIOD, GPIOD, GPIOD
  };

  Lcd_PinType dataPins[] = {
 8001058:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <main+0xc0>)
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001062:	e883 0003 	stmia.w	r3, {r0, r1}
		  GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6
  };

  lcd = Lcd_create(dataPorts, dataPins,
 8001066:	4c1c      	ldr	r4, [pc, #112]	; (80010d8 <main+0xc4>)
 8001068:	4638      	mov	r0, r7
 800106a:	f107 0218 	add.w	r2, r7, #24
 800106e:	f107 0120 	add.w	r1, r7, #32
 8001072:	2300      	movs	r3, #0
 8001074:	9303      	str	r3, [sp, #12]
 8001076:	2304      	movs	r3, #4
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <main+0xc8>)
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	2302      	movs	r3, #2
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <main+0xc8>)
 8001084:	f7ff fe28 	bl	8000cd8 <Lcd_create>
 8001088:	4625      	mov	r5, r4
 800108a:	463c      	mov	r4, r7
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001090:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001094:	e885 0003 	stmia.w	r5, {r0, r1}
		  GPIOD, GPIO_PIN_1, GPIOD, GPIO_PIN_2,
		  LCD_4_BIT_MODE);

  recorder.lcd = &lcd;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <main+0xac>)
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <main+0xc4>)
 800109c:	60da      	str	r2, [r3, #12]

  buttonLock = 0;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <main+0xcc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

  stopTimer(&htim3);
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <main+0xd0>)
 80010a6:	f7ff fae5 	bl	8000674 <stopTimer>
  stopTimer(&htim4);
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <main+0xb0>)
 80010ac:	f7ff fae2 	bl	8000674 <stopTimer>

  changeToStateWaiting(&recorder);
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <main+0xac>)
 80010b2:	f7ff fb57 	bl	8000764 <changeToStateWaiting>

  while (1)
  {
	  onUpdate(&recorder);
 80010b6:	4802      	ldr	r0, [pc, #8]	; (80010c0 <main+0xac>)
 80010b8:	f7ff fbc0 	bl	800083c <onUpdate>
 80010bc:	e7fb      	b.n	80010b6 <main+0xa2>
 80010be:	bf00      	nop
 80010c0:	20000158 	.word	0x20000158
 80010c4:	20000118 	.word	0x20000118
 80010c8:	20000218 	.word	0x20000218
 80010cc:	200001d0 	.word	0x200001d0
 80010d0:	08003e08 	.word	0x08003e08
 80010d4:	08003e18 	.word	0x08003e18
 80010d8:	200000a8 	.word	0x200000a8
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	20000090 	.word	0x20000090
 80010e4:	20000190 	.word	0x20000190

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	; 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 fd70 	bl	8003bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <SystemClock_Config+0xcc>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <SystemClock_Config+0xcc>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <SystemClock_Config+0xcc>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <SystemClock_Config+0xd0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <SystemClock_Config+0xd0>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <SystemClock_Config+0xd0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001152:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001158:	2304      	movs	r3, #4
 800115a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800115c:	23a8      	movs	r3, #168	; 0xa8
 800115e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001160:	2302      	movs	r3, #2
 8001162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001164:	2304      	movs	r3, #4
 8001166:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fc3d 	bl	80029ec <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001178:	f000 f9e2 	bl	8001540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
 800117e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001180:	2302      	movs	r3, #2
 8001182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001188:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800118e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001192:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2105      	movs	r1, #5
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fe96 	bl	8002ecc <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011a6:	f000 f9cb 	bl	8001540 <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3750      	adds	r7, #80	; 0x50
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_ADC1_Init+0x98>)
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <MX_ADC1_Init+0x9c>)
 80011d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_ADC1_Init+0x98>)
 80011d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_ADC1_Init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_ADC1_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_ADC1_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_ADC1_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_ADC1_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_ADC1_Init+0x98>)
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <MX_ADC1_Init+0xa0>)
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_ADC1_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_ADC1_Init+0x98>)
 800120a:	2201      	movs	r2, #1
 800120c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_ADC1_Init+0x98>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_ADC1_Init+0x98>)
 8001218:	2201      	movs	r2, #1
 800121a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_ADC1_Init+0x98>)
 800121e:	f000 fc21 	bl	8001a64 <HAL_ADC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001228:	f000 f98a 	bl	8001540 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800122c:	2301      	movs	r3, #1
 800122e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001230:	2301      	movs	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_ADC1_Init+0x98>)
 800123e:	f000 fdad 	bl	8001d9c <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001248:	f000 f97a 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200001d0 	.word	0x200001d0
 8001258:	40012000 	.word	0x40012000
 800125c:	0f000001 	.word	0x0f000001

08001260 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_DAC_Init+0x4c>)
 8001270:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <MX_DAC_Init+0x50>)
 8001272:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_DAC_Init+0x4c>)
 8001276:	f001 f8c0 	bl	80023fa <HAL_DAC_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001280:	f000 f95e 	bl	8001540 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_DAC_Init+0x4c>)
 8001294:	f001 f954 	bl	8002540 <HAL_DAC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800129e:	f000 f94f 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000218 	.word	0x20000218
 80012b0:	40007400 	.word	0x40007400

080012b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_SPI2_Init+0x64>)
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <MX_SPI2_Init+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_SPI2_Init+0x64>)
 80012c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_SPI2_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_SPI2_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_SPI2_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_SPI2_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_SPI2_Init+0x64>)
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_SPI2_Init+0x64>)
 80012e8:	2218      	movs	r2, #24
 80012ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_SPI2_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_SPI2_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_SPI2_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_SPI2_Init+0x64>)
 8001300:	220a      	movs	r2, #10
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_SPI2_Init+0x64>)
 8001306:	f001 ff9f 	bl	8003248 <HAL_SPI_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001310:	f000 f916 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200000c0 	.word	0x200000c0
 800131c:	40003800 	.word	0x40003800

08001320 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_TIM3_Init+0x90>)
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <MX_TIM3_Init+0x94>)
 8001340:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_TIM3_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_TIM3_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_TIM3_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_TIM3_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_TIM3_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001360:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_TIM3_Init+0x90>)
 8001362:	f001 ffd5 	bl	8003310 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800136c:	f000 f8e8 	bl	8001540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4619      	mov	r1, r3
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_TIM3_Init+0x90>)
 800137e:	f002 f949 	bl	8003614 <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001388:	f000 f8da 	bl	8001540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_TIM3_Init+0x90>)
 800139a:	f002 fb55 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80013a4:	f000 f8cc 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000190 	.word	0x20000190
 80013b4:	40000400 	.word	0x40000400

080013b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_TIM4_Init+0x90>)
 80013d6:	4a1d      	ldr	r2, [pc, #116]	; (800144c <MX_TIM4_Init+0x94>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_TIM4_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_TIM4_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_TIM4_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_TIM4_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_TIM4_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <MX_TIM4_Init+0x90>)
 80013fa:	f001 ff89 	bl	8003310 <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001404:	f000 f89c 	bl	8001540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	4619      	mov	r1, r3
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <MX_TIM4_Init+0x90>)
 8001416:	f002 f8fd 	bl	8003614 <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001420:	f000 f88e 	bl	8001540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_TIM4_Init+0x90>)
 8001432:	f002 fb09 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 800143c:	f000 f880 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000118 	.word	0x20000118
 800144c:	40000800 	.word	0x40000800

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <MX_GPIO_Init+0xe0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a30      	ldr	r2, [pc, #192]	; (8001530 <MX_GPIO_Init+0xe0>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <MX_GPIO_Init+0xe0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <MX_GPIO_Init+0xe0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a29      	ldr	r2, [pc, #164]	; (8001530 <MX_GPIO_Init+0xe0>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <MX_GPIO_Init+0xe0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <MX_GPIO_Init+0xe0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a22      	ldr	r2, [pc, #136]	; (8001530 <MX_GPIO_Init+0xe0>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_GPIO_Init+0xe0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_GPIO_Init+0xe0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <MX_GPIO_Init+0xe0>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_GPIO_Init+0xe0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80014d6:	2200      	movs	r2, #0
 80014d8:	f24f 017e 	movw	r1, #61566	; 0xf07e
 80014dc:	4815      	ldr	r0, [pc, #84]	; (8001534 <MX_GPIO_Init+0xe4>)
 80014de:	f001 fa53 	bl	8002988 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e2:	2301      	movs	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_GPIO_Init+0xe8>)
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4811      	ldr	r0, [pc, #68]	; (800153c <MX_GPIO_Init+0xec>)
 80014f6:	f001 f895 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD1 PD2 PD3 PD4 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80014fa:	f24f 037e 	movw	r3, #61566	; 0xf07e
 80014fe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <MX_GPIO_Init+0xe4>)
 8001514:	f001 f886 	bl	8002624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2101      	movs	r1, #1
 800151c:	2006      	movs	r0, #6
 800151e:	f000 ff36 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001522:	2006      	movs	r0, #6
 8001524:	f000 ff4f 	bl	80023c6 <HAL_NVIC_EnableIRQ>

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40020c00 	.word	0x40020c00
 8001538:	10110000 	.word	0x10110000
 800153c:	40020000 	.word	0x40020000

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_MspInit+0x4c>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_MspInit+0x4c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_MspInit+0x4c>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_MspInit+0x4c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_ADC_MspInit+0x7c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d127      	bne.n	8001612 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_ADC_MspInit+0x80>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a15      	ldr	r2, [pc, #84]	; (8001620 <HAL_ADC_MspInit+0x80>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_ADC_MspInit+0x80>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_ADC_MspInit+0x80>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_ADC_MspInit+0x80>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_ADC_MspInit+0x80>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015fa:	2302      	movs	r3, #2
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fe:	2303      	movs	r3, #3
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_ADC_MspInit+0x84>)
 800160e:	f001 f809 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012000 	.word	0x40012000
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_DAC_MspInit+0x7c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d127      	bne.n	800169a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 8001654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001682:	2310      	movs	r3, #16
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001686:	2303      	movs	r3, #3
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_DAC_MspInit+0x84>)
 8001696:	f000 ffc5 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40007400 	.word	0x40007400
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000

080016b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <HAL_SPI_MspInit+0x84>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12c      	bne.n	800172c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_SPI_MspInit+0x88>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <HAL_SPI_MspInit+0x88>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_SPI_MspInit+0x88>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_SPI_MspInit+0x88>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_SPI_MspInit+0x88>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_SPI_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800170a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800171c:	2305      	movs	r3, #5
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_SPI_MspInit+0x8c>)
 8001728:	f000 ff7c 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40003800 	.word	0x40003800
 8001738:	40023800 	.word	0x40023800
 800173c:	40020400 	.word	0x40020400

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <HAL_TIM_Base_MspInit+0x80>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d116      	bne.n	8001780 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_TIM_Base_MspInit+0x84>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <HAL_TIM_Base_MspInit+0x84>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_TIM_Base_MspInit+0x84>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2101      	movs	r1, #1
 8001772:	201d      	movs	r0, #29
 8001774:	f000 fe0b 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001778:	201d      	movs	r0, #29
 800177a:	f000 fe24 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800177e:	e01a      	b.n	80017b6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_TIM_Base_MspInit+0x88>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d115      	bne.n	80017b6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_TIM_Base_MspInit+0x84>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <HAL_TIM_Base_MspInit+0x84>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_TIM_Base_MspInit+0x84>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2101      	movs	r1, #1
 80017aa:	201e      	movs	r0, #30
 80017ac:	f000 fdef 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017b0:	201e      	movs	r0, #30
 80017b2:	f000 fe08 	bl	80023c6 <HAL_NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40000400 	.word	0x40000400
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40000800 	.word	0x40000800

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8001820:	f7ff fa42 	bl	8000ca8 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001824:	f000 f8dc 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001830:	2001      	movs	r0, #1
 8001832:	f001 f8c3 	bl	80029bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM3_IRQHandler+0x10>)
 8001842:	f001 fddf 	bl	8003404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000190 	.word	0x20000190

08001850 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <TIM4_IRQHandler+0x10>)
 8001856:	f001 fdd5 	bl	8003404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000118 	.word	0x20000118

08001864 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x50>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x16>
		heap_end = &end;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <_sbrk+0x50>)
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <_sbrk+0x54>)
 8001878:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <_sbrk+0x50>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <_sbrk+0x50>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	466a      	mov	r2, sp
 800188a:	4293      	cmp	r3, r2
 800188c:	d907      	bls.n	800189e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800188e:	f002 f96b 	bl	8003b68 <__errno>
 8001892:	4602      	mov	r2, r0
 8001894:	230c      	movs	r3, #12
 8001896:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001898:	f04f 33ff 	mov.w	r3, #4294967295
 800189c:	e006      	b.n	80018ac <_sbrk+0x48>
	}

	heap_end += incr;
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <_sbrk+0x50>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <_sbrk+0x50>)
 80018a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000094 	.word	0x20000094
 80018b8:	20000238 	.word	0x20000238

080018bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <SystemInit+0x28>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c6:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <SystemInit+0x28>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SystemInit+0x28>)
 80018d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018d6:	609a      	str	r2, [r3, #8]
#endif
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ee:	e003      	b.n	80018f8 <LoopCopyDataInit>

080018f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018f6:	3104      	adds	r1, #4

080018f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018f8:	480b      	ldr	r0, [pc, #44]	; (8001928 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001900:	d3f6      	bcc.n	80018f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001904:	e002      	b.n	800190c <LoopFillZerobss>

08001906 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001906:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001908:	f842 3b04 	str.w	r3, [r2], #4

0800190c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800190e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001910:	d3f9      	bcc.n	8001906 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001912:	f7ff ffd3 	bl	80018bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001916:	f002 f92d 	bl	8003b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff fb7b 	bl	8001014 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001920:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001924:	08003e44 	.word	0x08003e44
  ldr  r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800192c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001930:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001934:	20000234 	.word	0x20000234

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 fd07 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fdee 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fd1f 	bl	80023e2 <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 fce7 	bl	800238e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	2000022c 	.word	0x2000022c

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2000022c 	.word	0x2000022c

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_Delay+0x40>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000008 	.word	0x20000008

08001a64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e033      	b.n	8001ae2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fd8c 	bl	80015a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d118      	bne.n	8001ad4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	f043 0202 	orr.w	r2, r3, #2
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fa92 	bl	8001fe0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad2:	e001      	b.n	8001ad8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_Start+0x1a>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e0a5      	b.n	8001c52 <HAL_ADC_Start+0x166>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d018      	beq.n	8001b4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <HAL_ADC_Start+0x174>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a4c      	ldr	r2, [pc, #304]	; (8001c64 <HAL_ADC_Start+0x178>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9a      	lsrs	r2, r3, #18
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f9      	bne.n	8001b42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d179      	bne.n	8001c50 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9a:	d106      	bne.n	8001baa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	f023 0206 	bic.w	r2, r3, #6
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ba8:	e002      	b.n	8001bb0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_ADC_Start+0x17c>)
 8001bba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bc4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d12a      	bne.n	8001c28 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a25      	ldr	r2, [pc, #148]	; (8001c6c <HAL_ADC_Start+0x180>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d015      	beq.n	8001c08 <HAL_ADC_Start+0x11c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <HAL_ADC_Start+0x184>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d105      	bne.n	8001bf2 <HAL_ADC_Start+0x106>
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_ADC_Start+0x17c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <HAL_ADC_Start+0x188>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d129      	bne.n	8001c50 <HAL_ADC_Start+0x164>
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_ADC_Start+0x17c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d823      	bhi.n	8001c50 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d11c      	bne.n	8001c50 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	e013      	b.n	8001c50 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <HAL_ADC_Start+0x180>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10e      	bne.n	8001c50 <HAL_ADC_Start+0x164>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d107      	bne.n	8001c50 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c4e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	40012300 	.word	0x40012300
 8001c6c:	40012000 	.word	0x40012000
 8001c70:	40012100 	.word	0x40012100
 8001c74:	40012200 	.word	0x40012200

08001c78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c94:	d113      	bne.n	8001cbe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca4:	d10b      	bne.n	8001cbe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f043 0220 	orr.w	r2, r3, #32
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e05c      	b.n	8001d78 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cbe:	f7ff fea3 	bl	8001a08 <HAL_GetTick>
 8001cc2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cc4:	e01a      	b.n	8001cfc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d016      	beq.n	8001cfc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <HAL_ADC_PollForConversion+0x6c>
 8001cd4:	f7ff fe98 	bl	8001a08 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d20b      	bcs.n	8001cfc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f043 0204 	orr.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e03d      	b.n	8001d78 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d1dd      	bne.n	8001cc6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f06f 0212 	mvn.w	r2, #18
 8001d12:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d123      	bne.n	8001d76 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11f      	bne.n	8001d76 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d111      	bne.n	8001d76 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f043 0201 	orr.w	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x1c>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e105      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x228>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b09      	cmp	r3, #9
 8001dc6:	d925      	bls.n	8001e14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68d9      	ldr	r1, [r3, #12]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b1e      	subs	r3, #30
 8001dde:	2207      	movs	r2, #7
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43da      	mvns	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	400a      	ands	r2, r1
 8001dec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68d9      	ldr	r1, [r3, #12]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	4603      	mov	r3, r0
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4403      	add	r3, r0
 8001e06:	3b1e      	subs	r3, #30
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	e022      	b.n	8001e5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6919      	ldr	r1, [r3, #16]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	2207      	movs	r2, #7
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	400a      	ands	r2, r1
 8001e36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6919      	ldr	r1, [r3, #16]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4403      	add	r3, r0
 8001e50:	409a      	lsls	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d824      	bhi.n	8001eac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	3b05      	subs	r3, #5
 8001e74:	221f      	movs	r2, #31
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	400a      	ands	r2, r1
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b05      	subs	r3, #5
 8001e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eaa:	e04c      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	d824      	bhi.n	8001efe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b23      	subs	r3, #35	; 0x23
 8001ec6:	221f      	movs	r2, #31
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b23      	subs	r3, #35	; 0x23
 8001ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
 8001efc:	e023      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b41      	subs	r3, #65	; 0x41
 8001f10:	221f      	movs	r2, #31
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	3b41      	subs	r3, #65	; 0x41
 8001f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <HAL_ADC_ConfigChannel+0x234>)
 8001f48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <HAL_ADC_ConfigChannel+0x238>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d109      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1cc>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b12      	cmp	r3, #18
 8001f5a:	d105      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_ADC_ConfigChannel+0x238>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d123      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x21e>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d003      	beq.n	8001f82 <HAL_ADC_ConfigChannel+0x1e6>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b11      	cmp	r3, #17
 8001f80:	d11b      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d111      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_ADC_ConfigChannel+0x23c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <HAL_ADC_ConfigChannel+0x240>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	0c9a      	lsrs	r2, r3, #18
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fac:	e002      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40012300 	.word	0x40012300
 8001fd4:	40012000 	.word	0x40012000
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	431bde83 	.word	0x431bde83

08001fe0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe8:	4b79      	ldr	r3, [pc, #484]	; (80021d0 <ADC_Init+0x1f0>)
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	431a      	orrs	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6859      	ldr	r1, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	021a      	lsls	r2, r3, #8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002038:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6899      	ldr	r1, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <ADC_Init+0x1f4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d022      	beq.n	80020be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002086:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6899      	ldr	r1, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	e00f      	b.n	80020de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0202 	bic.w	r2, r2, #2
 80020ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6899      	ldr	r1, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7e1b      	ldrb	r3, [r3, #24]
 80020f8:	005a      	lsls	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01b      	beq.n	8002144 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800211a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800212a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	3b01      	subs	r3, #1
 8002138:	035a      	lsls	r2, r3, #13
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	e007      	b.n	8002154 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002152:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	3b01      	subs	r3, #1
 8002170:	051a      	lsls	r2, r3, #20
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002188:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6899      	ldr	r1, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002196:	025a      	lsls	r2, r3, #9
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6899      	ldr	r1, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	029a      	lsls	r2, r3, #10
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40012300 	.word	0x40012300
 80021d4:	0f000001 	.word	0x0f000001

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4907      	ldr	r1, [pc, #28]	; (8002274 <__NVIC_EnableIRQ+0x38>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	; (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002344:	d301      	bcc.n	800234a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <SysTick_Config+0x40>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002352:	210f      	movs	r1, #15
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f7ff ff8e 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <SysTick_Config+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002362:	4b04      	ldr	r3, [pc, #16]	; (8002374 <SysTick_Config+0x40>)
 8002364:	2207      	movs	r2, #7
 8002366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	e000e010 	.word	0xe000e010

08002378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff29 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a0:	f7ff ff3e 	bl	8002220 <__NVIC_GetPriorityGrouping>
 80023a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	6978      	ldr	r0, [r7, #20]
 80023ac:	f7ff ff8e 	bl	80022cc <NVIC_EncodePriority>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff5d 	bl	8002278 <__NVIC_SetPriority>
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff31 	bl	800223c <__NVIC_EnableIRQ>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffa2 	bl	8002334 <SysTick_Config>
 80023f0:	4603      	mov	r3, r0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e014      	b.n	8002436 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	791b      	ldrb	r3, [r3, #4]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff f903 	bl	8001628 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	795b      	ldrb	r3, [r3, #5]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_DAC_Start+0x1e>
 8002458:	2302      	movs	r3, #2
 800245a:	e050      	b.n	80024fe <HAL_DAC_Start+0xc0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	409a      	lsls	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d11a      	bne.n	80024b8 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002498:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d127      	bne.n	80024f0 <HAL_DAC_Start+0xb2>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b38      	cmp	r3, #56	; 0x38
 80024a4:	d124      	bne.n	80024f0 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e01b      	b.n	80024f0 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c2:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80024ce:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024d6:	d10b      	bne.n	80024f0 <HAL_DAC_Start+0xb2>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80024de:	d107      	bne.n	80024f0 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0202 	orr.w	r2, r2, #2
 80024ee:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6819      	ldr	r1, [r3, #0]
 800251a:	2201      	movs	r2, #1
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	400a      	ands	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	795b      	ldrb	r3, [r3, #5]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_DAC_ConfigChannel+0x20>
 800255c:	2302      	movs	r3, #2
 800255e:	e036      	b.n	80025ce <HAL_DAC_ConfigChannel+0x8e>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2202      	movs	r2, #2
 800256a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002574:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4013      	ands	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	22c0      	movs	r2, #192	; 0xc0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	400a      	ands	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80025da:	b480      	push	{r7}
 80025dc:	b087      	sub	sp, #28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	3308      	adds	r3, #8
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e004      	b.n	800260e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	3314      	adds	r3, #20
 800260c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	461a      	mov	r2, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e16b      	b.n	8002918 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002640:	2201      	movs	r2, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	429a      	cmp	r2, r3
 800265a:	f040 815a 	bne.w	8002912 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d00b      	beq.n	800267e <HAL_GPIO_Init+0x5a>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d007      	beq.n	800267e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002672:	2b11      	cmp	r3, #17
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b12      	cmp	r3, #18
 800267c:	d130      	bne.n	80026e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b4:	2201      	movs	r2, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 0201 	and.w	r2, r3, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0xfc>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b12      	cmp	r3, #18
 800271e:	d123      	bne.n	8002768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	08da      	lsrs	r2, r3, #3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3208      	adds	r2, #8
 8002728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	220f      	movs	r2, #15
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	08da      	lsrs	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3208      	adds	r2, #8
 8002762:	69b9      	ldr	r1, [r7, #24]
 8002764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0203 	and.w	r2, r3, #3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80b4 	beq.w	8002912 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b5f      	ldr	r3, [pc, #380]	; (800292c <HAL_GPIO_Init+0x308>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a5e      	ldr	r2, [pc, #376]	; (800292c <HAL_GPIO_Init+0x308>)
 80027b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ba:	4b5c      	ldr	r3, [pc, #368]	; (800292c <HAL_GPIO_Init+0x308>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027c6:	4a5a      	ldr	r2, [pc, #360]	; (8002930 <HAL_GPIO_Init+0x30c>)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	3302      	adds	r3, #2
 80027ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	220f      	movs	r2, #15
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a51      	ldr	r2, [pc, #324]	; (8002934 <HAL_GPIO_Init+0x310>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d02b      	beq.n	800284a <HAL_GPIO_Init+0x226>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a50      	ldr	r2, [pc, #320]	; (8002938 <HAL_GPIO_Init+0x314>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d025      	beq.n	8002846 <HAL_GPIO_Init+0x222>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4f      	ldr	r2, [pc, #316]	; (800293c <HAL_GPIO_Init+0x318>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01f      	beq.n	8002842 <HAL_GPIO_Init+0x21e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4e      	ldr	r2, [pc, #312]	; (8002940 <HAL_GPIO_Init+0x31c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d019      	beq.n	800283e <HAL_GPIO_Init+0x21a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4d      	ldr	r2, [pc, #308]	; (8002944 <HAL_GPIO_Init+0x320>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_GPIO_Init+0x216>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <HAL_GPIO_Init+0x324>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00d      	beq.n	8002836 <HAL_GPIO_Init+0x212>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4b      	ldr	r2, [pc, #300]	; (800294c <HAL_GPIO_Init+0x328>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <HAL_GPIO_Init+0x20e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4a      	ldr	r2, [pc, #296]	; (8002950 <HAL_GPIO_Init+0x32c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_GPIO_Init+0x20a>
 800282a:	2307      	movs	r3, #7
 800282c:	e00e      	b.n	800284c <HAL_GPIO_Init+0x228>
 800282e:	2308      	movs	r3, #8
 8002830:	e00c      	b.n	800284c <HAL_GPIO_Init+0x228>
 8002832:	2306      	movs	r3, #6
 8002834:	e00a      	b.n	800284c <HAL_GPIO_Init+0x228>
 8002836:	2305      	movs	r3, #5
 8002838:	e008      	b.n	800284c <HAL_GPIO_Init+0x228>
 800283a:	2304      	movs	r3, #4
 800283c:	e006      	b.n	800284c <HAL_GPIO_Init+0x228>
 800283e:	2303      	movs	r3, #3
 8002840:	e004      	b.n	800284c <HAL_GPIO_Init+0x228>
 8002842:	2302      	movs	r3, #2
 8002844:	e002      	b.n	800284c <HAL_GPIO_Init+0x228>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_GPIO_Init+0x228>
 800284a:	2300      	movs	r3, #0
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f002 0203 	and.w	r2, r2, #3
 8002852:	0092      	lsls	r2, r2, #2
 8002854:	4093      	lsls	r3, r2
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800285c:	4934      	ldr	r1, [pc, #208]	; (8002930 <HAL_GPIO_Init+0x30c>)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	3302      	adds	r3, #2
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800286a:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <HAL_GPIO_Init+0x330>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800288e:	4a31      	ldr	r2, [pc, #196]	; (8002954 <HAL_GPIO_Init+0x330>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002894:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <HAL_GPIO_Init+0x330>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b8:	4a26      	ldr	r2, [pc, #152]	; (8002954 <HAL_GPIO_Init+0x330>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028be:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_GPIO_Init+0x330>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028e2:	4a1c      	ldr	r2, [pc, #112]	; (8002954 <HAL_GPIO_Init+0x330>)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <HAL_GPIO_Init+0x330>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800290c:	4a11      	ldr	r2, [pc, #68]	; (8002954 <HAL_GPIO_Init+0x330>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3301      	adds	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2b0f      	cmp	r3, #15
 800291c:	f67f ae90 	bls.w	8002640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002920:	bf00      	nop
 8002922:	3724      	adds	r7, #36	; 0x24
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40021400 	.word	0x40021400
 800294c:	40021800 	.word	0x40021800
 8002950:	40021c00 	.word	0x40021c00
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	887b      	ldrh	r3, [r7, #2]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	e001      	b.n	800297a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
 8002994:	4613      	mov	r3, r2
 8002996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002998:	787b      	ldrb	r3, [r7, #1]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299e:	887a      	ldrh	r2, [r7, #2]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a4:	e003      	b.n	80029ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	041a      	lsls	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	619a      	str	r2, [r3, #24]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d006      	beq.n	80029e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe faea 	bl	8000fb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40013c00 	.word	0x40013c00

080029ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e25b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d075      	beq.n	8002af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a0a:	4ba3      	ldr	r3, [pc, #652]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d00c      	beq.n	8002a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a16:	4ba0      	ldr	r3, [pc, #640]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d112      	bne.n	8002a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a22:	4b9d      	ldr	r3, [pc, #628]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2e:	d10b      	bne.n	8002a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	4b99      	ldr	r3, [pc, #612]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d05b      	beq.n	8002af4 <HAL_RCC_OscConfig+0x108>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d157      	bne.n	8002af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e236      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d106      	bne.n	8002a60 <HAL_RCC_OscConfig+0x74>
 8002a52:	4b91      	ldr	r3, [pc, #580]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a90      	ldr	r2, [pc, #576]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e01d      	b.n	8002a9c <HAL_RCC_OscConfig+0xb0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x98>
 8002a6a:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a8a      	ldr	r2, [pc, #552]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a87      	ldr	r2, [pc, #540]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0xb0>
 8002a84:	4b84      	ldr	r3, [pc, #528]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a83      	ldr	r2, [pc, #524]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b81      	ldr	r3, [pc, #516]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a80      	ldr	r2, [pc, #512]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d013      	beq.n	8002acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ffb0 	bl	8001a08 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aac:	f7fe ffac 	bl	8001a08 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1fb      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0xc0>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe ff9c 	bl	8001a08 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe ff98 	bl	8001a08 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1e7      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	4b6c      	ldr	r3, [pc, #432]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xe8>
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d063      	beq.n	8002bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b02:	4b65      	ldr	r3, [pc, #404]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0e:	4b62      	ldr	r3, [pc, #392]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d11c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1a:	4b5f      	ldr	r3, [pc, #380]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d116      	bne.n	8002b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b26:	4b5c      	ldr	r3, [pc, #368]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_RCC_OscConfig+0x152>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e1bb      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3e:	4b56      	ldr	r3, [pc, #344]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4952      	ldr	r1, [pc, #328]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b52:	e03a      	b.n	8002bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d020      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5c:	4b4f      	ldr	r3, [pc, #316]	; (8002c9c <HAL_RCC_OscConfig+0x2b0>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fe ff51 	bl	8001a08 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7fe ff4d 	bl	8001a08 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e19c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4940      	ldr	r1, [pc, #256]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
 8002b9c:	e015      	b.n	8002bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <HAL_RCC_OscConfig+0x2b0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe ff30 	bl	8001a08 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bac:	f7fe ff2c 	bl	8001a08 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e17b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d030      	beq.n	8002c38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bde:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_RCC_OscConfig+0x2b4>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe ff10 	bl	8001a08 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bec:	f7fe ff0c 	bl	8001a08 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e15b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x200>
 8002c0a:	e015      	b.n	8002c38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCC_OscConfig+0x2b4>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c12:	f7fe fef9 	bl	8001a08 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1a:	f7fe fef5 	bl	8001a08 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e144      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f0      	bne.n	8002c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a0 	beq.w	8002d86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10f      	bne.n	8002c76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c72:	2301      	movs	r3, #1
 8002c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_OscConfig+0x2b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d121      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_RCC_OscConfig+0x2b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <HAL_RCC_OscConfig+0x2b8>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe febb 	bl	8001a08 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	e011      	b.n	8002cba <HAL_RCC_OscConfig+0x2ce>
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	42470000 	.word	0x42470000
 8002ca0:	42470e80 	.word	0x42470e80
 8002ca4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca8:	f7fe feae 	bl	8001a08 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0fd      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cba:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x4d4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCC_OscConfig+0x2f0>
 8002cce:	4b7d      	ldr	r3, [pc, #500]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	4a7c      	ldr	r2, [pc, #496]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cda:	e01c      	b.n	8002d16 <HAL_RCC_OscConfig+0x32a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCC_OscConfig+0x312>
 8002ce4:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	4a76      	ldr	r2, [pc, #472]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf0:	4b74      	ldr	r3, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	4a73      	ldr	r2, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfc:	e00b      	b.n	8002d16 <HAL_RCC_OscConfig+0x32a>
 8002cfe:	4b71      	ldr	r3, [pc, #452]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a70      	ldr	r2, [pc, #448]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0a:	4b6e      	ldr	r3, [pc, #440]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a6d      	ldr	r2, [pc, #436]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d015      	beq.n	8002d4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fe73 	bl	8001a08 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe fe6f 	bl	8001a08 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0bc      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	4b61      	ldr	r3, [pc, #388]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ee      	beq.n	8002d26 <HAL_RCC_OscConfig+0x33a>
 8002d48:	e014      	b.n	8002d74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fe5d 	bl	8001a08 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7fe fe59 	bl	8001a08 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e0a6      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	4b56      	ldr	r3, [pc, #344]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ee      	bne.n	8002d52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d105      	bne.n	8002d86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7a:	4b52      	ldr	r3, [pc, #328]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4a51      	ldr	r2, [pc, #324]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8092 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d90:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d05c      	beq.n	8002e56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d141      	bne.n	8002e28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b48      	ldr	r3, [pc, #288]	; (8002ec8 <HAL_RCC_OscConfig+0x4dc>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fe fe2d 	bl	8001a08 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe fe29 	bl	8001a08 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e078      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc4:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	019b      	lsls	r3, r3, #6
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	3b01      	subs	r3, #1
 8002dea:	041b      	lsls	r3, r3, #16
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	061b      	lsls	r3, r3, #24
 8002df4:	4933      	ldr	r1, [pc, #204]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfa:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <HAL_RCC_OscConfig+0x4dc>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fe fe02 	bl	8001a08 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fdfe 	bl	8001a08 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e04d      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x41c>
 8002e26:	e045      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_RCC_OscConfig+0x4dc>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fdeb 	bl	8001a08 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fe fde7 	bl	8001a08 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e036      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x44a>
 8002e54:	e02e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e029      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_RCC_OscConfig+0x4d8>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d11c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d115      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d10d      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40007000 	.word	0x40007000
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	42470060 	.word	0x42470060

08002ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0cc      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b68      	ldr	r3, [pc, #416]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d90c      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b65      	ldr	r3, [pc, #404]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b63      	ldr	r3, [pc, #396]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0b8      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f20:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a58      	ldr	r2, [pc, #352]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f38:	4b53      	ldr	r3, [pc, #332]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f44:	4b50      	ldr	r3, [pc, #320]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	494d      	ldr	r1, [pc, #308]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d044      	beq.n	8002fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b47      	ldr	r3, [pc, #284]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d119      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e07f      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e06f      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9a:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e067      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002faa:	4b37      	ldr	r3, [pc, #220]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4934      	ldr	r1, [pc, #208]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fd24 	bl	8001a08 <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fe fd20 	bl	8001a08 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e04f      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 020c 	and.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1eb      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d20c      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e032      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4916      	ldr	r1, [pc, #88]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	490e      	ldr	r1, [pc, #56]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003052:	f000 f821 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8003056:	4601      	mov	r1, r0
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	5cd3      	ldrb	r3, [r2, r3]
 8003066:	fa21 f303 	lsr.w	r3, r1, r3
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1c8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fc84 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023c00 	.word	0x40023c00
 8003088:	40023800 	.word	0x40023800
 800308c:	08003e24 	.word	0x08003e24
 8003090:	20000000 	.word	0x20000000
 8003094:	20000004 	.word	0x20000004

08003098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	2300      	movs	r3, #0
 80030a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ae:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d007      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x32>
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d008      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x38>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 80b4 	bne.w	800322c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030c4:	4b5e      	ldr	r3, [pc, #376]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030c6:	60bb      	str	r3, [r7, #8]
       break;
 80030c8:	e0b3      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ca:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80030cc:	60bb      	str	r3, [r7, #8]
      break;
 80030ce:	e0b0      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d0:	4b5a      	ldr	r3, [pc, #360]	; (800323c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030da:	4b58      	ldr	r3, [pc, #352]	; (800323c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d04a      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e6:	4b55      	ldr	r3, [pc, #340]	; (800323c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	f04f 0400 	mov.w	r4, #0
 80030f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	ea03 0501 	and.w	r5, r3, r1
 80030fc:	ea04 0602 	and.w	r6, r4, r2
 8003100:	4629      	mov	r1, r5
 8003102:	4632      	mov	r2, r6
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	f04f 0400 	mov.w	r4, #0
 800310c:	0154      	lsls	r4, r2, #5
 800310e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003112:	014b      	lsls	r3, r1, #5
 8003114:	4619      	mov	r1, r3
 8003116:	4622      	mov	r2, r4
 8003118:	1b49      	subs	r1, r1, r5
 800311a:	eb62 0206 	sbc.w	r2, r2, r6
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f04f 0400 	mov.w	r4, #0
 8003126:	0194      	lsls	r4, r2, #6
 8003128:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800312c:	018b      	lsls	r3, r1, #6
 800312e:	1a5b      	subs	r3, r3, r1
 8003130:	eb64 0402 	sbc.w	r4, r4, r2
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	00e2      	lsls	r2, r4, #3
 800313e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003142:	00d9      	lsls	r1, r3, #3
 8003144:	460b      	mov	r3, r1
 8003146:	4614      	mov	r4, r2
 8003148:	195b      	adds	r3, r3, r5
 800314a:	eb44 0406 	adc.w	r4, r4, r6
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	0262      	lsls	r2, r4, #9
 8003158:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800315c:	0259      	lsls	r1, r3, #9
 800315e:	460b      	mov	r3, r1
 8003160:	4614      	mov	r4, r2
 8003162:	4618      	mov	r0, r3
 8003164:	4621      	mov	r1, r4
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f04f 0400 	mov.w	r4, #0
 800316c:	461a      	mov	r2, r3
 800316e:	4623      	mov	r3, r4
 8003170:	f7fd f832 	bl	80001d8 <__aeabi_uldivmod>
 8003174:	4603      	mov	r3, r0
 8003176:	460c      	mov	r4, r1
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e049      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317c:	4b2f      	ldr	r3, [pc, #188]	; (800323c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	f04f 0400 	mov.w	r4, #0
 8003186:	f240 11ff 	movw	r1, #511	; 0x1ff
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	ea03 0501 	and.w	r5, r3, r1
 8003192:	ea04 0602 	and.w	r6, r4, r2
 8003196:	4629      	mov	r1, r5
 8003198:	4632      	mov	r2, r6
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	f04f 0400 	mov.w	r4, #0
 80031a2:	0154      	lsls	r4, r2, #5
 80031a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031a8:	014b      	lsls	r3, r1, #5
 80031aa:	4619      	mov	r1, r3
 80031ac:	4622      	mov	r2, r4
 80031ae:	1b49      	subs	r1, r1, r5
 80031b0:	eb62 0206 	sbc.w	r2, r2, r6
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	f04f 0400 	mov.w	r4, #0
 80031bc:	0194      	lsls	r4, r2, #6
 80031be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031c2:	018b      	lsls	r3, r1, #6
 80031c4:	1a5b      	subs	r3, r3, r1
 80031c6:	eb64 0402 	sbc.w	r4, r4, r2
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	00e2      	lsls	r2, r4, #3
 80031d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031d8:	00d9      	lsls	r1, r3, #3
 80031da:	460b      	mov	r3, r1
 80031dc:	4614      	mov	r4, r2
 80031de:	195b      	adds	r3, r3, r5
 80031e0:	eb44 0406 	adc.w	r4, r4, r6
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	02a2      	lsls	r2, r4, #10
 80031ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031f2:	0299      	lsls	r1, r3, #10
 80031f4:	460b      	mov	r3, r1
 80031f6:	4614      	mov	r4, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	4621      	mov	r1, r4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f04f 0400 	mov.w	r4, #0
 8003202:	461a      	mov	r2, r3
 8003204:	4623      	mov	r3, r4
 8003206:	f7fc ffe7 	bl	80001d8 <__aeabi_uldivmod>
 800320a:	4603      	mov	r3, r0
 800320c:	460c      	mov	r4, r1
 800320e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	3301      	adds	r3, #1
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	60bb      	str	r3, [r7, #8]
      break;
 800322a:	e002      	b.n	8003232 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800322e:	60bb      	str	r3, [r7, #8]
      break;
 8003230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003232:	68bb      	ldr	r3, [r7, #8]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800323c:	40023800 	.word	0x40023800
 8003240:	00f42400 	.word	0x00f42400
 8003244:	007a1200 	.word	0x007a1200

08003248 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e056      	b.n	8003308 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d106      	bne.n	800327a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7fe fa1b 	bl	80016b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003290:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	ea42 0103 	orr.w	r1, r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	f003 0104 	and.w	r1, r3, #4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e01d      	b.n	800335e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe fa02 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 fa40 	bl	80037d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b06      	cmp	r3, #6
 800338e:	d007      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1a      	ldr	r2, [r3, #32]
 80033cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <HAL_TIM_Base_Stop_IT+0x48>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a1a      	ldr	r2, [r3, #32]
 80033dc:	f240 4344 	movw	r3, #1092	; 0x444
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <HAL_TIM_Base_Stop_IT+0x48>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0202 	mvn.w	r2, #2
 8003430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9a5 	bl	8003796 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f997 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f9a8 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0204 	mvn.w	r2, #4
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f97b 	bl	8003796 <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f96d 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f97e 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0208 	mvn.w	r2, #8
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2204      	movs	r2, #4
 80034de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f951 	bl	8003796 <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f943 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f954 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b10      	cmp	r3, #16
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b10      	cmp	r3, #16
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0210 	mvn.w	r2, #16
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2208      	movs	r2, #8
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f927 	bl	8003796 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f919 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f92a 	bl	80037aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d107      	bne.n	8003588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0201 	mvn.w	r2, #1
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fcea 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	d10e      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fad0 	bl	8003b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d10e      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d107      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8ef 	bl	80037be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0220 	mvn.w	r2, #32
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fa9a 	bl	8003b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIM_ConfigClockSource+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e0a6      	b.n	800377a <HAL_TIM_ConfigClockSource+0x166>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800364a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003652:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d067      	beq.n	8003734 <HAL_TIM_ConfigClockSource+0x120>
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d80b      	bhi.n	8003680 <HAL_TIM_ConfigClockSource+0x6c>
 8003668:	2b10      	cmp	r3, #16
 800366a:	d073      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
 800366c:	2b10      	cmp	r3, #16
 800366e:	d802      	bhi.n	8003676 <HAL_TIM_ConfigClockSource+0x62>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d06f      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003674:	e078      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003676:	2b20      	cmp	r3, #32
 8003678:	d06c      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
 800367a:	2b30      	cmp	r3, #48	; 0x30
 800367c:	d06a      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800367e:	e073      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d00d      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x8c>
 8003684:	2b70      	cmp	r3, #112	; 0x70
 8003686:	d804      	bhi.n	8003692 <HAL_TIM_ConfigClockSource+0x7e>
 8003688:	2b50      	cmp	r3, #80	; 0x50
 800368a:	d033      	beq.n	80036f4 <HAL_TIM_ConfigClockSource+0xe0>
 800368c:	2b60      	cmp	r3, #96	; 0x60
 800368e:	d041      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003690:	e06a      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003696:	d066      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x152>
 8003698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369c:	d017      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800369e:	e063      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f000 f9aa 	bl	8003a08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
      break;
 80036cc:	e04c      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f000 f993 	bl	8003a08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f0:	609a      	str	r2, [r3, #8]
      break;
 80036f2:	e039      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	461a      	mov	r2, r3
 8003702:	f000 f907 	bl	8003914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2150      	movs	r1, #80	; 0x50
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f960 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 8003712:	e029      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	461a      	mov	r2, r3
 8003722:	f000 f926 	bl	8003972 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2160      	movs	r1, #96	; 0x60
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f950 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 8003732:	e019      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	461a      	mov	r2, r3
 8003742:	f000 f8e7 	bl	8003914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2140      	movs	r1, #64	; 0x40
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f940 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 8003752:	e009      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f000 f937 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 8003764:	e000      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a40      	ldr	r2, [pc, #256]	; (80038e8 <TIM_Base_SetConfig+0x114>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f2:	d00f      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3d      	ldr	r2, [pc, #244]	; (80038ec <TIM_Base_SetConfig+0x118>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00b      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3c      	ldr	r2, [pc, #240]	; (80038f0 <TIM_Base_SetConfig+0x11c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d007      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <TIM_Base_SetConfig+0x120>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3a      	ldr	r2, [pc, #232]	; (80038f8 <TIM_Base_SetConfig+0x124>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d108      	bne.n	8003826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2f      	ldr	r2, [pc, #188]	; (80038e8 <TIM_Base_SetConfig+0x114>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d02b      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003834:	d027      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2c      	ldr	r2, [pc, #176]	; (80038ec <TIM_Base_SetConfig+0x118>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d023      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2b      	ldr	r2, [pc, #172]	; (80038f0 <TIM_Base_SetConfig+0x11c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2a      	ldr	r2, [pc, #168]	; (80038f4 <TIM_Base_SetConfig+0x120>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01b      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a29      	ldr	r2, [pc, #164]	; (80038f8 <TIM_Base_SetConfig+0x124>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d017      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a28      	ldr	r2, [pc, #160]	; (80038fc <TIM_Base_SetConfig+0x128>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a27      	ldr	r2, [pc, #156]	; (8003900 <TIM_Base_SetConfig+0x12c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00f      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a26      	ldr	r2, [pc, #152]	; (8003904 <TIM_Base_SetConfig+0x130>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00b      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a25      	ldr	r2, [pc, #148]	; (8003908 <TIM_Base_SetConfig+0x134>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a24      	ldr	r2, [pc, #144]	; (800390c <TIM_Base_SetConfig+0x138>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a23      	ldr	r2, [pc, #140]	; (8003910 <TIM_Base_SetConfig+0x13c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d108      	bne.n	8003898 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <TIM_Base_SetConfig+0x114>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_Base_SetConfig+0xf8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a0c      	ldr	r2, [pc, #48]	; (80038f8 <TIM_Base_SetConfig+0x124>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d103      	bne.n	80038d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	615a      	str	r2, [r3, #20]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40010400 	.word	0x40010400
 80038fc:	40014000 	.word	0x40014000
 8003900:	40014400 	.word	0x40014400
 8003904:	40014800 	.word	0x40014800
 8003908:	40001800 	.word	0x40001800
 800390c:	40001c00 	.word	0x40001c00
 8003910:	40002000 	.word	0x40002000

08003914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0201 	bic.w	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 030a 	bic.w	r3, r3, #10
 8003950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003972:	b480      	push	{r7}
 8003974:	b087      	sub	sp, #28
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0210 	bic.w	r2, r3, #16
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800399c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	621a      	str	r2, [r3, #32]
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f043 0307 	orr.w	r3, r3, #7
 80039f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	609a      	str	r2, [r3, #8]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e05a      	b.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d01d      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d018      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00e      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d009      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a15      	ldr	r2, [pc, #84]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10c      	bne.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40000c00 	.word	0x40000c00
 8003b34:	40010400 	.word	0x40010400
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40001800 	.word	0x40001800

08003b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <__errno>:
 8003b68:	4b01      	ldr	r3, [pc, #4]	; (8003b70 <__errno+0x8>)
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	2000000c 	.word	0x2000000c

08003b74 <__libc_init_array>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	4e0d      	ldr	r6, [pc, #52]	; (8003bac <__libc_init_array+0x38>)
 8003b78:	4c0d      	ldr	r4, [pc, #52]	; (8003bb0 <__libc_init_array+0x3c>)
 8003b7a:	1ba4      	subs	r4, r4, r6
 8003b7c:	10a4      	asrs	r4, r4, #2
 8003b7e:	2500      	movs	r5, #0
 8003b80:	42a5      	cmp	r5, r4
 8003b82:	d109      	bne.n	8003b98 <__libc_init_array+0x24>
 8003b84:	4e0b      	ldr	r6, [pc, #44]	; (8003bb4 <__libc_init_array+0x40>)
 8003b86:	4c0c      	ldr	r4, [pc, #48]	; (8003bb8 <__libc_init_array+0x44>)
 8003b88:	f000 f8ea 	bl	8003d60 <_init>
 8003b8c:	1ba4      	subs	r4, r4, r6
 8003b8e:	10a4      	asrs	r4, r4, #2
 8003b90:	2500      	movs	r5, #0
 8003b92:	42a5      	cmp	r5, r4
 8003b94:	d105      	bne.n	8003ba2 <__libc_init_array+0x2e>
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b9c:	4798      	blx	r3
 8003b9e:	3501      	adds	r5, #1
 8003ba0:	e7ee      	b.n	8003b80 <__libc_init_array+0xc>
 8003ba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ba6:	4798      	blx	r3
 8003ba8:	3501      	adds	r5, #1
 8003baa:	e7f2      	b.n	8003b92 <__libc_init_array+0x1e>
 8003bac:	08003e3c 	.word	0x08003e3c
 8003bb0:	08003e3c 	.word	0x08003e3c
 8003bb4:	08003e3c 	.word	0x08003e3c
 8003bb8:	08003e40 	.word	0x08003e40

08003bbc <malloc>:
 8003bbc:	4b02      	ldr	r3, [pc, #8]	; (8003bc8 <malloc+0xc>)
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	f000 b861 	b.w	8003c88 <_malloc_r>
 8003bc6:	bf00      	nop
 8003bc8:	2000000c 	.word	0x2000000c

08003bcc <free>:
 8003bcc:	4b02      	ldr	r3, [pc, #8]	; (8003bd8 <free+0xc>)
 8003bce:	4601      	mov	r1, r0
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	f000 b80b 	b.w	8003bec <_free_r>
 8003bd6:	bf00      	nop
 8003bd8:	2000000c 	.word	0x2000000c

08003bdc <memset>:
 8003bdc:	4402      	add	r2, r0
 8003bde:	4603      	mov	r3, r0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d100      	bne.n	8003be6 <memset+0xa>
 8003be4:	4770      	bx	lr
 8003be6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bea:	e7f9      	b.n	8003be0 <memset+0x4>

08003bec <_free_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4605      	mov	r5, r0
 8003bf0:	2900      	cmp	r1, #0
 8003bf2:	d045      	beq.n	8003c80 <_free_r+0x94>
 8003bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf8:	1f0c      	subs	r4, r1, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bfb8      	it	lt
 8003bfe:	18e4      	addlt	r4, r4, r3
 8003c00:	f000 f8ac 	bl	8003d5c <__malloc_lock>
 8003c04:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <_free_r+0x98>)
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	4610      	mov	r0, r2
 8003c0a:	b933      	cbnz	r3, 8003c1a <_free_r+0x2e>
 8003c0c:	6063      	str	r3, [r4, #4]
 8003c0e:	6014      	str	r4, [r2, #0]
 8003c10:	4628      	mov	r0, r5
 8003c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c16:	f000 b8a2 	b.w	8003d5e <__malloc_unlock>
 8003c1a:	42a3      	cmp	r3, r4
 8003c1c:	d90c      	bls.n	8003c38 <_free_r+0x4c>
 8003c1e:	6821      	ldr	r1, [r4, #0]
 8003c20:	1862      	adds	r2, r4, r1
 8003c22:	4293      	cmp	r3, r2
 8003c24:	bf04      	itt	eq
 8003c26:	681a      	ldreq	r2, [r3, #0]
 8003c28:	685b      	ldreq	r3, [r3, #4]
 8003c2a:	6063      	str	r3, [r4, #4]
 8003c2c:	bf04      	itt	eq
 8003c2e:	1852      	addeq	r2, r2, r1
 8003c30:	6022      	streq	r2, [r4, #0]
 8003c32:	6004      	str	r4, [r0, #0]
 8003c34:	e7ec      	b.n	8003c10 <_free_r+0x24>
 8003c36:	4613      	mov	r3, r2
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	b10a      	cbz	r2, 8003c40 <_free_r+0x54>
 8003c3c:	42a2      	cmp	r2, r4
 8003c3e:	d9fa      	bls.n	8003c36 <_free_r+0x4a>
 8003c40:	6819      	ldr	r1, [r3, #0]
 8003c42:	1858      	adds	r0, r3, r1
 8003c44:	42a0      	cmp	r0, r4
 8003c46:	d10b      	bne.n	8003c60 <_free_r+0x74>
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	4401      	add	r1, r0
 8003c4c:	1858      	adds	r0, r3, r1
 8003c4e:	4282      	cmp	r2, r0
 8003c50:	6019      	str	r1, [r3, #0]
 8003c52:	d1dd      	bne.n	8003c10 <_free_r+0x24>
 8003c54:	6810      	ldr	r0, [r2, #0]
 8003c56:	6852      	ldr	r2, [r2, #4]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	4401      	add	r1, r0
 8003c5c:	6019      	str	r1, [r3, #0]
 8003c5e:	e7d7      	b.n	8003c10 <_free_r+0x24>
 8003c60:	d902      	bls.n	8003c68 <_free_r+0x7c>
 8003c62:	230c      	movs	r3, #12
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	e7d3      	b.n	8003c10 <_free_r+0x24>
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	1821      	adds	r1, r4, r0
 8003c6c:	428a      	cmp	r2, r1
 8003c6e:	bf04      	itt	eq
 8003c70:	6811      	ldreq	r1, [r2, #0]
 8003c72:	6852      	ldreq	r2, [r2, #4]
 8003c74:	6062      	str	r2, [r4, #4]
 8003c76:	bf04      	itt	eq
 8003c78:	1809      	addeq	r1, r1, r0
 8003c7a:	6021      	streq	r1, [r4, #0]
 8003c7c:	605c      	str	r4, [r3, #4]
 8003c7e:	e7c7      	b.n	8003c10 <_free_r+0x24>
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
 8003c82:	bf00      	nop
 8003c84:	20000098 	.word	0x20000098

08003c88 <_malloc_r>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	1ccd      	adds	r5, r1, #3
 8003c8c:	f025 0503 	bic.w	r5, r5, #3
 8003c90:	3508      	adds	r5, #8
 8003c92:	2d0c      	cmp	r5, #12
 8003c94:	bf38      	it	cc
 8003c96:	250c      	movcc	r5, #12
 8003c98:	2d00      	cmp	r5, #0
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	db01      	blt.n	8003ca2 <_malloc_r+0x1a>
 8003c9e:	42a9      	cmp	r1, r5
 8003ca0:	d903      	bls.n	8003caa <_malloc_r+0x22>
 8003ca2:	230c      	movs	r3, #12
 8003ca4:	6033      	str	r3, [r6, #0]
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	bd70      	pop	{r4, r5, r6, pc}
 8003caa:	f000 f857 	bl	8003d5c <__malloc_lock>
 8003cae:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <_malloc_r+0xac>)
 8003cb0:	6814      	ldr	r4, [r2, #0]
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	b991      	cbnz	r1, 8003cdc <_malloc_r+0x54>
 8003cb6:	4c20      	ldr	r4, [pc, #128]	; (8003d38 <_malloc_r+0xb0>)
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	b91b      	cbnz	r3, 8003cc4 <_malloc_r+0x3c>
 8003cbc:	4630      	mov	r0, r6
 8003cbe:	f000 f83d 	bl	8003d3c <_sbrk_r>
 8003cc2:	6020      	str	r0, [r4, #0]
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f000 f838 	bl	8003d3c <_sbrk_r>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d124      	bne.n	8003d1a <_malloc_r+0x92>
 8003cd0:	230c      	movs	r3, #12
 8003cd2:	6033      	str	r3, [r6, #0]
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f000 f842 	bl	8003d5e <__malloc_unlock>
 8003cda:	e7e4      	b.n	8003ca6 <_malloc_r+0x1e>
 8003cdc:	680b      	ldr	r3, [r1, #0]
 8003cde:	1b5b      	subs	r3, r3, r5
 8003ce0:	d418      	bmi.n	8003d14 <_malloc_r+0x8c>
 8003ce2:	2b0b      	cmp	r3, #11
 8003ce4:	d90f      	bls.n	8003d06 <_malloc_r+0x7e>
 8003ce6:	600b      	str	r3, [r1, #0]
 8003ce8:	50cd      	str	r5, [r1, r3]
 8003cea:	18cc      	adds	r4, r1, r3
 8003cec:	4630      	mov	r0, r6
 8003cee:	f000 f836 	bl	8003d5e <__malloc_unlock>
 8003cf2:	f104 000b 	add.w	r0, r4, #11
 8003cf6:	1d23      	adds	r3, r4, #4
 8003cf8:	f020 0007 	bic.w	r0, r0, #7
 8003cfc:	1ac3      	subs	r3, r0, r3
 8003cfe:	d0d3      	beq.n	8003ca8 <_malloc_r+0x20>
 8003d00:	425a      	negs	r2, r3
 8003d02:	50e2      	str	r2, [r4, r3]
 8003d04:	e7d0      	b.n	8003ca8 <_malloc_r+0x20>
 8003d06:	428c      	cmp	r4, r1
 8003d08:	684b      	ldr	r3, [r1, #4]
 8003d0a:	bf16      	itet	ne
 8003d0c:	6063      	strne	r3, [r4, #4]
 8003d0e:	6013      	streq	r3, [r2, #0]
 8003d10:	460c      	movne	r4, r1
 8003d12:	e7eb      	b.n	8003cec <_malloc_r+0x64>
 8003d14:	460c      	mov	r4, r1
 8003d16:	6849      	ldr	r1, [r1, #4]
 8003d18:	e7cc      	b.n	8003cb4 <_malloc_r+0x2c>
 8003d1a:	1cc4      	adds	r4, r0, #3
 8003d1c:	f024 0403 	bic.w	r4, r4, #3
 8003d20:	42a0      	cmp	r0, r4
 8003d22:	d005      	beq.n	8003d30 <_malloc_r+0xa8>
 8003d24:	1a21      	subs	r1, r4, r0
 8003d26:	4630      	mov	r0, r6
 8003d28:	f000 f808 	bl	8003d3c <_sbrk_r>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d0cf      	beq.n	8003cd0 <_malloc_r+0x48>
 8003d30:	6025      	str	r5, [r4, #0]
 8003d32:	e7db      	b.n	8003cec <_malloc_r+0x64>
 8003d34:	20000098 	.word	0x20000098
 8003d38:	2000009c 	.word	0x2000009c

08003d3c <_sbrk_r>:
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4c06      	ldr	r4, [pc, #24]	; (8003d58 <_sbrk_r+0x1c>)
 8003d40:	2300      	movs	r3, #0
 8003d42:	4605      	mov	r5, r0
 8003d44:	4608      	mov	r0, r1
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	f7fd fd8c 	bl	8001864 <_sbrk>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	d102      	bne.n	8003d56 <_sbrk_r+0x1a>
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	b103      	cbz	r3, 8003d56 <_sbrk_r+0x1a>
 8003d54:	602b      	str	r3, [r5, #0]
 8003d56:	bd38      	pop	{r3, r4, r5, pc}
 8003d58:	20000230 	.word	0x20000230

08003d5c <__malloc_lock>:
 8003d5c:	4770      	bx	lr

08003d5e <__malloc_unlock>:
 8003d5e:	4770      	bx	lr

08003d60 <_init>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	bf00      	nop
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr

08003d6c <_fini>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	bf00      	nop
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr
