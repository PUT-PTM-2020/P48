
P48.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ee48  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080175c8  080175c8  00030010  2**0
                  CONTENTS
  4 .ARM          00000008  080175c8  080175c8  000275c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080175d0  080175d0  00030010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080175d0  080175d0  000275d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080175d4  080175d4  000275d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080175d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010898  20000010  080175e8  00030010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200108a8  080175e8  000308a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d6d  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002caf  00000000  00000000  00047dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  0004aa60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  0004bc58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022aab  00000000  00000000  0004cce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f31c  00000000  00000000  0006f793  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3c1e  00000000  00000000  0007eaaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001526cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa0  00000000  00000000  00152748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008768 	.word	0x08008768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08008768 	.word	0x08008768

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <startTimer>:
#include "StateRecording.h"
#include "StateRecordingFile.h"
#include "StatePlaying.h"
#include "StatePlayingFile.h"

void startTimer(TIM_HandleTypeDef *timer) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(timer);
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f007 fd14 	bl	8007f0e <HAL_TIM_Base_Start_IT>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <setTimer>:

void setTimer(TIM_HandleTypeDef *timer,
		unsigned short prescaler, unsigned short period) {
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	460b      	mov	r3, r1
 80004f8:	807b      	strh	r3, [r7, #2]
 80004fa:	4613      	mov	r3, r2
 80004fc:	803b      	strh	r3, [r7, #0]
	timer->Instance->PSC = prescaler;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	887a      	ldrh	r2, [r7, #2]
 8000504:	629a      	str	r2, [r3, #40]	; 0x28
	timer->Instance->ARR = period;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	883a      	ldrh	r2, [r7, #0]
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <stopTimer>:

void stopTimer(TIM_HandleTypeDef *timer) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(timer);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f007 fd17 	bl	8007f56 <HAL_TIM_Base_Stop_IT>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <startSpeaker>:

void startSpeaker(Recorder *recorder) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start(recorder->speaker, DAC_CHANNEL_1);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f006 f9c1 	bl	80068c6 <HAL_DAC_Start>
	HAL_DAC_Start(recorder->speaker, DAC_CHANNEL_2);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	2110      	movs	r1, #16
 800054a:	4618      	mov	r0, r3
 800054c:	f006 f9bb 	bl	80068c6 <HAL_DAC_Start>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <setSpeakerValue>:

void setSpeakerValue(Recorder *recorder, uint32_t value) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	// mask is needed make sure that errors in code won't break speaker
	HAL_DAC_SetValue(recorder->speaker, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value & 0x000000FF);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6898      	ldr	r0, [r3, #8]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	f006 fa78 	bl	8006a62 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(recorder->speaker, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value & 0x000000FF);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6898      	ldr	r0, [r3, #8]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2200      	movs	r2, #0
 800057c:	2110      	movs	r1, #16
 800057e:	f006 fa70 	bl	8006a62 <HAL_DAC_SetValue>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <stopSpeaker>:

void stopSpeaker(Recorder *recorder) {
 800058a:	b580      	push	{r7, lr}
 800058c:	b082      	sub	sp, #8
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
	HAL_DAC_Stop(recorder->speaker, DAC_CHANNEL_1);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f006 f9fa 	bl	8006992 <HAL_DAC_Stop>
	HAL_DAC_Stop(recorder->speaker, DAC_CHANNEL_2);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	2110      	movs	r1, #16
 80005a4:	4618      	mov	r0, r3
 80005a6:	f006 f9f4 	bl	8006992 <HAL_DAC_Stop>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <setLcdCursor>:

void setLcdCursor(Recorder *recorder, uint8_t row, uint8_t col) {
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	70fb      	strb	r3, [r7, #3]
 80005be:	4613      	mov	r3, r2
 80005c0:	70bb      	strb	r3, [r7, #2]
	Lcd_cursor(recorder->lcd, row, col);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	78ba      	ldrb	r2, [r7, #2]
 80005c8:	78f9      	ldrb	r1, [r7, #3]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fdca 	bl	8005164 <Lcd_cursor>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <setLcdText>:

void setLcdText(Recorder *recorder, char *string) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	Lcd_string(recorder->lcd, string);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	6839      	ldr	r1, [r7, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 fd9d 	bl	8005128 <Lcd_string>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <readMicrophoneData>:

void setLcdInt(Recorder *recorder, int i) {
	Lcd_int(recorder->lcd, i);
}

uint32_t readMicrophoneData(Recorder *recorder) {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(recorder->microphone);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fcb6 	bl	8005f74 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(recorder->microphone, 10) == HAL_OK) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	210a      	movs	r1, #10
 800060e:	4618      	mov	r0, r3
 8000610:	f005 fd76 	bl	8006100 <HAL_ADC_PollForConversion>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d106      	bne.n	8000628 <readMicrophoneData+0x32>
		return HAL_ADC_GetValue(recorder->microphone);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	4618      	mov	r0, r3
 8000620:	f005 fdf2 	bl	8006208 <HAL_ADC_GetValue>
 8000624:	4603      	mov	r3, r0
 8000626:	e000      	b.n	800062a <readMicrophoneData+0x34>
	}

	return 0;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <changeToStateWaiting>:

void changeToStateWaiting(Recorder *recorder) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	recorder->onStartState = onStartStateWaiting;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a09      	ldr	r2, [pc, #36]	; (8000664 <changeToStateWaiting+0x30>)
 8000640:	615a      	str	r2, [r3, #20]
	recorder->onUpdateState = onUpdateStateWaiting;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <changeToStateWaiting+0x34>)
 8000646:	619a      	str	r2, [r3, #24]
	recorder->onTimerUpdateState = onTimerUpdateStateWaiting;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <changeToStateWaiting+0x38>)
 800064c:	61da      	str	r2, [r3, #28]
	recorder->onButtonState = onButtonStateWaiting;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <changeToStateWaiting+0x3c>)
 8000652:	621a      	str	r2, [r3, #32]

	onStart(recorder);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 f84d 	bl	80006f4 <onStart>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	080011f5 	.word	0x080011f5
 8000668:	08001251 	.word	0x08001251
 800066c:	08001265 	.word	0x08001265
 8000670:	0800127d 	.word	0x0800127d

08000674 <changeToStateRecordingFile>:
	recorder->onButtonState = onButtonStateRecording;

	onStart(recorder);
}

void changeToStateRecordingFile(Recorder *recorder) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	recorder->onStartState = onStartStateRecordingFile;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <changeToStateRecordingFile+0x30>)
 8000680:	615a      	str	r2, [r3, #20]
	recorder->onUpdateState = onUpdateStateRecordingFile;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <changeToStateRecordingFile+0x34>)
 8000686:	619a      	str	r2, [r3, #24]
	recorder->onTimerUpdateState = onTimerUpdateStateRecordingFile;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <changeToStateRecordingFile+0x38>)
 800068c:	61da      	str	r2, [r3, #28]
	recorder->onButtonState = onButtonStateRecordingFile;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <changeToStateRecordingFile+0x3c>)
 8000692:	621a      	str	r2, [r3, #32]

	onStart(recorder);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f82d 	bl	80006f4 <onStart>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08000d71 	.word	0x08000d71
 80006a8:	08001061 	.word	0x08001061
 80006ac:	08001075 	.word	0x08001075
 80006b0:	080011cd 	.word	0x080011cd

080006b4 <changeToStatePlayingFile>:
	recorder->onButtonState = onButtonStatePlaying;

	onStart(recorder);
}

void changeToStatePlayingFile(Recorder *recorder) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	recorder->onStartState = onStartStatePlayingFile;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <changeToStatePlayingFile+0x30>)
 80006c0:	615a      	str	r2, [r3, #20]
	recorder->onUpdateState = onUpdateStatePlayingFile;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <changeToStatePlayingFile+0x34>)
 80006c6:	619a      	str	r2, [r3, #24]
	recorder->onTimerUpdateState = onTimerUpdateStatePlayingFile;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <changeToStatePlayingFile+0x38>)
 80006cc:	61da      	str	r2, [r3, #28]
	recorder->onButtonState = onButtonStatePlayingFile;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <changeToStatePlayingFile+0x3c>)
 80006d2:	621a      	str	r2, [r3, #32]

	onStart(recorder);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f80d 	bl	80006f4 <onStart>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	0800081d 	.word	0x0800081d
 80006e8:	08000b31 	.word	0x08000b31
 80006ec:	08000b45 	.word	0x08000b45
 80006f0:	08000c91 	.word	0x08000c91

080006f4 <onStart>:

void onStart(Recorder *recorder) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	recorder->onStartState(recorder);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	4798      	blx	r3
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <onUpdate>:

void onUpdate(Recorder *recorder) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	recorder->onUpdateState(recorder);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	4798      	blx	r3
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <onTimerUpdate>:

void onTimerUpdate(Recorder *recorder, TIM_HandleTypeDef *timer) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	recorder->onTimerUpdateState(recorder, timer);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	6839      	ldr	r1, [r7, #0]
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	4798      	blx	r3
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <onButton>:

void onButton(Recorder *recorder) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	recorder->onButtonState(recorder);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6a1b      	ldr	r3, [r3, #32]
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	4798      	blx	r3
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <findTimerSettings>:
 *      Author: Grzesio
 */

#include "StatePlayingFile.h"

int findTimerSettings(unsigned int sampleRate, unsigned short* prescaler, unsigned short* period) {
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
	unsigned long psc, arr, temp;
    for (psc = 65535; psc > 0; --psc) {
 8000764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	e030      	b.n	80007ce <findTimerSettings+0x76>
		temp = sampleRate * psc;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	69fa      	ldr	r2, [r7, #28]
 8000770:	fb02 f303 	mul.w	r3, r2, r3
 8000774:	61bb      	str	r3, [r7, #24]

		if (84000000L % temp != 0) {
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <findTimerSettings+0x8c>)
 8000778:	69ba      	ldr	r2, [r7, #24]
 800077a:	fbb3 f2f2 	udiv	r2, r3, r2
 800077e:	69b9      	ldr	r1, [r7, #24]
 8000780:	fb01 f202 	mul.w	r2, r1, r2
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2b00      	cmp	r3, #0
 8000788:	d11b      	bne.n	80007c2 <findTimerSettings+0x6a>
			continue;
		}
		arr = 84000000L / temp;
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <findTimerSettings+0x8c>)
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]

		if (arr <= 1) continue;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d915      	bls.n	80007c6 <findTimerSettings+0x6e>

		if (arr > 65535) return 0;
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007a0:	d301      	bcc.n	80007a6 <findTimerSettings+0x4e>
 80007a2:	2300      	movs	r3, #0
 80007a4:	e017      	b.n	80007d6 <findTimerSettings+0x7e>

		*prescaler = (unsigned short) (psc - 1);
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	3b01      	subs	r3, #1
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	801a      	strh	r2, [r3, #0]
		*period = (unsigned short) (arr - 1);
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	3b01      	subs	r3, #1
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	801a      	strh	r2, [r3, #0]
		return 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	e009      	b.n	80007d6 <findTimerSettings+0x7e>
			continue;
 80007c2:	bf00      	nop
 80007c4:	e000      	b.n	80007c8 <findTimerSettings+0x70>
		if (arr <= 1) continue;
 80007c6:	bf00      	nop
    for (psc = 65535; psc > 0; --psc) {
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1cb      	bne.n	800076c <findTimerSettings+0x14>
	}

	return 0;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	; 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	0501bd00 	.word	0x0501bd00

080007e8 <cleanUpFile>:

void cleanUpFile(Recorder *recorder) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	stopSpeaker(recorder);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff feca 	bl	800058a <stopSpeaker>
	stopTimer(recorder->soundTimer);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fe8d 	bl	800051a <stopTimer>

	f_close(&recorder->file);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8000806:	4618      	mov	r0, r3
 8000808:	f004 f995 	bl	8004b36 <f_close>

	changeToStateWaiting(recorder);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff11 	bl	8000634 <changeToStateWaiting>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <onStartStatePlayingFile>:

void onStartStatePlayingFile(Recorder *recorder) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	FRESULT result;
	if ((result = f_open(&recorder->file, "Nagranie.wav", FA_READ | FA_OPEN_EXISTING)) == FR_OK) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800082a:	2201      	movs	r2, #1
 800082c:	49a7      	ldr	r1, [pc, #668]	; (8000acc <onStartStatePlayingFile+0x2b0>)
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fce4 	bl	80041fc <f_open>
 8000834:	4603      	mov	r3, r0
 8000836:	74fb      	strb	r3, [r7, #19]
 8000838:	7cfb      	ldrb	r3, [r7, #19]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d117      	bne.n	800086e <onStartStatePlayingFile+0x52>
		setLcdCursor(recorder, 1, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2101      	movs	r1, #1
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff feb5 	bl	80005b2 <setLcdCursor>
		setLcdText(recorder, "Odtwarzanie         ");
 8000848:	49a1      	ldr	r1, [pc, #644]	; (8000ad0 <onStartStatePlayingFile+0x2b4>)
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fec4 	bl	80005d8 <setLcdText>
		HAL_Delay(2000);
		changeToStateWaiting(recorder);
		return;
	}

	if (!readWavHeader(&recorder->file, &recorder->wavHeader)) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f503 721b 	add.w	r2, r3, #620	; 0x26c
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800085c:	4619      	mov	r1, r3
 800085e:	4610      	mov	r0, r2
 8000860:	f000 fe0f 	bl	8001482 <readWavHeader>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	f040 8087 	bne.w	800097a <onStartStatePlayingFile+0x15e>
 800086c:	e074      	b.n	8000958 <onStartStatePlayingFile+0x13c>
		setLcdCursor(recorder, 1, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2101      	movs	r1, #1
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fe9d 	bl	80005b2 <setLcdCursor>
		char* text = "";
 8000878:	4b96      	ldr	r3, [pc, #600]	; (8000ad4 <onStartStatePlayingFile+0x2b8>)
 800087a:	617b      	str	r3, [r7, #20]
		switch (result) {
 800087c:	7cfb      	ldrb	r3, [r7, #19]
 800087e:	2b12      	cmp	r3, #18
 8000880:	d85e      	bhi.n	8000940 <onStartStatePlayingFile+0x124>
 8000882:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <onStartStatePlayingFile+0x6c>)
 8000884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000888:	080008d5 	.word	0x080008d5
 800088c:	080008db 	.word	0x080008db
 8000890:	080008e1 	.word	0x080008e1
 8000894:	080008e7 	.word	0x080008e7
 8000898:	080008ed 	.word	0x080008ed
 800089c:	080008f3 	.word	0x080008f3
 80008a0:	080008f9 	.word	0x080008f9
 80008a4:	080008ff 	.word	0x080008ff
 80008a8:	08000905 	.word	0x08000905
 80008ac:	0800090b 	.word	0x0800090b
 80008b0:	08000911 	.word	0x08000911
 80008b4:	08000917 	.word	0x08000917
 80008b8:	0800091d 	.word	0x0800091d
 80008bc:	08000923 	.word	0x08000923
 80008c0:	08000941 	.word	0x08000941
 80008c4:	08000929 	.word	0x08000929
 80008c8:	0800092f 	.word	0x0800092f
 80008cc:	08000935 	.word	0x08000935
 80008d0:	0800093b 	.word	0x0800093b
		case FR_OK: 					{text = "OK                  ";break;}
 80008d4:	4b80      	ldr	r3, [pc, #512]	; (8000ad8 <onStartStatePlayingFile+0x2bc>)
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e032      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_DISK_ERR: 				{text = "FR_DISK_ERR         ";break;}
 80008da:	4b80      	ldr	r3, [pc, #512]	; (8000adc <onStartStatePlayingFile+0x2c0>)
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	e02f      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_INT_ERR: 				{text = "FR_INT_ERR          ";break;}
 80008e0:	4b7f      	ldr	r3, [pc, #508]	; (8000ae0 <onStartStatePlayingFile+0x2c4>)
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e02c      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_NOT_READY: 				{text = "FR_NOT_READY        ";break;}
 80008e6:	4b7f      	ldr	r3, [pc, #508]	; (8000ae4 <onStartStatePlayingFile+0x2c8>)
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	e029      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_NO_FILE: 				{text = "FR_NO_FILE          ";break;}
 80008ec:	4b7e      	ldr	r3, [pc, #504]	; (8000ae8 <onStartStatePlayingFile+0x2cc>)
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e026      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_NO_PATH: 				{text = "FR_NO_PATH          ";break;}
 80008f2:	4b7e      	ldr	r3, [pc, #504]	; (8000aec <onStartStatePlayingFile+0x2d0>)
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	e023      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_INVALID_NAME: 			{text = "FR_INVALID_NAME     ";break;}
 80008f8:	4b7d      	ldr	r3, [pc, #500]	; (8000af0 <onStartStatePlayingFile+0x2d4>)
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	e020      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_DENIED: 				{text = "FR_DENIED           ";break;}
 80008fe:	4b7d      	ldr	r3, [pc, #500]	; (8000af4 <onStartStatePlayingFile+0x2d8>)
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	e01d      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_EXIST: 					{text = "FR_EXIST            ";break;}
 8000904:	4b7c      	ldr	r3, [pc, #496]	; (8000af8 <onStartStatePlayingFile+0x2dc>)
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	e01a      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_INVALID_OBJECT: 		{text = "FR_INVALID_OBJECT   ";break;}
 800090a:	4b7c      	ldr	r3, [pc, #496]	; (8000afc <onStartStatePlayingFile+0x2e0>)
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	e017      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_WRITE_PROTECTED:		{text = "FR_WRITE_PROTECTED  ";break;}
 8000910:	4b7b      	ldr	r3, [pc, #492]	; (8000b00 <onStartStatePlayingFile+0x2e4>)
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	e014      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_INVALID_DRIVE: 			{text = "FR_INVALID_DRIVE    ";break;}
 8000916:	4b7b      	ldr	r3, [pc, #492]	; (8000b04 <onStartStatePlayingFile+0x2e8>)
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	e011      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_NOT_ENABLED: 			{text = "FR_NOT_ENABLED      ";break;}
 800091c:	4b7a      	ldr	r3, [pc, #488]	; (8000b08 <onStartStatePlayingFile+0x2ec>)
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e00e      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_NO_FILESYSTEM: 			{text = "FR_NO_FILESYSTEM    ";break;}
 8000922:	4b7a      	ldr	r3, [pc, #488]	; (8000b0c <onStartStatePlayingFile+0x2f0>)
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e00b      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_TIMEOUT: 				{text = "FR_TIMEOUT          ";break;}
 8000928:	4b79      	ldr	r3, [pc, #484]	; (8000b10 <onStartStatePlayingFile+0x2f4>)
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e008      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_LOCKED: 				{text = "FR_LOCKED           ";break;}
 800092e:	4b79      	ldr	r3, [pc, #484]	; (8000b14 <onStartStatePlayingFile+0x2f8>)
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	e005      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_NOT_ENOUGH_CORE: 		{text = "FR_NOT_ENOUGH_CORE  ";break;}
 8000934:	4b78      	ldr	r3, [pc, #480]	; (8000b18 <onStartStatePlayingFile+0x2fc>)
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	e002      	b.n	8000940 <onStartStatePlayingFile+0x124>
		case FR_TOO_MANY_OPEN_FILES:	{text = "FR_TOO_MANY_OPEN_FIL";break;}
 800093a:	4b78      	ldr	r3, [pc, #480]	; (8000b1c <onStartStatePlayingFile+0x300>)
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	bf00      	nop
		setLcdText(recorder, text);
 8000940:	6979      	ldr	r1, [r7, #20]
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe48 	bl	80005d8 <setLcdText>
		HAL_Delay(2000);
 8000948:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800094c:	f005 faac 	bl	8005ea8 <HAL_Delay>
		changeToStateWaiting(recorder);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fe6f 	bl	8000634 <changeToStateWaiting>
		return;
 8000956:	e0b6      	b.n	8000ac6 <onStartStatePlayingFile+0x2aa>
		setLcdCursor(recorder, 1, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fe28 	bl	80005b2 <setLcdCursor>
		setLcdText(recorder, "Bledny naglowek WAV ");
 8000962:	496f      	ldr	r1, [pc, #444]	; (8000b20 <onStartStatePlayingFile+0x304>)
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff fe37 	bl	80005d8 <setLcdText>
		HAL_Delay(2000);
 800096a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800096e:	f005 fa9b 	bl	8005ea8 <HAL_Delay>

		cleanUpFile(recorder);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff38 	bl	80007e8 <cleanUpFile>
		return;
 8000978:	e0a5      	b.n	8000ac6 <onStartStatePlayingFile+0x2aa>
	}

	if (recorder->wavHeader.channelCount != 1
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f8b3 34aa 	ldrh.w	r3, [r3, #1194]	; 0x4aa
 8000980:	b29b      	uxth	r3, r3
 8000982:	2b01      	cmp	r3, #1
 8000984:	d10b      	bne.n	800099e <onStartStatePlayingFile+0x182>
			|| recorder->wavHeader.wavFormat != 1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f8b3 34a8 	ldrh.w	r3, [r3, #1192]	; 0x4a8
 800098c:	b29b      	uxth	r3, r3
 800098e:	2b01      	cmp	r3, #1
 8000990:	d105      	bne.n	800099e <onStartStatePlayingFile+0x182>
			|| recorder->wavHeader.bytesPerSample != 1) {
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8000998:	b29b      	uxth	r3, r3
 800099a:	2b01      	cmp	r3, #1
 800099c:	d010      	beq.n	80009c0 <onStartStatePlayingFile+0x1a4>
		setLcdCursor(recorder, 1, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2101      	movs	r1, #1
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fe05 	bl	80005b2 <setLcdCursor>
		setLcdText(recorder, "Niekompatybilny WAV ");
 80009a8:	495e      	ldr	r1, [pc, #376]	; (8000b24 <onStartStatePlayingFile+0x308>)
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fe14 	bl	80005d8 <setLcdText>
		HAL_Delay(2000);
 80009b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b4:	f005 fa78 	bl	8005ea8 <HAL_Delay>

		cleanUpFile(recorder);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff15 	bl	80007e8 <cleanUpFile>
		return;
 80009be:	e082      	b.n	8000ac6 <onStartStatePlayingFile+0x2aa>
	}

	unsigned short prescaler, period;
	if (!findTimerSettings(recorder->wavHeader.sampleRate, &prescaler, &period)) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 80009c6:	f107 020e 	add.w	r2, r7, #14
 80009ca:	f107 0110 	add.w	r1, r7, #16
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fec2 	bl	8000758 <findTimerSettings>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d110      	bne.n	80009fc <onStartStatePlayingFile+0x1e0>
		setLcdCursor(recorder, 1, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2101      	movs	r1, #1
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff fde7 	bl	80005b2 <setLcdCursor>
		setLcdText(recorder, "Nieznany sample rate");
 80009e4:	4950      	ldr	r1, [pc, #320]	; (8000b28 <onStartStatePlayingFile+0x30c>)
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fdf6 	bl	80005d8 <setLcdText>
		HAL_Delay(2000);
 80009ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009f0:	f005 fa5a 	bl	8005ea8 <HAL_Delay>

		cleanUpFile(recorder);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff fef7 	bl	80007e8 <cleanUpFile>
		return;
 80009fa:	e064      	b.n	8000ac6 <onStartStatePlayingFile+0x2aa>
	}

	recorder->counter = 0;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
	recorder->soundData = 0;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28

	recorder->currentBuffer = 0;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	recorder->bufferReady[0] = 1;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8000a18:	33c8      	adds	r3, #200	; 0xc8
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
	recorder->bufferReady[1] = 0;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8000a24:	33c9      	adds	r3, #201	; 0xc9
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]

	if (f_read(&recorder->file, recorder->buffer[recorder->currentBuffer], BUFFER_LEN,
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8000a36:	03db      	lsls	r3, r3, #15
 8000a38:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	18d1      	adds	r1, r2, r3
			&recorder->remainingBytes[recorder->currentBuffer]) != FR_OK) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8000a46:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8000a4a:	3332      	adds	r3, #50	; 0x32
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	3304      	adds	r3, #4
	if (f_read(&recorder->file, recorder->buffer[recorder->currentBuffer], BUFFER_LEN,
 8000a54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a58:	f003 fd53 	bl	8004502 <f_read>

	}

	setTimer(recorder->fileTimer, 1000, 839);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f240 3247 	movw	r2, #839	; 0x347
 8000a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fd40 	bl	80004ee <setTimer>
	stopTimer(recorder->fileTimer);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fd51 	bl	800051a <stopTimer>

	startSpeaker(recorder);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fd59 	bl	8000530 <startSpeaker>
	//setTimer(recorder->soundTimer, 1049, 4);
	setTimer(recorder->soundTimer, prescaler, period);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	8a39      	ldrh	r1, [r7, #16]
 8000a84:	89fa      	ldrh	r2, [r7, #14]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd31 	bl	80004ee <setTimer>
	startTimer(recorder->soundTimer);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fd21 	bl	80004d8 <startTimer>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9c:	4823      	ldr	r0, [pc, #140]	; (8000b2c <onStartStatePlayingFile+0x310>)
 8000a9e:	f006 f9b7 	bl	8006e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	4820      	ldr	r0, [pc, #128]	; (8000b2c <onStartStatePlayingFile+0x310>)
 8000aaa:	f006 f9b1 	bl	8006e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab4:	481d      	ldr	r0, [pc, #116]	; (8000b2c <onStartStatePlayingFile+0x310>)
 8000ab6:	f006 f9ab 	bl	8006e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac0:	481a      	ldr	r0, [pc, #104]	; (8000b2c <onStartStatePlayingFile+0x310>)
 8000ac2:	f006 f9a5 	bl	8006e10 <HAL_GPIO_WritePin>
}
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	08008780 	.word	0x08008780
 8000ad0:	08008790 	.word	0x08008790
 8000ad4:	080087a8 	.word	0x080087a8
 8000ad8:	080087ac 	.word	0x080087ac
 8000adc:	080087c4 	.word	0x080087c4
 8000ae0:	080087dc 	.word	0x080087dc
 8000ae4:	080087f4 	.word	0x080087f4
 8000ae8:	0800880c 	.word	0x0800880c
 8000aec:	08008824 	.word	0x08008824
 8000af0:	0800883c 	.word	0x0800883c
 8000af4:	08008854 	.word	0x08008854
 8000af8:	0800886c 	.word	0x0800886c
 8000afc:	08008884 	.word	0x08008884
 8000b00:	0800889c 	.word	0x0800889c
 8000b04:	080088b4 	.word	0x080088b4
 8000b08:	080088cc 	.word	0x080088cc
 8000b0c:	080088e4 	.word	0x080088e4
 8000b10:	080088fc 	.word	0x080088fc
 8000b14:	08008914 	.word	0x08008914
 8000b18:	0800892c 	.word	0x0800892c
 8000b1c:	08008944 	.word	0x08008944
 8000b20:	0800895c 	.word	0x0800895c
 8000b24:	08008974 	.word	0x08008974
 8000b28:	0800898c 	.word	0x0800898c
 8000b2c:	40020c00 	.word	0x40020c00

08000b30 <onUpdateStatePlayingFile>:

void onUpdateStatePlayingFile(Recorder *recorder) {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <onTimerUpdateStatePlayingFile>:

void onTimerUpdateStatePlayingFile(Recorder *recorder, TIM_HandleTypeDef *timer) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
	if (timer == recorder->soundTimer) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d15e      	bne.n	8000c16 <onTimerUpdateStatePlayingFile+0xd2>
		if (recorder->bufferReady[recorder->currentBuffer] == 0) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8000b66:	33c8      	adds	r3, #200	; 0xc8
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f000 808b 	beq.w	8000c88 <onTimerUpdateStatePlayingFile+0x144>
			return;
		}

		if (recorder->counter == 0) {
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d104      	bne.n	8000b86 <onTimerUpdateStatePlayingFile+0x42>
			startTimer(recorder->fileTimer);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fca9 	bl	80004d8 <startTimer>
		}

		recorder->soundData = (unsigned char) recorder->buffer[recorder->currentBuffer][recorder->counter];
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	03d2      	lsls	r2, r2, #15
 8000b96:	440a      	add	r2, r1
 8000b98:	4413      	add	r3, r2
 8000b9a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
		setSpeakerValue(recorder, recorder->soundData);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fcd2 	bl	8000558 <setSpeakerValue>
		++recorder->counter;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0

		if (recorder->counter >= BUFFER_LEN) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8000bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bcc:	d310      	bcc.n	8000bf0 <onTimerUpdateStatePlayingFile+0xac>
			recorder->counter = 0;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0

			// swap buffers
			recorder->currentBuffer = recorder->currentBuffer ? 0 : 1;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf0c      	ite	eq
 8000be0:	2301      	moveq	r3, #1
 8000be2:	2300      	movne	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
 8000bee:	e012      	b.n	8000c16 <onTimerUpdateStatePlayingFile+0xd2>
		}
		else if (recorder->counter >= recorder->remainingBytes[recorder->currentBuffer]) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	; 0x4c0
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8000c02:	3332      	adds	r3, #50	; 0x32
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	440b      	add	r3, r1
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d303      	bcc.n	8000c16 <onTimerUpdateStatePlayingFile+0xd2>
			cleanUpFile(recorder);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fdea 	bl	80007e8 <cleanUpFile>
			return;
 8000c14:	e039      	b.n	8000c8a <onTimerUpdateStatePlayingFile+0x146>
		}
	}
	if (timer == recorder->fileTimer) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d134      	bne.n	8000c8a <onTimerUpdateStatePlayingFile+0x146>
		stopTimer(recorder->fileTimer);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fc78 	bl	800051a <stopTimer>

		int otherBuffer = recorder->currentBuffer ? 0 : 1;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf0c      	ite	eq
 8000c34:	2301      	moveq	r3, #1
 8000c36:	2300      	movne	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	60fb      	str	r3, [r7, #12]

		recorder->bufferReady[otherBuffer] = 0;
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8000c46:	33c8      	adds	r3, #200	; 0xc8
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]

		if (f_read(&recorder->file, recorder->buffer[otherBuffer], BUFFER_LEN,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	03db      	lsls	r3, r3, #15
 8000c56:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	18d1      	adds	r1, r2, r3
				&recorder->remainingBytes[otherBuffer]) != FR_OK) {
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8000c64:	3332      	adds	r3, #50	; 0x32
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3304      	adds	r3, #4
		if (f_read(&recorder->file, recorder->buffer[otherBuffer], BUFFER_LEN,
 8000c6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c72:	f003 fc46 	bl	8004502 <f_read>

		}

		recorder->bufferReady[otherBuffer] = 1;
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8000c80:	33c8      	adds	r3, #200	; 0xc8
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e000      	b.n	8000c8a <onTimerUpdateStatePlayingFile+0x146>
			return;
 8000c88:	bf00      	nop
	}
}
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <onButtonStatePlayingFile>:

void onButtonStatePlayingFile(Recorder *recorder) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <onButtonStatePlayingFile+0x24>)
 8000c9c:	f006 f8a0 	bl	8006de0 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d102      	bne.n	8000cac <onButtonStatePlayingFile+0x1c>
		cleanUpFile(recorder);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fd9e 	bl	80007e8 <cleanUpFile>
	}
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <saveFile>:
 *      Author: Grzesio
 */

#include "StateRecordingFile.h"

void saveFile(Recorder *recorder) {
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	stopTimer(recorder->soundTimer);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fc28 	bl	800051a <stopTimer>

	if (recorder->counter > 0) {
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d02e      	beq.n	8000d32 <saveFile+0x7a>
		f_write(&recorder->file, recorder->buffer[recorder->currentBuffer], recorder->counter,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8000ce0:	03db      	lsls	r3, r3, #15
 8000ce2:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	18d1      	adds	r1, r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f8d3 44c0 	ldr.w	r4, [r3, #1216]	; 0x4c0
				&recorder->remainingBytes[recorder->currentBuffer]);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8000cf6:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8000cfa:	3332      	adds	r3, #50	; 0x32
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	3304      	adds	r3, #4
		f_write(&recorder->file, recorder->buffer[recorder->currentBuffer], recorder->counter,
 8000d04:	4622      	mov	r2, r4
 8000d06:	f003 fd2f 	bl	8004768 <f_write>

		recorder->wavHeader.fileSize += recorder->counter;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	; 0x4c0
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8000d16:	441a      	add	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
		recorder->wavHeader.dataSize += recorder->counter;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	; 0x4c0
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 8000d2a:	441a      	add	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
	}

	f_lseek(&recorder->file, 0);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 ff1b 	bl	8004b76 <f_lseek>
	writeWavHeader(&recorder->file, &recorder->wavHeader);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f503 721b 	add.w	r2, r3, #620	; 0x26c
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4610      	mov	r0, r2
 8000d50:	f000 fc32 	bl	80015b8 <writeWavHeader>

	f_close(&recorder->file);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 feeb 	bl	8004b36 <f_close>

//	changeToStateWaiting(recorder);
	changeToStatePlayingFile(recorder);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff fca7 	bl	80006b4 <changeToStatePlayingFile>
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd90      	pop	{r4, r7, pc}
	...

08000d70 <onStartStateRecordingFile>:

void onStartStateRecordingFile(Recorder *recorder) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	FRESULT result;
	if ((result = f_open(&recorder->file, "Nagranie.wav", FA_WRITE | FA_CREATE_ALWAYS)) == FR_OK) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8000d7e:	220a      	movs	r2, #10
 8000d80:	49a1      	ldr	r1, [pc, #644]	; (8001008 <onStartStateRecordingFile+0x298>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fa3a 	bl	80041fc <f_open>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	72fb      	strb	r3, [r7, #11]
 8000d8c:	7afb      	ldrb	r3, [r7, #11]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 80c1 	bne.w	8000f16 <onStartStateRecordingFile+0x1a6>
		setLcdCursor(recorder, 1, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2101      	movs	r1, #1
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff fc0a 	bl	80005b2 <setLcdCursor>
		setLcdText(recorder, "Nagrywanie          ");
 8000d9e:	499b      	ldr	r1, [pc, #620]	; (800100c <onStartStateRecordingFile+0x29c>)
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fc19 	bl	80005d8 <setLcdText>
		changeToStateWaiting(recorder);
		return;
	}

	// header
	recorder->wavHeader.fileType[0] = 'R';
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2252      	movs	r2, #82	; 0x52
 8000daa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
	recorder->wavHeader.fileType[1] = 'I';
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2249      	movs	r2, #73	; 0x49
 8000db2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
	recorder->wavHeader.fileType[2] = 'F';
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2246      	movs	r2, #70	; 0x46
 8000dba:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
	recorder->wavHeader.fileType[3] = 'F';
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2246      	movs	r2, #70	; 0x46
 8000dc2:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497

	recorder->wavHeader.fileSize = 36;// wszystko minus 8
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2224      	movs	r2, #36	; 0x24
 8000dca:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

	recorder->wavHeader.fileTypeHeader[0] = 'W';
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2257      	movs	r2, #87	; 0x57
 8000dd2:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c
	recorder->wavHeader.fileTypeHeader[1] = 'A';
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2241      	movs	r2, #65	; 0x41
 8000dda:	f883 249d 	strb.w	r2, [r3, #1181]	; 0x49d
	recorder->wavHeader.fileTypeHeader[2] = 'V';
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2256      	movs	r2, #86	; 0x56
 8000de2:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
	recorder->wavHeader.fileTypeHeader[3] = 'E';
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2245      	movs	r2, #69	; 0x45
 8000dea:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
	recorder->wavHeader.chunkFormat[0] = 'f';
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2266      	movs	r2, #102	; 0x66
 8000df2:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
	recorder->wavHeader.chunkFormat[1] = 'm';
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	226d      	movs	r2, #109	; 0x6d
 8000dfa:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
	recorder->wavHeader.chunkFormat[2] = 't';
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2274      	movs	r2, #116	; 0x74
 8000e02:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
	recorder->wavHeader.chunkFormat[3] = ' ';
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2220      	movs	r2, #32
 8000e0a:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
	recorder->wavHeader.headerLength = 16;// 16
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2210      	movs	r2, #16
 8000e12:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

	recorder->wavHeader.wavFormat = 1;// 1 (PCM)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f8a3 24a8 	strh.w	r2, [r3, #1192]	; 0x4a8
	recorder->wavHeader.channelCount = 1;// 1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2201      	movs	r2, #1
 8000e22:	f8a3 24aa 	strh.w	r2, [r3, #1194]	; 0x4aa
	recorder->wavHeader.sampleRate = 16000;// probkowanie
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000e2c:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
	recorder->wavHeader.sampleRateBytes = 16000;// u nas powinno byc tyle samo co sampleRate
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000e36:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
	recorder->wavHeader.bytesPerSample = 1;// u nas 1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
	recorder->wavHeader.bitsPerSample = 8;// u nas 8
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2208      	movs	r2, #8
 8000e46:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6

	recorder->wavHeader.dataTypeHeader[0] = 'd';
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2264      	movs	r2, #100	; 0x64
 8000e4e:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
	recorder->wavHeader.dataTypeHeader[1] = 'a';
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2261      	movs	r2, #97	; 0x61
 8000e56:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
	recorder->wavHeader.dataTypeHeader[2] = 't';
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2274      	movs	r2, #116	; 0x74
 8000e5e:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
	recorder->wavHeader.dataTypeHeader[3] = 'a';
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2261      	movs	r2, #97	; 0x61
 8000e66:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
	recorder->wavHeader.dataSize = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

	// state
	recorder->counter = 0;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0

	recorder->currentBuffer = 0;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	recorder->bufferReady[0] = 1;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8000e88:	33c8      	adds	r3, #200	; 0xc8
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
	recorder->bufferReady[1] = 1;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8000e94:	33c9      	adds	r3, #201	; 0xc9
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]

	writeWavHeader(&recorder->file, &recorder->wavHeader);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 721b 	add.w	r2, r3, #620	; 0x26c
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	f000 fb85 	bl	80015b8 <writeWavHeader>

	setTimer(recorder->fileTimer, 1000, 839);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f240 3247 	movw	r2, #839	; 0x347
 8000eb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fb17 	bl	80004ee <setTimer>
	stopTimer(recorder->fileTimer);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fb28 	bl	800051a <stopTimer>

	setTimer(recorder->soundTimer, 1049, 4);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	f240 4119 	movw	r1, #1049	; 0x419
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fb0a 	bl	80004ee <setTimer>
	startTimer(recorder->soundTimer);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fafa 	bl	80004d8 <startTimer>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eea:	4849      	ldr	r0, [pc, #292]	; (8001010 <onStartStateRecordingFile+0x2a0>)
 8000eec:	f005 ff90 	bl	8006e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef6:	4846      	ldr	r0, [pc, #280]	; (8001010 <onStartStateRecordingFile+0x2a0>)
 8000ef8:	f005 ff8a 	bl	8006e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f02:	4843      	ldr	r0, [pc, #268]	; (8001010 <onStartStateRecordingFile+0x2a0>)
 8000f04:	f005 ff84 	bl	8006e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f0e:	4840      	ldr	r0, [pc, #256]	; (8001010 <onStartStateRecordingFile+0x2a0>)
 8000f10:	f005 ff7e 	bl	8006e10 <HAL_GPIO_WritePin>
 8000f14:	e074      	b.n	8001000 <onStartStateRecordingFile+0x290>
		setLcdCursor(recorder, 1, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2101      	movs	r1, #1
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fb49 	bl	80005b2 <setLcdCursor>
		char* text = "";
 8000f20:	4b3c      	ldr	r3, [pc, #240]	; (8001014 <onStartStateRecordingFile+0x2a4>)
 8000f22:	60fb      	str	r3, [r7, #12]
		switch (result) {
 8000f24:	7afb      	ldrb	r3, [r7, #11]
 8000f26:	2b12      	cmp	r3, #18
 8000f28:	d85e      	bhi.n	8000fe8 <onStartStateRecordingFile+0x278>
 8000f2a:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <onStartStateRecordingFile+0x1c0>)
 8000f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f30:	08000f7d 	.word	0x08000f7d
 8000f34:	08000f83 	.word	0x08000f83
 8000f38:	08000f89 	.word	0x08000f89
 8000f3c:	08000f8f 	.word	0x08000f8f
 8000f40:	08000f95 	.word	0x08000f95
 8000f44:	08000f9b 	.word	0x08000f9b
 8000f48:	08000fa1 	.word	0x08000fa1
 8000f4c:	08000fa7 	.word	0x08000fa7
 8000f50:	08000fad 	.word	0x08000fad
 8000f54:	08000fb3 	.word	0x08000fb3
 8000f58:	08000fb9 	.word	0x08000fb9
 8000f5c:	08000fbf 	.word	0x08000fbf
 8000f60:	08000fc5 	.word	0x08000fc5
 8000f64:	08000fcb 	.word	0x08000fcb
 8000f68:	08000fe9 	.word	0x08000fe9
 8000f6c:	08000fd1 	.word	0x08000fd1
 8000f70:	08000fd7 	.word	0x08000fd7
 8000f74:	08000fdd 	.word	0x08000fdd
 8000f78:	08000fe3 	.word	0x08000fe3
		case FR_OK: 					{text = "OK                  ";break;}
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <onStartStateRecordingFile+0x2a8>)
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	e032      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_DISK_ERR: 				{text = "FR_DISK_ERR         ";break;}
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <onStartStateRecordingFile+0x2ac>)
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	e02f      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_INT_ERR: 				{text = "FR_INT_ERR          ";break;}
 8000f88:	4b25      	ldr	r3, [pc, #148]	; (8001020 <onStartStateRecordingFile+0x2b0>)
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e02c      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_NOT_READY: 				{text = "FR_NOT_READY        ";break;}
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <onStartStateRecordingFile+0x2b4>)
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e029      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_NO_FILE: 				{text = "FR_NO_FILE          ";break;}
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <onStartStateRecordingFile+0x2b8>)
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e026      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_NO_PATH: 				{text = "FR_NO_PATH          ";break;}
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <onStartStateRecordingFile+0x2bc>)
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e023      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_INVALID_NAME: 			{text = "FR_INVALID_NAME     ";break;}
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <onStartStateRecordingFile+0x2c0>)
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	e020      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_DENIED: 				{text = "FR_DENIED           ";break;}
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <onStartStateRecordingFile+0x2c4>)
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	e01d      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_EXIST: 					{text = "FR_EXIST            ";break;}
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <onStartStateRecordingFile+0x2c8>)
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e01a      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_INVALID_OBJECT: 		{text = "FR_INVALID_OBJECT   ";break;}
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <onStartStateRecordingFile+0x2cc>)
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e017      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_WRITE_PROTECTED:		{text = "FR_WRITE_PROTECTED  ";break;}
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <onStartStateRecordingFile+0x2d0>)
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e014      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_INVALID_DRIVE: 			{text = "FR_INVALID_DRIVE    ";break;}
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <onStartStateRecordingFile+0x2d4>)
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	e011      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_NOT_ENABLED: 			{text = "FR_NOT_ENABLED      ";break;}
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <onStartStateRecordingFile+0x2d8>)
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e00e      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_NO_FILESYSTEM: 			{text = "FR_NO_FILESYSTEM    ";break;}
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <onStartStateRecordingFile+0x2dc>)
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e00b      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_TIMEOUT: 				{text = "FR_TIMEOUT          ";break;}
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <onStartStateRecordingFile+0x2e0>)
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e008      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_LOCKED: 				{text = "FR_LOCKED           ";break;}
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <onStartStateRecordingFile+0x2e4>)
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e005      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_NOT_ENOUGH_CORE: 		{text = "FR_NOT_ENOUGH_CORE  ";break;}
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <onStartStateRecordingFile+0x2e8>)
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	e002      	b.n	8000fe8 <onStartStateRecordingFile+0x278>
		case FR_TOO_MANY_OPEN_FILES:	{text = "FR_TOO_MANY_OPEN_FIL";break;}
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <onStartStateRecordingFile+0x2ec>)
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	bf00      	nop
		setLcdText(recorder, text);
 8000fe8:	68f9      	ldr	r1, [r7, #12]
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff faf4 	bl	80005d8 <setLcdText>
		HAL_Delay(2000);
 8000ff0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ff4:	f004 ff58 	bl	8005ea8 <HAL_Delay>
		changeToStateWaiting(recorder);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fb1b 	bl	8000634 <changeToStateWaiting>
		return;
 8000ffe:	bf00      	nop
}
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	080089a4 	.word	0x080089a4
 800100c:	080089b4 	.word	0x080089b4
 8001010:	40020c00 	.word	0x40020c00
 8001014:	080089cc 	.word	0x080089cc
 8001018:	080089d0 	.word	0x080089d0
 800101c:	080089e8 	.word	0x080089e8
 8001020:	08008a00 	.word	0x08008a00
 8001024:	08008a18 	.word	0x08008a18
 8001028:	08008a30 	.word	0x08008a30
 800102c:	08008a48 	.word	0x08008a48
 8001030:	08008a60 	.word	0x08008a60
 8001034:	08008a78 	.word	0x08008a78
 8001038:	08008a90 	.word	0x08008a90
 800103c:	08008aa8 	.word	0x08008aa8
 8001040:	08008ac0 	.word	0x08008ac0
 8001044:	08008ad8 	.word	0x08008ad8
 8001048:	08008af0 	.word	0x08008af0
 800104c:	08008b08 	.word	0x08008b08
 8001050:	08008b20 	.word	0x08008b20
 8001054:	08008b38 	.word	0x08008b38
 8001058:	08008b50 	.word	0x08008b50
 800105c:	08008b68 	.word	0x08008b68

08001060 <onUpdateStateRecordingFile>:

void onUpdateStateRecordingFile(Recorder *recorder) {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <onTimerUpdateStateRecordingFile>:

void onTimerUpdateStateRecordingFile(Recorder *recorder, TIM_HandleTypeDef *timer) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
	if (timer == recorder->soundTimer) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d146      	bne.n	8001116 <onTimerUpdateStateRecordingFile+0xa2>
		if (recorder->bufferReady[recorder->currentBuffer] == 0) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001096:	33c8      	adds	r3, #200	; 0xc8
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 8091 	beq.w	80011c4 <onTimerUpdateStateRecordingFile+0x150>
			return;
		}

		recorder->soundData = readMicrophoneData(recorder) / 16;
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff faa7 	bl	80005f6 <readMicrophoneData>
 80010a8:	4603      	mov	r3, r0
 80010aa:	091a      	lsrs	r2, r3, #4
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
		recorder->buffer[recorder->currentBuffer][recorder->counter] = (unsigned char) recorder->soundData;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	; 0x4c4
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 80010c0:	b2c8      	uxtb	r0, r1
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	03d2      	lsls	r2, r2, #15
 80010c6:	440a      	add	r2, r1
 80010c8:	4413      	add	r3, r2
 80010ca:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80010ce:	4602      	mov	r2, r0
 80010d0:	701a      	strb	r2, [r3, #0]
		++recorder->counter;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0

		if (recorder->counter >= BUFFER_LEN) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 80010e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ea:	d314      	bcc.n	8001116 <onTimerUpdateStateRecordingFile+0xa2>
			recorder->counter = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0

			// swap buffers
			recorder->currentBuffer = recorder->currentBuffer ? 0 : 1;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	bf0c      	ite	eq
 80010fe:	2301      	moveq	r3, #1
 8001100:	2300      	movne	r3, #0
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4

			// save back-buffer to file
			startTimer(recorder->fileTimer);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f9e1 	bl	80004d8 <startTimer>
		}
	}
	if (timer == recorder->fileTimer) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d152      	bne.n	80011c6 <onTimerUpdateStateRecordingFile+0x152>
		stopTimer(recorder->fileTimer);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f9f8 	bl	800051a <stopTimer>

		int otherBuffer = recorder->currentBuffer ? 0 : 1;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf0c      	ite	eq
 8001134:	2301      	moveq	r3, #1
 8001136:	2300      	movne	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	60fb      	str	r3, [r7, #12]

		recorder->bufferReady[otherBuffer] = 0;
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001146:	33c8      	adds	r3, #200	; 0xc8
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]

		if (f_write(&recorder->file, recorder->buffer[otherBuffer], BUFFER_LEN,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	03db      	lsls	r3, r3, #15
 8001156:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	18d1      	adds	r1, r2, r3
				&recorder->remainingBytes[otherBuffer]) != FR_OK) {
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001164:	3332      	adds	r3, #50	; 0x32
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	3304      	adds	r3, #4
		if (f_write(&recorder->file, recorder->buffer[otherBuffer], BUFFER_LEN,
 800116e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001172:	f003 faf9 	bl	8004768 <f_write>

		}

		recorder->wavHeader.fileSize += recorder->remainingBytes[otherBuffer];
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800117e:	3332      	adds	r3, #50	; 0x32
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800118c:	441a      	add	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
		recorder->wavHeader.dataSize += recorder->remainingBytes[otherBuffer];
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800119c:	3332      	adds	r3, #50	; 0x32
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f8d3 34bc 	ldr.w	r3, [r3, #1212]	; 0x4bc
 80011aa:	441a      	add	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc

		recorder->bufferReady[otherBuffer] = 1;
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80011bc:	33c8      	adds	r3, #200	; 0xc8
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e000      	b.n	80011c6 <onTimerUpdateStateRecordingFile+0x152>
			return;
 80011c4:	bf00      	nop
	}
}
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <onButtonStateRecordingFile>:

void onButtonStateRecordingFile(Recorder *recorder) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 80011d4:	2101      	movs	r1, #1
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <onButtonStateRecordingFile+0x24>)
 80011d8:	f005 fe02 	bl	8006de0 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <onButtonStateRecordingFile+0x1c>
		saveFile(recorder);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fd68 	bl	8000cb8 <saveFile>
	}
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40020000 	.word	0x40020000

080011f4 <onStartStateWaiting>:
 *      Author: Grzesio
 */

#include "StateWaiting.h"

void onStartStateWaiting(Recorder *recorder) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	setLcdCursor(recorder, 1, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2101      	movs	r1, #1
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff f9d6 	bl	80005b2 <setLcdCursor>
	setLcdText(recorder, "Oczekiwanie na akcje");
 8001206:	4910      	ldr	r1, [pc, #64]	; (8001248 <onStartStateWaiting+0x54>)
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff f9e5 	bl	80005d8 <setLcdText>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <onStartStateWaiting+0x58>)
 8001216:	f005 fdfb 	bl	8006e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001220:	480a      	ldr	r0, [pc, #40]	; (800124c <onStartStateWaiting+0x58>)
 8001222:	f005 fdf5 	bl	8006e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <onStartStateWaiting+0x58>)
 800122e:	f005 fdef 	bl	8006e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <onStartStateWaiting+0x58>)
 800123a:	f005 fde9 	bl	8006e10 <HAL_GPIO_WritePin>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	08008b80 	.word	0x08008b80
 800124c:	40020c00 	.word	0x40020c00

08001250 <onUpdateStateWaiting>:

void onUpdateStateWaiting(Recorder *recorder) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <onTimerUpdateStateWaiting>:

void onTimerUpdateStateWaiting(Recorder *recorder, TIM_HandleTypeDef *timer) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]

}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <onButtonStateWaiting>:

void onButtonStateWaiting(Recorder *recorder) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001284:	2101      	movs	r1, #1
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <onButtonStateWaiting+0x24>)
 8001288:	f005 fdaa 	bl	8006de0 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	d102      	bne.n	8001298 <onButtonStateWaiting+0x1c>
		//changeToStateRecording(recorder);
		//changeToStatePlayingFile(recorder);
		changeToStateRecordingFile(recorder);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff f9ee 	bl	8000674 <changeToStateRecordingFile>
	}
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020000 	.word	0x40020000

080012a4 <readText>:
 */

#include "WavHeader.h"

void readText(unsigned char* buffer, unsigned int* from,
		char* text, unsigned int count) {
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < count; ++i) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	e010      	b.n	80012da <readText+0x36>
		text[i] = buffer[*from];
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	441a      	add	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	440b      	add	r3, r1
 80012c6:	7812      	ldrb	r2, [r2, #0]
 80012c8:	701a      	strb	r2, [r3, #0]
		++(*from);
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < count; ++i) {
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d8ea      	bhi.n	80012b8 <readText+0x14>
	}
}
 80012e2:	bf00      	nop
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <readUInt>:

void readUInt(unsigned char* buffer, unsigned int* from,
		unsigned int* value) {
 80012ee:	b480      	push	{r7}
 80012f0:	b087      	sub	sp, #28
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
	// little-endian
	*value = 0;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; ++i) {
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e016      	b.n	8001334 <readUInt+0x46>
		*value |= buffer[*from] << (i * 8);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	68f9      	ldr	r1, [r7, #12]
 8001310:	440a      	add	r2, r1
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	4611      	mov	r1, r2
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	00d2      	lsls	r2, r2, #3
 800131a:	fa01 f202 	lsl.w	r2, r1, r2
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	601a      	str	r2, [r3, #0]
		++(*from);
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; ++i) {
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b03      	cmp	r3, #3
 8001338:	dde5      	ble.n	8001306 <readUInt+0x18>
	}
}
 800133a:	bf00      	nop
 800133c:	371c      	adds	r7, #28
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <readUShort>:

void readUShort(unsigned char* buffer, unsigned int* from,
		unsigned short* value) {
 8001346:	b480      	push	{r7}
 8001348:	b087      	sub	sp, #28
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
	*value = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 2; ++i) {
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e01a      	b.n	8001394 <readUShort+0x4e>
		*value |= buffer[*from] << (i * 8);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b21a      	sxth	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68f9      	ldr	r1, [r7, #12]
 800136a:	440b      	add	r3, r1
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	b29a      	uxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	801a      	strh	r2, [r3, #0]
		++(*from);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 2; ++i) {
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b01      	cmp	r3, #1
 8001398:	dde1      	ble.n	800135e <readUShort+0x18>
	}
}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <writeText>:

void writeText(unsigned char* buffer, unsigned int* from,
		char* text, unsigned int count) {
 80013a6:	b480      	push	{r7}
 80013a8:	b087      	sub	sp, #28
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < count; ++i) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e010      	b.n	80013dc <writeText+0x36>
		buffer[*from] = (unsigned char) text[i];
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	441a      	add	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68f9      	ldr	r1, [r7, #12]
 80013c6:	440b      	add	r3, r1
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	701a      	strb	r2, [r3, #0]
		++(*from);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < count; ++i) {
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8ea      	bhi.n	80013ba <writeText+0x14>
	}
}
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <writeUInt>:

void writeUInt(unsigned char* buffer, unsigned int* from,
		unsigned int value) {
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
	// little-endian
	for (int i = 0; i < 4; ++i) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e011      	b.n	8001426 <writeUInt+0x36>
		buffer[*from] = (unsigned char) (value & 0xFF);
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	701a      	strb	r2, [r3, #0]
		value >>= 8;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	607b      	str	r3, [r7, #4]
		++(*from);
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; ++i) {
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b03      	cmp	r3, #3
 800142a:	ddea      	ble.n	8001402 <writeUInt+0x12>
	}
}
 800142c:	bf00      	nop
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <writeUShort>:

void writeUShort(unsigned char* buffer, unsigned int* from,
		unsigned short value) {
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	4613      	mov	r3, r2
 8001444:	80fb      	strh	r3, [r7, #6]
	// little-endian
	for (int i = 0; i < 2; ++i) {
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e011      	b.n	8001470 <writeUShort+0x38>
		buffer[*from] = (unsigned char) (value & 0xFF);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
		value >>= 8;
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	80fb      	strh	r3, [r7, #6]
		++(*from);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 2; ++i) {
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2b01      	cmp	r3, #1
 8001474:	ddea      	ble.n	800144c <writeUShort+0x14>
	}
}
 8001476:	bf00      	nop
 8001478:	371c      	adds	r7, #28
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <readWavHeader>:

int readWavHeader(FIL* file, WavHeader* wavHeader) {
 8001482:	b580      	push	{r7, lr}
 8001484:	b090      	sub	sp, #64	; 0x40
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
	unsigned char buffer[44];
	unsigned int bytesRead;

	if (f_read(file, buffer, 44, &bytesRead) != FR_OK
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	f107 0114 	add.w	r1, r7, #20
 8001494:	222c      	movs	r2, #44	; 0x2c
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f003 f833 	bl	8004502 <f_read>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d102      	bne.n	80014a8 <readWavHeader+0x26>
			|| bytesRead != 44) {
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	2b2c      	cmp	r3, #44	; 0x2c
 80014a6:	d001      	beq.n	80014ac <readWavHeader+0x2a>
		return 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e081      	b.n	80015b0 <readWavHeader+0x12e>
	}

	unsigned int nextByte = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]

	readText(buffer, &nextByte, wavHeader->fileType, 4);
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	f107 010c 	add.w	r1, r7, #12
 80014b6:	f107 0014 	add.w	r0, r7, #20
 80014ba:	2304      	movs	r3, #4
 80014bc:	f7ff fef2 	bl	80012a4 <readText>
	readUInt(buffer, &nextByte, &wavHeader->fileSize);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	1d1a      	adds	r2, r3, #4
 80014c4:	f107 010c 	add.w	r1, r7, #12
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff0e 	bl	80012ee <readUInt>
	readText(buffer, &nextByte, wavHeader->fileTypeHeader, 4);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	f103 0208 	add.w	r2, r3, #8
 80014d8:	f107 010c 	add.w	r1, r7, #12
 80014dc:	f107 0014 	add.w	r0, r7, #20
 80014e0:	2304      	movs	r3, #4
 80014e2:	f7ff fedf 	bl	80012a4 <readText>

	readText(buffer, &nextByte, wavHeader->chunkFormat, 4);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f103 020c 	add.w	r2, r3, #12
 80014ec:	f107 010c 	add.w	r1, r7, #12
 80014f0:	f107 0014 	add.w	r0, r7, #20
 80014f4:	2304      	movs	r3, #4
 80014f6:	f7ff fed5 	bl	80012a4 <readText>
	readUInt(buffer, &nextByte, &wavHeader->headerLength);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f103 0210 	add.w	r2, r3, #16
 8001500:	f107 010c 	add.w	r1, r7, #12
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fef0 	bl	80012ee <readUInt>

	readUShort(buffer, &nextByte, &wavHeader->wavFormat);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	f103 0214 	add.w	r2, r3, #20
 8001514:	f107 010c 	add.w	r1, r7, #12
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff12 	bl	8001346 <readUShort>
	readUShort(buffer, &nextByte, &wavHeader->channelCount);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f103 0216 	add.w	r2, r3, #22
 8001528:	f107 010c 	add.w	r1, r7, #12
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff08 	bl	8001346 <readUShort>

	readUInt(buffer, &nextByte, &wavHeader->sampleRate);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f103 0218 	add.w	r2, r3, #24
 800153c:	f107 010c 	add.w	r1, r7, #12
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fed2 	bl	80012ee <readUInt>
	readUInt(buffer, &nextByte, &wavHeader->sampleRateBytes);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f103 021c 	add.w	r2, r3, #28
 8001550:	f107 010c 	add.w	r1, r7, #12
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fec8 	bl	80012ee <readUInt>

	readUShort(buffer, &nextByte, &wavHeader->bytesPerSample);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f103 0220 	add.w	r2, r3, #32
 8001564:	f107 010c 	add.w	r1, r7, #12
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff feea 	bl	8001346 <readUShort>
	readUShort(buffer, &nextByte, &wavHeader->bitsPerSample);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001578:	f107 010c 	add.w	r1, r7, #12
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fee0 	bl	8001346 <readUShort>

	readText(buffer, &nextByte, wavHeader->dataTypeHeader, 4);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800158c:	f107 010c 	add.w	r1, r7, #12
 8001590:	f107 0014 	add.w	r0, r7, #20
 8001594:	2304      	movs	r3, #4
 8001596:	f7ff fe85 	bl	80012a4 <readText>

	readUInt(buffer, &nextByte, &wavHeader->dataSize);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80015a0:	f107 010c 	add.w	r1, r7, #12
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fea0 	bl	80012ee <readUInt>

	return 1;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3740      	adds	r7, #64	; 0x40
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <writeWavHeader>:

int writeWavHeader(FIL* file, WavHeader* wavHeader) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b090      	sub	sp, #64	; 0x40
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	unsigned char buffer[44];
	unsigned int bytesWritten;

	unsigned int nextByte = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]

	writeText(buffer, &nextByte, wavHeader->fileType, 4);
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	f107 010c 	add.w	r1, r7, #12
 80015cc:	f107 0014 	add.w	r0, r7, #20
 80015d0:	2304      	movs	r3, #4
 80015d2:	f7ff fee8 	bl	80013a6 <writeText>
	writeUInt(buffer, &nextByte, wavHeader->fileSize);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	f107 010c 	add.w	r1, r7, #12
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff04 	bl	80013f0 <writeUInt>
	writeText(buffer, &nextByte, wavHeader->fileTypeHeader, 4);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f103 0208 	add.w	r2, r3, #8
 80015ee:	f107 010c 	add.w	r1, r7, #12
 80015f2:	f107 0014 	add.w	r0, r7, #20
 80015f6:	2304      	movs	r3, #4
 80015f8:	f7ff fed5 	bl	80013a6 <writeText>

	writeText(buffer, &nextByte, wavHeader->chunkFormat, 4);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	f103 020c 	add.w	r2, r3, #12
 8001602:	f107 010c 	add.w	r1, r7, #12
 8001606:	f107 0014 	add.w	r0, r7, #20
 800160a:	2304      	movs	r3, #4
 800160c:	f7ff fecb 	bl	80013a6 <writeText>
	writeUInt(buffer, &nextByte, wavHeader->headerLength);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	f107 010c 	add.w	r1, r7, #12
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fee7 	bl	80013f0 <writeUInt>

	writeUShort(buffer, &nextByte, wavHeader->wavFormat);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	8a9b      	ldrh	r3, [r3, #20]
 8001626:	b29a      	uxth	r2, r3
 8001628:	f107 010c 	add.w	r1, r7, #12
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff01 	bl	8001438 <writeUShort>
	writeUShort(buffer, &nextByte, wavHeader->channelCount);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	8adb      	ldrh	r3, [r3, #22]
 800163a:	b29a      	uxth	r2, r3
 800163c:	f107 010c 	add.w	r1, r7, #12
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fef7 	bl	8001438 <writeUShort>

	writeUInt(buffer, &nextByte, wavHeader->sampleRate);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	f107 010c 	add.w	r1, r7, #12
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff feca 	bl	80013f0 <writeUInt>
	writeUInt(buffer, &nextByte, wavHeader->sampleRateBytes);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	69da      	ldr	r2, [r3, #28]
 8001660:	f107 010c 	add.w	r1, r7, #12
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fec1 	bl	80013f0 <writeUInt>

	writeUShort(buffer, &nextByte, wavHeader->bytesPerSample);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	8c1b      	ldrh	r3, [r3, #32]
 8001672:	b29a      	uxth	r2, r3
 8001674:	f107 010c 	add.w	r1, r7, #12
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fedb 	bl	8001438 <writeUShort>
	writeUShort(buffer, &nextByte, wavHeader->bitsPerSample);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001686:	b29a      	uxth	r2, r3
 8001688:	f107 010c 	add.w	r1, r7, #12
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fed1 	bl	8001438 <writeUShort>

	writeText(buffer, &nextByte, wavHeader->dataTypeHeader, 4);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800169c:	f107 010c 	add.w	r1, r7, #12
 80016a0:	f107 0014 	add.w	r0, r7, #20
 80016a4:	2304      	movs	r3, #4
 80016a6:	f7ff fe7e 	bl	80013a6 <writeText>

	writeUInt(buffer, &nextByte, wavHeader->dataSize);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ae:	f107 010c 	add.w	r1, r7, #12
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fe9a 	bl	80013f0 <writeUInt>

	if (f_write(file, buffer, 44, &bytesWritten) != FR_OK
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	f107 0114 	add.w	r1, r7, #20
 80016c4:	222c      	movs	r2, #44	; 0x2c
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f003 f84e 	bl	8004768 <f_write>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <writeWavHeader+0x120>
			|| bytesWritten != 44) {
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b2c      	cmp	r3, #44	; 0x2c
 80016d6:	d001      	beq.n	80016dc <writeWavHeader+0x124>
		return 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	e000      	b.n	80016de <writeWavHeader+0x126>
	}

	return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3740      	adds	r7, #64	; 0x40
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <DESELECT>:

static
inline void DESELECT(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <xmit_spi>:

extern SPI_HandleTypeDef hspi2;

static
void xmit_spi(BYTE Data)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800170e:	bf00      	nop
 8001710:	4808      	ldr	r0, [pc, #32]	; (8001734 <xmit_spi+0x30>)
 8001712:	f006 fb17 	bl	8007d44 <HAL_SPI_GetState>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	d1f9      	bne.n	8001710 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi2, &Data, 1, 5000);
 800171c:	1df9      	adds	r1, r7, #7
 800171e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001722:	2201      	movs	r2, #1
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <xmit_spi+0x30>)
 8001726:	f006 f837 	bl	8007798 <HAL_SPI_Transmit>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000258 	.word	0x20000258

08001738 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 800173e:	23ff      	movs	r3, #255	; 0xff
 8001740:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8001746:	bf00      	nop
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <rcvr_spi+0x38>)
 800174a:	f006 fafb 	bl	8007d44 <HAL_SPI_GetState>
 800174e:	4603      	mov	r3, r0
 8001750:	2b01      	cmp	r3, #1
 8001752:	d1f9      	bne.n	8001748 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi2, &Dummy, &Data, 1, 5000);
 8001754:	1dba      	adds	r2, r7, #6
 8001756:	1df9      	adds	r1, r7, #7
 8001758:	f241 3388 	movw	r3, #5000	; 0x1388
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2301      	movs	r3, #1
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <rcvr_spi+0x38>)
 8001762:	f006 f94d 	bl	8007a00 <HAL_SPI_TransmitReceive>

	return Data;
 8001766:	79bb      	ldrb	r3, [r7, #6]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000258 	.word	0x20000258

08001774 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 800177c:	f7ff ffdc 	bl	8001738 <rcvr_spi>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	701a      	strb	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <wait_ready+0x34>)
 8001798:	2232      	movs	r2, #50	; 0x32
 800179a:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 800179c:	f7ff ffcc 	bl	8001738 <rcvr_spi>
	do
		res = rcvr_spi();
 80017a0:	f7ff ffca 	bl	8001738 <rcvr_spi>
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d004      	beq.n	80017b8 <wait_ready+0x28>
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <wait_ready+0x34>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f3      	bne.n	80017a0 <wait_ready+0x10>

	return res;
 80017b8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000002d 	.word	0x2000002d

080017c8 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 80017ce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80017d2:	60bb      	str	r3, [r7, #8]

	DESELECT();
 80017d4:	f7ff ff8e 	bl	80016f4 <DESELECT>

	for (i = 0; i < 10; i++)
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e005      	b.n	80017ea <power_on+0x22>
		xmit_spi(0xFF);
 80017de:	20ff      	movs	r0, #255	; 0xff
 80017e0:	f7ff ff90 	bl	8001704 <xmit_spi>
	for (i = 0; i < 10; i++)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	3301      	adds	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2b09      	cmp	r3, #9
 80017ee:	d9f6      	bls.n	80017de <power_on+0x16>

	SELECT();
 80017f0:	f7ff ff79 	bl	80016e6 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80017f4:	2340      	movs	r3, #64	; 0x40
 80017f6:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8001808:	2395      	movs	r3, #149	; 0x95
 800180a:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e00b      	b.n	800182a <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	f107 0210 	add.w	r2, r7, #16
 8001818:	4413      	add	r3, r2
 800181a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff70 	bl	8001704 <xmit_spi>
	for (i = 0; i < 6; i++)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	3301      	adds	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b05      	cmp	r3, #5
 800182e:	d9f0      	bls.n	8001812 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8001830:	e002      	b.n	8001838 <power_on+0x70>
		Count--;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3b01      	subs	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8001838:	f7ff ff7e 	bl	8001738 <rcvr_spi>
 800183c:	4603      	mov	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	d002      	beq.n	8001848 <power_on+0x80>
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f4      	bne.n	8001832 <power_on+0x6a>

	DESELECT();
 8001848:	f7ff ff54 	bl	80016f4 <DESELECT>
	xmit_spi(0XFF);
 800184c:	20ff      	movs	r0, #255	; 0xff
 800184e:	f7ff ff59 	bl	8001704 <xmit_spi>

	PowerFlag = 1;
 8001852:	4b03      	ldr	r3, [pc, #12]	; (8001860 <power_on+0x98>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000002f 	.word	0x2000002f

08001864 <power_off>:

static
void power_off(void) {
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <power_off+0x14>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	2000002f 	.word	0x2000002f

0800187c <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <chk_power+0x14>)
 8001882:	781b      	ldrb	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	2000002f 	.word	0x2000002f

08001894 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <rcvr_datablock+0x68>)
 80018a0:	220a      	movs	r2, #10
 80018a2:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 80018a4:	f7ff ff48 	bl	8001738 <rcvr_spi>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d104      	bne.n	80018bc <rcvr_datablock+0x28>
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <rcvr_datablock+0x68>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f3      	bne.n	80018a4 <rcvr_datablock+0x10>
	if (token != 0xFE)
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2bfe      	cmp	r3, #254	; 0xfe
 80018c0:	d001      	beq.n	80018c6 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 80018c2:	2300      	movs	r3, #0
 80018c4:	e016      	b.n	80018f4 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff51 	bl	8001774 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff4b 	bl	8001774 <rcvr_spi_m>
	} while (btr -= 2);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	3b02      	subs	r3, #2
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ed      	bne.n	80018c6 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80018ea:	f7ff ff25 	bl	8001738 <rcvr_spi>
	rcvr_spi();
 80018ee:	f7ff ff23 	bl	8001738 <rcvr_spi>

	return TRUE; /* Return with success */
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000002c 	.word	0x2000002c

08001900 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8001910:	f7ff ff3e 	bl	8001790 <wait_ready>
 8001914:	4603      	mov	r3, r0
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	d001      	beq.n	800191e <xmit_datablock+0x1e>
		return FALSE;
 800191a:	2300      	movs	r3, #0
 800191c:	e040      	b.n	80019a0 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff feef 	bl	8001704 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	2bfd      	cmp	r3, #253	; 0xfd
 800192a:	d031      	beq.n	8001990 <xmit_datablock+0x90>
		wc = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fee3 	bl	8001704 <xmit_spi>
			xmit_spi(*buff++);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fedc 	bl	8001704 <xmit_spi>
		} while (--wc);
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	3b01      	subs	r3, #1
 8001950:	73bb      	strb	r3, [r7, #14]
 8001952:	7bbb      	ldrb	r3, [r7, #14]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1eb      	bne.n	8001930 <xmit_datablock+0x30>

		rcvr_spi();
 8001958:	f7ff feee 	bl	8001738 <rcvr_spi>
		rcvr_spi();
 800195c:	f7ff feec 	bl	8001738 <rcvr_spi>

		while (i <= 64) {
 8001960:	e00b      	b.n	800197a <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8001962:	f7ff fee9 	bl	8001738 <rcvr_spi>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	2b05      	cmp	r3, #5
 8001972:	d006      	beq.n	8001982 <xmit_datablock+0x82>
				break;
			i++;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	3301      	adds	r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b40      	cmp	r3, #64	; 0x40
 800197e:	d9f0      	bls.n	8001962 <xmit_datablock+0x62>
 8001980:	e000      	b.n	8001984 <xmit_datablock+0x84>
				break;
 8001982:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8001984:	bf00      	nop
 8001986:	f7ff fed7 	bl	8001738 <rcvr_spi>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0fa      	beq.n	8001986 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	2b05      	cmp	r3, #5
 8001998:	d101      	bne.n	800199e <xmit_datablock+0x9e>
		return TRUE;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <xmit_datablock+0xa0>
	else
		return FALSE;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 80019b4:	f7ff feec 	bl	8001790 <wait_ready>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2bff      	cmp	r3, #255	; 0xff
 80019bc:	d001      	beq.n	80019c2 <send_cmd+0x1a>
		return 0xFF;
 80019be:	23ff      	movs	r3, #255	; 0xff
 80019c0:	e040      	b.n	8001a44 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fe9d 	bl	8001704 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	0e1b      	lsrs	r3, r3, #24
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fe97 	bl	8001704 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	0c1b      	lsrs	r3, r3, #16
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fe91 	bl	8001704 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fe8b 	bl	8001704 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fe86 	bl	8001704 <xmit_spi>
	n = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b40      	cmp	r3, #64	; 0x40
 8001a00:	d101      	bne.n	8001a06 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8001a02:	2395      	movs	r3, #149	; 0x95
 8001a04:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2b48      	cmp	r3, #72	; 0x48
 8001a0a:	d101      	bne.n	8001a10 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8001a0c:	2387      	movs	r3, #135	; 0x87
 8001a0e:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fe76 	bl	8001704 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	2b4c      	cmp	r3, #76	; 0x4c
 8001a1c:	d101      	bne.n	8001a22 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8001a1e:	f7ff fe8b 	bl	8001738 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8001a22:	230a      	movs	r3, #10
 8001a24:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8001a26:	f7ff fe87 	bl	8001738 <rcvr_spi>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8001a2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da05      	bge.n	8001a42 <send_cmd+0x9a>
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f1      	bne.n	8001a26 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0d5      	b.n	8001c0c <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8001a60:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <disk_initialize+0x1c8>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8001a6e:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <disk_initialize+0x1c8>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	e0ca      	b.n	8001c0c <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8001a76:	f7ff fea7 	bl	80017c8 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8001a7a:	f7ff fe34 	bl	80016e6 <SELECT>
	ty = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8001a82:	2100      	movs	r1, #0
 8001a84:	2040      	movs	r0, #64	; 0x40
 8001a86:	f7ff ff8f 	bl	80019a8 <send_cmd>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	f040 80a5 	bne.w	8001bdc <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8001a92:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <disk_initialize+0x1cc>)
 8001a94:	2264      	movs	r2, #100	; 0x64
 8001a96:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001a98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a9c:	2048      	movs	r0, #72	; 0x48
 8001a9e:	f7ff ff83 	bl	80019a8 <send_cmd>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d158      	bne.n	8001b5a <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e00c      	b.n	8001ac8 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8001aae:	7bfc      	ldrb	r4, [r7, #15]
 8001ab0:	f7ff fe42 	bl	8001738 <rcvr_spi>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4423      	add	r3, r4
 8001abe:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d9ef      	bls.n	8001aae <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8001ace:	7abb      	ldrb	r3, [r7, #10]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	f040 8083 	bne.w	8001bdc <disk_initialize+0x190>
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	2baa      	cmp	r3, #170	; 0xaa
 8001ada:	d17f      	bne.n	8001bdc <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8001adc:	2100      	movs	r1, #0
 8001ade:	2077      	movs	r0, #119	; 0x77
 8001ae0:	f7ff ff62 	bl	80019a8 <send_cmd>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d807      	bhi.n	8001afa <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8001aea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001aee:	2069      	movs	r0, #105	; 0x69
 8001af0:	f7ff ff5a 	bl	80019a8 <send_cmd>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001afa:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <disk_initialize+0x1cc>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1eb      	bne.n	8001adc <disk_initialize+0x90>
 8001b04:	e000      	b.n	8001b08 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8001b06:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8001b08:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <disk_initialize+0x1cc>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d064      	beq.n	8001bdc <disk_initialize+0x190>
 8001b12:	2100      	movs	r1, #0
 8001b14:	207a      	movs	r0, #122	; 0x7a
 8001b16:	f7ff ff47 	bl	80019a8 <send_cmd>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d15d      	bne.n	8001bdc <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e00c      	b.n	8001b40 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8001b26:	7bfc      	ldrb	r4, [r7, #15]
 8001b28:	f7ff fe06 	bl	8001738 <rcvr_spi>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4423      	add	r3, r4
 8001b36:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d9ef      	bls.n	8001b26 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8001b46:	7a3b      	ldrb	r3, [r7, #8]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <disk_initialize+0x108>
 8001b50:	2306      	movs	r3, #6
 8001b52:	e000      	b.n	8001b56 <disk_initialize+0x10a>
 8001b54:	2302      	movs	r3, #2
 8001b56:	73bb      	strb	r3, [r7, #14]
 8001b58:	e040      	b.n	8001bdc <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2077      	movs	r0, #119	; 0x77
 8001b5e:	f7ff ff23 	bl	80019a8 <send_cmd>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d808      	bhi.n	8001b7a <disk_initialize+0x12e>
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2069      	movs	r0, #105	; 0x69
 8001b6c:	f7ff ff1c 	bl	80019a8 <send_cmd>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d801      	bhi.n	8001b7a <disk_initialize+0x12e>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e000      	b.n	8001b7c <disk_initialize+0x130>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8001b7e:	7bbb      	ldrb	r3, [r7, #14]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d10e      	bne.n	8001ba2 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8001b84:	2100      	movs	r1, #0
 8001b86:	2077      	movs	r0, #119	; 0x77
 8001b88:	f7ff ff0e 	bl	80019a8 <send_cmd>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d80e      	bhi.n	8001bb0 <disk_initialize+0x164>
 8001b92:	2100      	movs	r1, #0
 8001b94:	2069      	movs	r0, #105	; 0x69
 8001b96:	f7ff ff07 	bl	80019a8 <send_cmd>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <disk_initialize+0x164>
						break; /* ACMD41 */
 8001ba0:	e00d      	b.n	8001bbe <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2041      	movs	r0, #65	; 0x41
 8001ba6:	f7ff feff 	bl	80019a8 <send_cmd>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <disk_initialize+0x1cc>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1e1      	bne.n	8001b7e <disk_initialize+0x132>
 8001bba:	e000      	b.n	8001bbe <disk_initialize+0x172>
						break; /* CMD1 */
 8001bbc:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <disk_initialize+0x1cc>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <disk_initialize+0x18c>
 8001bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bcc:	2050      	movs	r0, #80	; 0x50
 8001bce:	f7ff feeb 	bl	80019a8 <send_cmd>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <disk_initialize+0x190>
				ty = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <disk_initialize+0x1d0>)
 8001bde:	7bbb      	ldrb	r3, [r7, #14]
 8001be0:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8001be2:	f7ff fd87 	bl	80016f4 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001be6:	f7ff fda7 	bl	8001738 <rcvr_spi>

	if (ty) /* Initialization succeded */
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <disk_initialize+0x1c8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <disk_initialize+0x1c8>)
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	e001      	b.n	8001c06 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8001c02:	f7ff fe2f 	bl	8001864 <power_off>

	return Stat;
 8001c06:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <disk_initialize+0x1c8>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	20000000 	.word	0x20000000
 8001c18:	2000002c 	.word	0x2000002c
 8001c1c:	2000002e 	.word	0x2000002e

08001c20 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001c30:	2301      	movs	r3, #1
 8001c32:	e002      	b.n	8001c3a <disk_status+0x1a>
	return Stat;
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <disk_status+0x28>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000

08001c4c <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <disk_read+0x1c>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <disk_read+0x20>
		return RES_PARERR;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e051      	b.n	8001d10 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <disk_read+0xcc>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <disk_read+0x32>
		return RES_NOTRDY;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e048      	b.n	8001d10 <disk_read+0xc4>

	if (!(CardType & 4))
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <disk_read+0xd0>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	025b      	lsls	r3, r3, #9
 8001c8e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001c90:	f7ff fd29 	bl	80016e6 <SELECT>

	if (count == 1) { /* Single block read */
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d111      	bne.n	8001cbe <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	2051      	movs	r0, #81	; 0x51
 8001c9e:	f7ff fe83 	bl	80019a8 <send_cmd>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d129      	bne.n	8001cfc <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cac:	68b8      	ldr	r0, [r7, #8]
 8001cae:	f7ff fdf1 	bl	8001894 <rcvr_datablock>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d021      	beq.n	8001cfc <disk_read+0xb0>
			count = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	e01e      	b.n	8001cfc <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	2052      	movs	r0, #82	; 0x52
 8001cc2:	f7ff fe71 	bl	80019a8 <send_cmd>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d117      	bne.n	8001cfc <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd0:	68b8      	ldr	r0, [r7, #8]
 8001cd2:	f7ff fddf 	bl	8001894 <rcvr_datablock>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00a      	beq.n	8001cf2 <disk_read+0xa6>
					break;
				buff += 512;
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ce2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ed      	bne.n	8001ccc <disk_read+0x80>
 8001cf0:	e000      	b.n	8001cf4 <disk_read+0xa8>
					break;
 8001cf2:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	204c      	movs	r0, #76	; 0x4c
 8001cf8:	f7ff fe56 	bl	80019a8 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8001cfc:	f7ff fcfa 	bl	80016f4 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001d00:	f7ff fd1a 	bl	8001738 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	2000002e 	.word	0x2000002e

08001d20 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <disk_write+0x1c>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <disk_write+0x20>
		return RES_PARERR;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e06b      	b.n	8001e18 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8001d40:	4b37      	ldr	r3, [pc, #220]	; (8001e20 <disk_write+0x100>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <disk_write+0x32>
		return RES_NOTRDY;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e062      	b.n	8001e18 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8001d52:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <disk_write+0x100>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <disk_write+0x44>
		return RES_WRPRT;
 8001d60:	2302      	movs	r3, #2
 8001d62:	e059      	b.n	8001e18 <disk_write+0xf8>

	if (!(CardType & 4))
 8001d64:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <disk_write+0x104>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	025b      	lsls	r3, r3, #9
 8001d74:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001d76:	f7ff fcb6 	bl	80016e6 <SELECT>

	if (count == 1) { /* Single block write */
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d110      	bne.n	8001da2 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	2058      	movs	r0, #88	; 0x58
 8001d84:	f7ff fe10 	bl	80019a8 <send_cmd>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d13a      	bne.n	8001e04 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8001d8e:	21fe      	movs	r1, #254	; 0xfe
 8001d90:	68b8      	ldr	r0, [r7, #8]
 8001d92:	f7ff fdb5 	bl	8001900 <xmit_datablock>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d033      	beq.n	8001e04 <disk_write+0xe4>
			count = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	e030      	b.n	8001e04 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <disk_write+0x104>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8001dae:	2100      	movs	r1, #0
 8001db0:	2077      	movs	r0, #119	; 0x77
 8001db2:	f7ff fdf9 	bl	80019a8 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	2057      	movs	r0, #87	; 0x57
 8001dba:	f7ff fdf5 	bl	80019a8 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	2059      	movs	r0, #89	; 0x59
 8001dc2:	f7ff fdf1 	bl	80019a8 <send_cmd>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d11b      	bne.n	8001e04 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001dcc:	21fc      	movs	r1, #252	; 0xfc
 8001dce:	68b8      	ldr	r0, [r7, #8]
 8001dd0:	f7ff fd96 	bl	8001900 <xmit_datablock>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <disk_write+0xd0>
					break;
				buff += 512;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001de0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ee      	bne.n	8001dcc <disk_write+0xac>
 8001dee:	e000      	b.n	8001df2 <disk_write+0xd2>
					break;
 8001df0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8001df2:	21fd      	movs	r1, #253	; 0xfd
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff fd83 	bl	8001900 <xmit_datablock>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <disk_write+0xe4>
				count = 1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8001e04:	f7ff fc76 	bl	80016f4 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001e08:	f7ff fc96 	bl	8001738 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf14      	ite	ne
 8001e12:	2301      	movne	r3, #1
 8001e14:	2300      	moveq	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000000 	.word	0x20000000
 8001e24:	2000002e 	.word	0x2000002e

08001e28 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b08b      	sub	sp, #44	; 0x2c
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	603a      	str	r2, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
 8001e34:	460b      	mov	r3, r1
 8001e36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <disk_ioctl+0x1e>
		return RES_PARERR;
 8001e42:	2304      	movs	r3, #4
 8001e44:	e16a      	b.n	800211c <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8001e4c:	79bb      	ldrb	r3, [r7, #6]
 8001e4e:	2b07      	cmp	r3, #7
 8001e50:	d127      	bne.n	8001ea2 <disk_ioctl+0x7a>
		switch (*ptr) {
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d00e      	beq.n	8001e78 <disk_ioctl+0x50>
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d012      	beq.n	8001e84 <disk_ioctl+0x5c>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d11b      	bne.n	8001e9a <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8001e62:	f7ff fd0b 	bl	800187c <chk_power>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8001e6c:	f7ff fcfa 	bl	8001864 <power_off>
			res = RES_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e76:	e14f      	b.n	8002118 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8001e78:	f7ff fca6 	bl	80017c8 <power_on>
			res = RES_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e82:	e149      	b.n	8002118 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8001e84:	f7ff fcfa 	bl	800187c <chk_power>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e98:	e13e      	b.n	8002118 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ea0:	e13a      	b.n	8002118 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8001ea2:	4ba0      	ldr	r3, [pc, #640]	; (8002124 <disk_ioctl+0x2fc>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e133      	b.n	800211c <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8001eb4:	f7ff fc17 	bl	80016e6 <SELECT>

		switch (ctrl) {
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	2b35      	cmp	r3, #53	; 0x35
 8001ebc:	f200 811d 	bhi.w	80020fa <disk_ioctl+0x2d2>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <disk_ioctl+0xa0>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08002063 	.word	0x08002063
 8001ecc:	08001fa1 	.word	0x08001fa1
 8001ed0:	08002053 	.word	0x08002053
 8001ed4:	080020fb 	.word	0x080020fb
 8001ed8:	080020fb 	.word	0x080020fb
 8001edc:	080020fb 	.word	0x080020fb
 8001ee0:	080020fb 	.word	0x080020fb
 8001ee4:	080020fb 	.word	0x080020fb
 8001ee8:	080020fb 	.word	0x080020fb
 8001eec:	080020fb 	.word	0x080020fb
 8001ef0:	080020fb 	.word	0x080020fb
 8001ef4:	080020fb 	.word	0x080020fb
 8001ef8:	080020fb 	.word	0x080020fb
 8001efc:	080020fb 	.word	0x080020fb
 8001f00:	080020fb 	.word	0x080020fb
 8001f04:	080020fb 	.word	0x080020fb
 8001f08:	080020fb 	.word	0x080020fb
 8001f0c:	080020fb 	.word	0x080020fb
 8001f10:	080020fb 	.word	0x080020fb
 8001f14:	080020fb 	.word	0x080020fb
 8001f18:	080020fb 	.word	0x080020fb
 8001f1c:	080020fb 	.word	0x080020fb
 8001f20:	080020fb 	.word	0x080020fb
 8001f24:	080020fb 	.word	0x080020fb
 8001f28:	080020fb 	.word	0x080020fb
 8001f2c:	080020fb 	.word	0x080020fb
 8001f30:	080020fb 	.word	0x080020fb
 8001f34:	080020fb 	.word	0x080020fb
 8001f38:	080020fb 	.word	0x080020fb
 8001f3c:	080020fb 	.word	0x080020fb
 8001f40:	080020fb 	.word	0x080020fb
 8001f44:	080020fb 	.word	0x080020fb
 8001f48:	080020fb 	.word	0x080020fb
 8001f4c:	080020fb 	.word	0x080020fb
 8001f50:	080020fb 	.word	0x080020fb
 8001f54:	080020fb 	.word	0x080020fb
 8001f58:	080020fb 	.word	0x080020fb
 8001f5c:	080020fb 	.word	0x080020fb
 8001f60:	080020fb 	.word	0x080020fb
 8001f64:	080020fb 	.word	0x080020fb
 8001f68:	080020fb 	.word	0x080020fb
 8001f6c:	080020fb 	.word	0x080020fb
 8001f70:	080020fb 	.word	0x080020fb
 8001f74:	080020fb 	.word	0x080020fb
 8001f78:	080020fb 	.word	0x080020fb
 8001f7c:	080020fb 	.word	0x080020fb
 8001f80:	080020fb 	.word	0x080020fb
 8001f84:	080020fb 	.word	0x080020fb
 8001f88:	080020fb 	.word	0x080020fb
 8001f8c:	080020fb 	.word	0x080020fb
 8001f90:	080020fb 	.word	0x080020fb
 8001f94:	08002075 	.word	0x08002075
 8001f98:	08002099 	.word	0x08002099
 8001f9c:	080020bd 	.word	0x080020bd
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2049      	movs	r0, #73	; 0x49
 8001fa4:	f7ff fd00 	bl	80019a8 <send_cmd>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 80a9 	bne.w	8002102 <disk_ioctl+0x2da>
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fc6c 	bl	8001894 <rcvr_datablock>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 809f 	beq.w	8002102 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8001fc4:	7b3b      	ldrb	r3, [r7, #12]
 8001fc6:	099b      	lsrs	r3, r3, #6
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10e      	bne.n	8001fec <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001fce:	7d7b      	ldrb	r3, [r7, #21]
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	7d3b      	ldrb	r3, [r7, #20]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001fe2:	8bfb      	ldrh	r3, [r7, #30]
 8001fe4:	029a      	lsls	r2, r3, #10
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e02e      	b.n	800204a <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001fec:	7c7b      	ldrb	r3, [r7, #17]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	7dbb      	ldrb	r3, [r7, #22]
 8001ff6:	09db      	lsrs	r3, r3, #7
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8001ffe:	7d7b      	ldrb	r3, [r7, #21]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f003 0306 	and.w	r3, r3, #6
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4413      	add	r3, r2
 800200c:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 800200e:	3302      	adds	r3, #2
 8002010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8002014:	7d3b      	ldrb	r3, [r7, #20]
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	b2db      	uxtb	r3, r3
 800201a:	b29a      	uxth	r2, r3
 800201c:	7cfb      	ldrb	r3, [r7, #19]
 800201e:	b29b      	uxth	r3, r3
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	b29b      	uxth	r3, r3
 8002024:	4413      	add	r3, r2
 8002026:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8002028:	7cbb      	ldrb	r3, [r7, #18]
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	b29b      	uxth	r3, r3
 800202e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002032:	b29b      	uxth	r3, r3
 8002034:	4413      	add	r3, r2
 8002036:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8002038:	3301      	adds	r3, #1
 800203a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800203c:	8bfa      	ldrh	r2, [r7, #30]
 800203e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002042:	3b09      	subs	r3, #9
 8002044:	409a      	lsls	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002050:	e057      	b.n	8002102 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002058:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002060:	e056      	b.n	8002110 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8002062:	f7ff fb95 	bl	8001790 <wait_ready>
 8002066:	4603      	mov	r3, r0
 8002068:	2bff      	cmp	r3, #255	; 0xff
 800206a:	d14c      	bne.n	8002106 <disk_ioctl+0x2de>
				res = RES_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002072:	e048      	b.n	8002106 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8002074:	2100      	movs	r1, #0
 8002076:	2049      	movs	r0, #73	; 0x49
 8002078:	f7ff fc96 	bl	80019a8 <send_cmd>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d143      	bne.n	800210a <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8002082:	2110      	movs	r1, #16
 8002084:	6a38      	ldr	r0, [r7, #32]
 8002086:	f7ff fc05 	bl	8001894 <rcvr_datablock>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d03c      	beq.n	800210a <disk_ioctl+0x2e2>
				res = RES_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002096:	e038      	b.n	800210a <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8002098:	2100      	movs	r1, #0
 800209a:	204a      	movs	r0, #74	; 0x4a
 800209c:	f7ff fc84 	bl	80019a8 <send_cmd>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d133      	bne.n	800210e <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 80020a6:	2110      	movs	r1, #16
 80020a8:	6a38      	ldr	r0, [r7, #32]
 80020aa:	f7ff fbf3 	bl	8001894 <rcvr_datablock>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d02c      	beq.n	800210e <disk_ioctl+0x2e6>
				res = RES_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020ba:	e028      	b.n	800210e <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 80020bc:	2100      	movs	r1, #0
 80020be:	207a      	movs	r0, #122	; 0x7a
 80020c0:	f7ff fc72 	bl	80019a8 <send_cmd>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d117      	bne.n	80020fa <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020d0:	e00b      	b.n	80020ea <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 80020d2:	6a3c      	ldr	r4, [r7, #32]
 80020d4:	1c63      	adds	r3, r4, #1
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	f7ff fb2e 	bl	8001738 <rcvr_spi>
 80020dc:	4603      	mov	r3, r0
 80020de:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80020e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020e4:	3301      	adds	r3, #1
 80020e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d9ef      	bls.n	80020d2 <disk_ioctl+0x2aa>
				res = RES_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80020f8:	e00a      	b.n	8002110 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 80020fa:	2304      	movs	r3, #4
 80020fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002100:	e006      	b.n	8002110 <disk_ioctl+0x2e8>
			break;
 8002102:	bf00      	nop
 8002104:	e004      	b.n	8002110 <disk_ioctl+0x2e8>
			break;
 8002106:	bf00      	nop
 8002108:	e002      	b.n	8002110 <disk_ioctl+0x2e8>
			break;
 800210a:	bf00      	nop
 800210c:	e000      	b.n	8002110 <disk_ioctl+0x2e8>
			break;
 800210e:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8002110:	f7ff faf0 	bl	80016f4 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8002114:	f7ff fb10 	bl	8001738 <rcvr_spi>
	}

	return res;
 8002118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800211c:	4618      	mov	r0, r3
 800211e:	372c      	adds	r7, #44	; 0x2c
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	20000000 	.word	0x20000000

08002128 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 800212e:	4b0f      	ldr	r3, [pc, #60]	; (800216c <disk_timerproc+0x44>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
	if (n)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <disk_timerproc+0x1e>
		Timer1 = --n;
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	3b01      	subs	r3, #1
 800213e:	71fb      	strb	r3, [r7, #7]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <disk_timerproc+0x44>)
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <disk_timerproc+0x48>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
	if (n)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <disk_timerproc+0x36>
		Timer2 = --n;
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	3b01      	subs	r3, #1
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	4a05      	ldr	r2, [pc, #20]	; (8002170 <disk_timerproc+0x48>)
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	7013      	strb	r3, [r2, #0]

}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2000002c 	.word	0x2000002c
 8002170:	2000002d 	.word	0x2000002d

08002174 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <sdcard_systick_timerproc+0x2c>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	3301      	adds	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <sdcard_systick_timerproc+0x2c>)
 8002184:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <sdcard_systick_timerproc+0x2c>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b09      	cmp	r3, #9
 800218e:	d904      	bls.n	800219a <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <sdcard_systick_timerproc+0x2c>)
 8002192:	2200      	movs	r2, #0
 8002194:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8002196:	f7ff ffc7 	bl	8002128 <disk_timerproc>
	}
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000238 	.word	0x20000238

080021a4 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	36c55cc0 	.word	0x36c55cc0

080021b8 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3301      	adds	r3, #1
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80021c8:	89fb      	ldrh	r3, [r7, #14]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b21b      	sxth	r3, r3
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80021da:	89fb      	ldrh	r3, [r7, #14]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3303      	adds	r3, #3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	3202      	adds	r2, #2
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	3201      	adds	r2, #1
 800220e:	7812      	ldrb	r2, [r2, #0]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
	return rv;
 8002220:	68fb      	ldr	r3, [r7, #12]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	701a      	strb	r2, [r3, #0]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	1c53      	adds	r3, r2, #1
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	1c59      	adds	r1, r3, #1
 80022e0:	6179      	str	r1, [r7, #20]
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f1      	bne.n	80022d6 <mem_cpy+0x1a>
	}
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 80022fe:	b480      	push	{r7}
 8002300:	b087      	sub	sp, #28
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	617a      	str	r2, [r7, #20]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3b01      	subs	r3, #1
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f3      	bne.n	800230e <mem_set+0x10>
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8002332:	b480      	push	{r7}
 8002334:	b089      	sub	sp, #36	; 0x24
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	61fa      	str	r2, [r7, #28]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	4619      	mov	r1, r3
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	61ba      	str	r2, [r7, #24]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	1acb      	subs	r3, r1, r3
 800235e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <mem_cmp+0x40>
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0eb      	beq.n	800234a <mem_cmp+0x18>

	return r;
 8002372:	697b      	ldr	r3, [r7, #20]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3724      	adds	r7, #36	; 0x24
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800238a:	e002      	b.n	8002392 <chk_chr+0x12>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3301      	adds	r3, #1
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <chk_chr+0x26>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d1f2      	bne.n	800238c <chk_chr+0xc>
	return *str;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	781b      	ldrb	r3, [r3, #0]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 80023c0:	2281      	movs	r2, #129	; 0x81
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d30f      	bcc.n	80023e8 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 80023c8:	229f      	movs	r2, #159	; 0x9f
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d801      	bhi.n	80023d4 <dbc_1st+0x1e>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e00a      	b.n	80023ea <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 80023d4:	22e0      	movs	r2, #224	; 0xe0
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	4293      	cmp	r3, r2
 80023da:	d305      	bcc.n	80023e8 <dbc_1st+0x32>
 80023dc:	22fc      	movs	r2, #252	; 0xfc
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d801      	bhi.n	80023e8 <dbc_1st+0x32>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8002400:	2240      	movs	r2, #64	; 0x40
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	4293      	cmp	r3, r2
 8002406:	d319      	bcc.n	800243c <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8002408:	227e      	movs	r2, #126	; 0x7e
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	4293      	cmp	r3, r2
 800240e:	d801      	bhi.n	8002414 <dbc_2nd+0x1e>
 8002410:	2301      	movs	r3, #1
 8002412:	e014      	b.n	800243e <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8002414:	2280      	movs	r2, #128	; 0x80
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4293      	cmp	r3, r2
 800241a:	d305      	bcc.n	8002428 <dbc_2nd+0x32>
 800241c:	22fc      	movs	r2, #252	; 0xfc
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	4293      	cmp	r3, r2
 8002422:	d801      	bhi.n	8002428 <dbc_2nd+0x32>
 8002424:	2301      	movs	r3, #1
 8002426:	e00a      	b.n	800243e <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8002428:	2200      	movs	r2, #0
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	4293      	cmp	r3, r2
 800242e:	d305      	bcc.n	800243c <dbc_2nd+0x46>
 8002430:	2200      	movs	r2, #0
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	4293      	cmp	r3, r2
 8002436:	d801      	bhi.n	800243c <dbc_2nd+0x46>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <tchar2uni>:

/* Get a character from TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	617a      	str	r2, [r7, #20]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 8002462:	8a7b      	ldrh	r3, [r7, #18]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ffa5 	bl	80023b6 <dbc_1st>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d015      	beq.n	800249e <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	617a      	str	r2, [r7, #20]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 800247c:	7c7b      	ldrb	r3, [r7, #17]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ffb9 	bl	80023f6 <dbc_2nd>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <tchar2uni+0x46>
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	e01d      	b.n	80024cc <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 8002490:	8a7b      	ldrh	r3, [r7, #18]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	b29a      	uxth	r2, r3
 8002496:	7c7b      	ldrb	r3, [r7, #17]
 8002498:	b29b      	uxth	r3, r3
 800249a:	4413      	add	r3, r2
 800249c:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 800249e:	8a7b      	ldrh	r3, [r7, #18]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00d      	beq.n	80024c0 <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 80024a4:	8a7b      	ldrh	r3, [r7, #18]
 80024a6:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fcec 	bl	8004e88 <ff_oem2uni>
 80024b0:	4603      	mov	r3, r0
 80024b2:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 80024b4:	8a7b      	ldrh	r3, [r7, #18]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <tchar2uni+0x76>
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	e005      	b.n	80024cc <tchar2uni+0x82>
	}
	uc = wc;
 80024c0:	8a7b      	ldrh	r3, [r7, #18]
 80024c2:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	601a      	str	r2, [r3, #0]
	return uc;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	78db      	ldrb	r3, [r3, #3]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02c      	beq.n	8002542 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7858      	ldrb	r0, [r3, #1]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f6:	2301      	movs	r3, #1
 80024f8:	f7ff fc12 	bl	8001d20 <disk_write>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d11d      	bne.n	800253e <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	1ad2      	subs	r2, r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	429a      	cmp	r2, r3
 8002518:	d213      	bcs.n	8002542 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	789b      	ldrb	r3, [r3, #2]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d10f      	bne.n	8002542 <sync_window+0x6e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7858      	ldrb	r0, [r3, #1]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	441a      	add	r2, r3
 8002536:	2301      	movs	r3, #1
 8002538:	f7ff fbf2 	bl	8001d20 <disk_write>
 800253c:	e001      	b.n	8002542 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d01b      	beq.n	800259c <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ffb5 	bl	80024d4 <sync_window>
 800256a:	4603      	mov	r3, r0
 800256c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d113      	bne.n	800259c <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7858      	ldrb	r0, [r3, #1]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800257e:	2301      	movs	r3, #1
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	f7ff fb63 	bl	8001c4c <disk_read>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
 8002590:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff8f 	bl	80024d4 <sync_window>
 80025b6:	4603      	mov	r3, r0
 80025b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d158      	bne.n	8002672 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d148      	bne.n	800265a <sync_fs+0xb2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	791b      	ldrb	r3, [r3, #4]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d144      	bne.n	800265a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3334      	adds	r3, #52	; 0x34
 80025d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fe8f 	bl	80022fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3334      	adds	r3, #52	; 0x34
 80025e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80025e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fe1e 	bl	800222e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3334      	adds	r3, #52	; 0x34
 80025f6:	4921      	ldr	r1, [pc, #132]	; (800267c <sync_fs+0xd4>)
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fe33 	bl	8002264 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3334      	adds	r3, #52	; 0x34
 8002602:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002606:	491e      	ldr	r1, [pc, #120]	; (8002680 <sync_fs+0xd8>)
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fe2b 	bl	8002264 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3334      	adds	r3, #52	; 0x34
 8002612:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f7ff fe21 	bl	8002264 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3334      	adds	r3, #52	; 0x34
 8002626:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	4619      	mov	r1, r3
 8002630:	4610      	mov	r0, r2
 8002632:	f7ff fe17 	bl	8002264 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7858      	ldrb	r0, [r3, #1]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264e:	2301      	movs	r3, #1
 8002650:	f7ff fb66 	bl	8001d20 <disk_write>
			fs->fsi_flag = 0;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	785b      	ldrb	r3, [r3, #1]
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fbe0 	bl	8001e28 <disk_ioctl>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <sync_fs+0xca>
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	41615252 	.word	0x41615252
 8002680:	61417272 	.word	0x61417272

08002684 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	3b02      	subs	r3, #2
 8002692:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	3b02      	subs	r3, #2
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d301      	bcc.n	80026a4 <clst2sect+0x20>
 80026a0:	2300      	movs	r3, #0
 80026a2:	e008      	b.n	80026b6 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	895b      	ldrh	r3, [r3, #10]
 80026ac:	4619      	mov	r1, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	fb03 f301 	mul.w	r3, r3, r1
 80026b4:	4413      	add	r3, r2
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d904      	bls.n	80026e2 <get_fat+0x20>
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d302      	bcc.n	80026e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80026e2:	2301      	movs	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e08c      	b.n	8002802 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d045      	beq.n	8002782 <get_fat+0xc0>
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d05d      	beq.n	80027b6 <get_fat+0xf4>
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d177      	bne.n	80027ee <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4413      	add	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	0a5b      	lsrs	r3, r3, #9
 8002714:	4413      	add	r3, r2
 8002716:	4619      	mov	r1, r3
 8002718:	6938      	ldr	r0, [r7, #16]
 800271a:	f7ff ff17 	bl	800254c <move_window>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d167      	bne.n	80027f4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	60fa      	str	r2, [r7, #12]
 800272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002736:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	0a5b      	lsrs	r3, r3, #9
 8002740:	4413      	add	r3, r2
 8002742:	4619      	mov	r1, r3
 8002744:	6938      	ldr	r0, [r7, #16]
 8002746:	f7ff ff01 	bl	800254c <move_window>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d153      	bne.n	80027f8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	461a      	mov	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	4313      	orrs	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <get_fat+0xb6>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	e002      	b.n	800277e <get_fat+0xbc>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277e:	617b      	str	r3, [r7, #20]
			break;
 8002780:	e03f      	b.n	8002802 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	4413      	add	r3, r2
 800278c:	4619      	mov	r1, r3
 800278e:	6938      	ldr	r0, [r7, #16]
 8002790:	f7ff fedc 	bl	800254c <move_window>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d130      	bne.n	80027fc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80027a8:	4413      	add	r3, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fd04 	bl	80021b8 <ld_word>
 80027b0:	4603      	mov	r3, r0
 80027b2:	617b      	str	r3, [r7, #20]
			break;
 80027b4:	e025      	b.n	8002802 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	09db      	lsrs	r3, r3, #7
 80027be:	4413      	add	r3, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	6938      	ldr	r0, [r7, #16]
 80027c4:	f7ff fec2 	bl	800254c <move_window>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d118      	bne.n	8002800 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80027dc:	4413      	add	r3, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fd02 	bl	80021e8 <ld_dword>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027ea:	617b      	str	r3, [r7, #20]
			break;
 80027ec:	e009      	b.n	8002802 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80027ee:	2301      	movs	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e006      	b.n	8002802 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80027f4:	bf00      	nop
 80027f6:	e004      	b.n	8002802 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80027f8:	bf00      	nop
 80027fa:	e002      	b.n	8002802 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80027fc:	bf00      	nop
 80027fe:	e000      	b.n	8002802 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002800:	bf00      	nop
		}
	}

	return val;
 8002802:	697b      	ldr	r3, [r7, #20]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002818:	2302      	movs	r3, #2
 800281a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b01      	cmp	r3, #1
 8002820:	f240 80d6 	bls.w	80029d0 <put_fat+0x1c4>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	f080 80d0 	bcs.w	80029d0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d073      	beq.n	8002920 <put_fat+0x114>
 8002838:	2b03      	cmp	r3, #3
 800283a:	f000 8091 	beq.w	8002960 <put_fat+0x154>
 800283e:	2b01      	cmp	r3, #1
 8002840:	f040 80c6 	bne.w	80029d0 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4413      	add	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	0a5b      	lsrs	r3, r3, #9
 800285a:	4413      	add	r3, r2
 800285c:	4619      	mov	r1, r3
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fe74 	bl	800254c <move_window>
 8002864:	4603      	mov	r3, r0
 8002866:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002868:	7ffb      	ldrb	r3, [r7, #31]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f040 80a9 	bne.w	80029c2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	1c59      	adds	r1, r3, #1
 800287a:	61b9      	str	r1, [r7, #24]
 800287c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002880:	4413      	add	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <put_fat+0x9e>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b25b      	sxtb	r3, r3
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	b25a      	sxtb	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	4313      	orrs	r3, r2
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	e001      	b.n	80028ae <put_fat+0xa2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	0a5b      	lsrs	r3, r3, #9
 80028c0:	4413      	add	r3, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff fe41 	bl	800254c <move_window>
 80028ca:	4603      	mov	r3, r0
 80028cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d178      	bne.n	80029c6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e0:	4413      	add	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <put_fat+0xea>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e00e      	b.n	8002914 <put_fat+0x108>
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	f023 030f 	bic.w	r3, r3, #15
 8002900:	b25a      	sxtb	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	b25b      	sxtb	r3, r3
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	b25b      	sxtb	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	b25b      	sxtb	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	70da      	strb	r2, [r3, #3]
			break;
 800291e:	e057      	b.n	80029d0 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	4413      	add	r3, r2
 800292a:	4619      	mov	r1, r3
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f7ff fe0d 	bl	800254c <move_window>
 8002932:	4603      	mov	r3, r0
 8002934:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002936:	7ffb      	ldrb	r3, [r7, #31]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d146      	bne.n	80029ca <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800294a:	4413      	add	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	b292      	uxth	r2, r2
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fc6b 	bl	800222e <st_word>
			fs->wflag = 1;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	70da      	strb	r2, [r3, #3]
			break;
 800295e:	e037      	b.n	80029d0 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	09db      	lsrs	r3, r3, #7
 8002968:	4413      	add	r3, r2
 800296a:	4619      	mov	r1, r3
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff fded 	bl	800254c <move_window>
 8002972:	4603      	mov	r3, r0
 8002974:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002976:	7ffb      	ldrb	r3, [r7, #31]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d128      	bne.n	80029ce <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002990:	4413      	add	r3, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fc28 	bl	80021e8 <ld_dword>
 8002998:	4603      	mov	r3, r0
 800299a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800299e:	4323      	orrs	r3, r4
 80029a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80029b0:	4413      	add	r3, r2
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fc55 	bl	8002264 <st_dword>
			fs->wflag = 1;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	70da      	strb	r2, [r3, #3]
			break;
 80029c0:	e006      	b.n	80029d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80029c2:	bf00      	nop
 80029c4:	e004      	b.n	80029d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80029ce:	bf00      	nop
		}
	}
	return res;
 80029d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3724      	adds	r7, #36	; 0x24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}

080029da <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b088      	sub	sp, #32
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d904      	bls.n	8002a00 <remove_chain+0x26>
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d301      	bcc.n	8002a04 <remove_chain+0x2a>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e04b      	b.n	8002a9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00c      	beq.n	8002a24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	69b8      	ldr	r0, [r7, #24]
 8002a12:	f7ff fefb 	bl	800280c <put_fat>
 8002a16:	4603      	mov	r3, r0
 8002a18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <remove_chain+0x4a>
 8002a20:	7ffb      	ldrb	r3, [r7, #31]
 8002a22:	e03b      	b.n	8002a9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff fe4b 	bl	80026c2 <get_fat>
 8002a2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d031      	beq.n	8002a98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <remove_chain+0x64>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e02e      	b.n	8002a9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d101      	bne.n	8002a4a <remove_chain+0x70>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e028      	b.n	8002a9c <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	69b8      	ldr	r0, [r7, #24]
 8002a50:	f7ff fedc 	bl	800280c <put_fat>
 8002a54:	4603      	mov	r3, r0
 8002a56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002a58:	7ffb      	ldrb	r3, [r7, #31]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <remove_chain+0x88>
 8002a5e:	7ffb      	ldrb	r3, [r7, #31]
 8002a60:	e01c      	b.n	8002a9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	3b02      	subs	r3, #2
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d20b      	bcs.n	8002a88 <remove_chain+0xae>
			fs->free_clst++;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	791b      	ldrb	r3, [r3, #4]
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d3c6      	bcc.n	8002a24 <remove_chain+0x4a>
 8002a96:	e000      	b.n	8002a9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002a98:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <create_chain+0x2c>
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d31b      	bcc.n	8002b08 <create_chain+0x64>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	e018      	b.n	8002b08 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002ad6:	6839      	ldr	r1, [r7, #0]
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fdf2 	bl	80026c2 <get_fat>
 8002ade:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d801      	bhi.n	8002aea <create_chain+0x46>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0a9      	b.n	8002c3e <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d101      	bne.n	8002af6 <create_chain+0x52>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	e0a3      	b.n	8002c3e <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d201      	bcs.n	8002b04 <create_chain+0x60>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	e09c      	b.n	8002c3e <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <create_chain+0x70>
 8002b10:	2300      	movs	r3, #0
 8002b12:	e094      	b.n	8002c3e <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d129      	bne.n	8002b74 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	3301      	adds	r3, #1
 8002b24:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d301      	bcc.n	8002b34 <create_chain+0x90>
 8002b30:	2302      	movs	r3, #2
 8002b32:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002b34:	69f9      	ldr	r1, [r7, #28]
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fdc3 	bl	80026c2 <get_fat>
 8002b3c:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d003      	beq.n	8002b4c <create_chain+0xa8>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4a:	d101      	bne.n	8002b50 <create_chain+0xac>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	e076      	b.n	8002c3e <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00e      	beq.n	8002b74 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d906      	bls.n	8002b70 <create_chain+0xcc>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d201      	bcs.n	8002b70 <create_chain+0xcc>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d129      	bne.n	8002bce <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3301      	adds	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d307      	bcc.n	8002b9e <create_chain+0xfa>
					ncl = 2;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d901      	bls.n	8002b9e <create_chain+0xfa>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e04f      	b.n	8002c3e <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002b9e:	69f9      	ldr	r1, [r7, #28]
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fd8e 	bl	80026c2 <get_fat>
 8002ba6:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00e      	beq.n	8002bcc <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d003      	beq.n	8002bbc <create_chain+0x118>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bba:	d101      	bne.n	8002bc0 <create_chain+0x11c>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	e03e      	b.n	8002c3e <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1da      	bne.n	8002b7e <create_chain+0xda>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e038      	b.n	8002c3e <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8002bcc:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8002bce:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd2:	69f9      	ldr	r1, [r7, #28]
 8002bd4:	6938      	ldr	r0, [r7, #16]
 8002bd6:	f7ff fe19 	bl	800280c <put_fat>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <create_chain+0x154>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	6938      	ldr	r0, [r7, #16]
 8002bf0:	f7ff fe0c 	bl	800280c <put_fat>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d116      	bne.n	8002c2c <create_chain+0x188>
		fs->last_clst = ncl;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	3b02      	subs	r3, #2
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d804      	bhi.n	8002c1c <create_chain+0x178>
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	1e5a      	subs	r2, r3, #1
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	791b      	ldrb	r3, [r3, #4]
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	711a      	strb	r2, [r3, #4]
 8002c2a:	e007      	b.n	8002c3c <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d102      	bne.n	8002c38 <create_chain+0x194>
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	e000      	b.n	8002c3a <create_chain+0x196>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002c3c:	69fb      	ldr	r3, [r7, #28]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff fc3f 	bl	80024d4 <sync_window>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <dir_clear+0x1a>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e036      	b.n	8002cce <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002c60:	6839      	ldr	r1, [r7, #0]
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff fd0e 	bl	8002684 <clst2sect>
 8002c68:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3334      	adds	r3, #52	; 0x34
 8002c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fb3f 	bl	80022fe <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3334      	adds	r3, #52	; 0x34
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	2301      	movs	r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e003      	b.n	8002c98 <dir_clear+0x52>
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4413      	add	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	895b      	ldrh	r3, [r3, #10]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d20b      	bcs.n	8002cbc <dir_clear+0x76>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7858      	ldrb	r0, [r3, #1]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	441a      	add	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	f7ff f835 	bl	8001d20 <disk_write>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0e9      	beq.n	8002c90 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	895b      	ldrh	r3, [r3, #10]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cec:	d204      	bcs.n	8002cf8 <dir_sdi+0x22>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <dir_sdi+0x26>
		return FR_INT_ERR;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e063      	b.n	8002dc4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <dir_sdi+0x46>
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d902      	bls.n	8002d1c <dir_sdi+0x46>
		clst = fs->dirbase;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	8912      	ldrh	r2, [r2, #8]
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d301      	bcc.n	8002d32 <dir_sdi+0x5c>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e048      	b.n	8002dc4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	619a      	str	r2, [r3, #24]
 8002d3a:	e029      	b.n	8002d90 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	895b      	ldrh	r3, [r3, #10]
 8002d40:	025b      	lsls	r3, r3, #9
 8002d42:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002d44:	e019      	b.n	8002d7a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6979      	ldr	r1, [r7, #20]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fcb9 	bl	80026c2 <get_fat>
 8002d50:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d101      	bne.n	8002d5e <dir_sdi+0x88>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e032      	b.n	8002dc4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d904      	bls.n	8002d6e <dir_sdi+0x98>
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d301      	bcc.n	8002d72 <dir_sdi+0x9c>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e028      	b.n	8002dc4 <dir_sdi+0xee>
			ofs -= csz;
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d2e1      	bcs.n	8002d46 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 8002d82:	6979      	ldr	r1, [r7, #20]
 8002d84:	6938      	ldr	r0, [r7, #16]
 8002d86:	f7ff fc7d 	bl	8002684 <clst2sect>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <dir_sdi+0xcc>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e010      	b.n	8002dc4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	0a5b      	lsrs	r3, r3, #9
 8002daa:	441a      	add	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	3320      	adds	r3, #32
 8002de2:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dea:	d302      	bcc.n	8002df2 <dir_next+0x26>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <dir_next+0x32>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e078      	b.n	8002ef0 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d166      	bne.n	8002ed6 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	8912      	ldrh	r2, [r2, #8]
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d357      	bcc.n	8002ed6 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	e05f      	b.n	8002ef0 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	0a5b      	lsrs	r3, r3, #9
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	8952      	ldrh	r2, [r2, #10]
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d14a      	bne.n	8002ed6 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4619      	mov	r1, r3
 8002e48:	4610      	mov	r0, r2
 8002e4a:	f7ff fc3a 	bl	80026c2 <get_fat>
 8002e4e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d801      	bhi.n	8002e5a <dir_next+0x8e>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e04a      	b.n	8002ef0 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d101      	bne.n	8002e66 <dir_next+0x9a>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e044      	b.n	8002ef0 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d328      	bcc.n	8002ec2 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d104      	bne.n	8002e80 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	e037      	b.n	8002ef0 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	4619      	mov	r1, r3
 8002e88:	4610      	mov	r0, r2
 8002e8a:	f7ff fe0b 	bl	8002aa4 <create_chain>
 8002e8e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <dir_next+0xce>
 8002e96:	2307      	movs	r3, #7
 8002e98:	e02a      	b.n	8002ef0 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <dir_next+0xd8>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e025      	b.n	8002ef0 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	d101      	bne.n	8002eb0 <dir_next+0xe4>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e01f      	b.n	8002ef0 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8002eb0:	6979      	ldr	r1, [r7, #20]
 8002eb2:	6938      	ldr	r0, [r7, #16]
 8002eb4:	f7ff fec7 	bl	8002c46 <dir_clear>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <dir_next+0xf6>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e016      	b.n	8002ef0 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8002ec8:	6979      	ldr	r1, [r7, #20]
 8002eca:	6938      	ldr	r0, [r7, #16]
 8002ecc:	f7ff fbda 	bl	8002684 <clst2sect>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee8:	441a      	add	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8002f08:	2100      	movs	r1, #0
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff fee3 	bl	8002cd6 <dir_sdi>
 8002f10:	4603      	mov	r3, r0
 8002f12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d12b      	bne.n	8002f72 <dir_alloc+0x7a>
		n = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	4619      	mov	r1, r3
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff fb11 	bl	800254c <move_window>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11d      	bne.n	8002f70 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2be5      	cmp	r3, #229	; 0xe5
 8002f3c:	d004      	beq.n	8002f48 <dir_alloc+0x50>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d102      	bne.n	8002f5c <dir_alloc+0x64>
 8002f56:	e00c      	b.n	8002f72 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ff34 	bl	8002dcc <dir_next>
 8002f64:	4603      	mov	r3, r0
 8002f66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0d7      	beq.n	8002f1e <dir_alloc+0x26>
 8002f6e:	e000      	b.n	8002f72 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8002f70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d101      	bne.n	8002f7c <dir_alloc+0x84>
 8002f78:	2307      	movs	r3, #7
 8002f7a:	75fb      	strb	r3, [r7, #23]
	return res;
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	331a      	adds	r3, #26
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f90f 	bl	80021b8 <ld_word>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d109      	bne.n	8002fba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	3314      	adds	r3, #20
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f904 	bl	80021b8 <ld_word>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	331a      	adds	r3, #26
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f927 	bl	800222e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d109      	bne.n	8002ffc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f103 0214 	add.w	r2, r3, #20
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	f7ff f919 	bl	800222e <st_word>
	}
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	331a      	adds	r3, #26
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff f8d0 	bl	80021b8 <ld_word>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <cmp_lfn+0x1e>
 800301e:	2300      	movs	r3, #0
 8003020:	e058      	b.n	80030d4 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800302a:	1e5a      	subs	r2, r3, #1
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003038:	2301      	movs	r3, #1
 800303a:	81fb      	strh	r3, [r7, #14]
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	e032      	b.n	80030a8 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003042:	4a26      	ldr	r2, [pc, #152]	; (80030dc <cmp_lfn+0xd8>)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4413      	add	r3, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff f8b1 	bl	80021b8 <ld_word>
 8003056:	4603      	mov	r3, r0
 8003058:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800305a:	89fb      	ldrh	r3, [r7, #14]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d019      	beq.n	8003094 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2bfe      	cmp	r3, #254	; 0xfe
 8003064:	d811      	bhi.n	800308a <cmp_lfn+0x86>
 8003066:	89bb      	ldrh	r3, [r7, #12]
 8003068:	4618      	mov	r0, r3
 800306a:	f001 ff65 	bl	8004f38 <ff_wtoupper>
 800306e:	4604      	mov	r4, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	617a      	str	r2, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f001 ff5a 	bl	8004f38 <ff_wtoupper>
 8003084:	4603      	mov	r3, r0
 8003086:	429c      	cmp	r4, r3
 8003088:	d001      	beq.n	800308e <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 800308a:	2300      	movs	r3, #0
 800308c:	e022      	b.n	80030d4 <cmp_lfn+0xd0>
			}
			wc = uc;
 800308e:	89bb      	ldrh	r3, [r7, #12]
 8003090:	81fb      	strh	r3, [r7, #14]
 8003092:	e006      	b.n	80030a2 <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003094:	89bb      	ldrh	r3, [r7, #12]
 8003096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800309a:	4293      	cmp	r3, r2
 800309c:	d001      	beq.n	80030a2 <cmp_lfn+0x9e>
 800309e:	2300      	movs	r3, #0
 80030a0:	e018      	b.n	80030d4 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	3301      	adds	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d9c9      	bls.n	8003042 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <cmp_lfn+0xce>
 80030ba:	89fb      	ldrh	r3, [r7, #14]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <cmp_lfn+0xce>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <cmp_lfn+0xce>
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	371c      	adds	r7, #28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd90      	pop	{r4, r7, pc}
 80030dc:	08008c04 	.word	0x08008c04

080030e0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	460b      	mov	r3, r1
 80030f0:	71fb      	strb	r3, [r7, #7]
 80030f2:	4613      	mov	r3, r2
 80030f4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	330d      	adds	r3, #13
 80030fa:	79ba      	ldrb	r2, [r7, #6]
 80030fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	330b      	adds	r3, #11
 8003102:	220f      	movs	r2, #15
 8003104:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	330c      	adds	r3, #12
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	331a      	adds	r3, #26
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff f88a 	bl	800222e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	1e5a      	subs	r2, r3, #1
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	82fb      	strh	r3, [r7, #22]
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003132:	8afb      	ldrh	r3, [r7, #22]
 8003134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003138:	4293      	cmp	r3, r2
 800313a:	d007      	beq.n	800314c <put_lfn+0x6c>
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	61fa      	str	r2, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <put_lfn+0xcc>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	8afa      	ldrh	r2, [r7, #22]
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f865 	bl	800222e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003164:	8afb      	ldrh	r3, [r7, #22]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <put_lfn+0x90>
 800316a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800316e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	3301      	adds	r3, #1
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b0c      	cmp	r3, #12
 800317a:	d9da      	bls.n	8003132 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800317c:	8afb      	ldrh	r3, [r7, #22]
 800317e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003182:	4293      	cmp	r3, r2
 8003184:	d006      	beq.n	8003194 <put_lfn+0xb4>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <put_lfn+0xbc>
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800319a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	79fa      	ldrb	r2, [r7, #7]
 80031a0:	701a      	strb	r2, [r3, #0]
}
 80031a2:	bf00      	nop
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	08008c04 	.word	0x08008c04

080031b0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08c      	sub	sp, #48	; 0x30
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80031be:	220b      	movs	r2, #11
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff f87a 	bl	80022bc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d92b      	bls.n	8003226 <gen_numname+0x76>
		sr = seq;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 80031d2:	e022      	b.n	800321a <gen_numname+0x6a>
			wc = *lfn++;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1c9a      	adds	r2, r3, #2
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80031de:	2300      	movs	r3, #0
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e2:	e017      	b.n	8003214 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005a      	lsls	r2, r3, #1
 80031e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80031f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <gen_numname+0x5e>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8003208:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800320c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	3301      	adds	r3, #1
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d9e4      	bls.n	80031e4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1d8      	bne.n	80031d4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8003226:	2307      	movs	r3, #7
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3330      	adds	r3, #48	; 0x30
 8003236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800323a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800323e:	2b39      	cmp	r3, #57	; 0x39
 8003240:	d904      	bls.n	800324c <gen_numname+0x9c>
 8003242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003246:	3307      	adds	r3, #7
 8003248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	62ba      	str	r2, [r7, #40]	; 0x28
 8003252:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003256:	4413      	add	r3, r2
 8003258:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800325c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1de      	bne.n	800322a <gen_numname+0x7a>
	ns[i] = '~';
 800326c:	f107 0214 	add.w	r2, r7, #20
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	4413      	add	r3, r2
 8003274:	227e      	movs	r2, #126	; 0x7e
 8003276:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
 800327c:	e014      	b.n	80032a8 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	4413      	add	r3, r2
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f895 	bl	80023b6 <dbc_1st>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <gen_numname+0xf2>
			if (j == i - 1) break;
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	3b01      	subs	r3, #1
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	429a      	cmp	r2, r3
 800329a:	d010      	beq.n	80032be <gen_numname+0x10e>
			j++;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	3301      	adds	r3, #1
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	3301      	adds	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d207      	bcs.n	80032c0 <gen_numname+0x110>
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	4413      	add	r3, r2
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d1e0      	bne.n	800327e <gen_numname+0xce>
 80032bc:	e000      	b.n	80032c0 <gen_numname+0x110>
			if (j == i - 1) break;
 80032be:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	2b07      	cmp	r3, #7
 80032c4:	d808      	bhi.n	80032d8 <gen_numname+0x128>
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80032cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032d0:	4413      	add	r3, r2
 80032d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80032d6:	e000      	b.n	80032da <gen_numname+0x12a>
 80032d8:	2120      	movs	r1, #32
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	627a      	str	r2, [r7, #36]	; 0x24
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	460a      	mov	r2, r1
 80032e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	2b07      	cmp	r3, #7
 80032ec:	d9e8      	bls.n	80032c0 <gen_numname+0x110>
}
 80032ee:	bf00      	nop
 80032f0:	3730      	adds	r7, #48	; 0x30
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b085      	sub	sp, #20
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8003302:	230b      	movs	r3, #11
 8003304:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	0852      	lsrs	r2, r2, #1
 800330c:	01db      	lsls	r3, r3, #7
 800330e:	4313      	orrs	r3, r2
 8003310:	b2da      	uxtb	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	1c59      	adds	r1, r3, #1
 8003316:	6079      	str	r1, [r7, #4]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	3b01      	subs	r3, #1
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ed      	bne.n	8003306 <sum_sfn+0x10>
	return sum;
 800332a:	7bfb      	ldrb	r3, [r7, #15]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003346:	2100      	movs	r1, #0
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff fcc4 	bl	8002cd6 <dir_sdi>
 800334e:	4603      	mov	r3, r0
 8003350:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <dir_find+0x24>
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	e0a9      	b.n	80034b0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800335c:	23ff      	movs	r3, #255	; 0xff
 800335e:	753b      	strb	r3, [r7, #20]
 8003360:	7d3b      	ldrb	r3, [r7, #20]
 8003362:	757b      	strb	r3, [r7, #21]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f04f 32ff 	mov.w	r2, #4294967295
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	4619      	mov	r1, r3
 8003372:	6938      	ldr	r0, [r7, #16]
 8003374:	f7ff f8ea 	bl	800254c <move_window>
 8003378:	4603      	mov	r3, r0
 800337a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 8090 	bne.w	80034a4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800338c:	7dbb      	ldrb	r3, [r7, #22]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <dir_find+0x60>
 8003392:	2304      	movs	r3, #4
 8003394:	75fb      	strb	r3, [r7, #23]
 8003396:	e08a      	b.n	80034ae <dir_find+0x176>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	330b      	adds	r3, #11
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80033ac:	7dbb      	ldrb	r3, [r7, #22]
 80033ae:	2be5      	cmp	r3, #229	; 0xe5
 80033b0:	d007      	beq.n	80033c2 <dir_find+0x8a>
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <dir_find+0x98>
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	d006      	beq.n	80033d0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80033c2:	23ff      	movs	r3, #255	; 0xff
 80033c4:	757b      	strb	r3, [r7, #21]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f04f 32ff 	mov.w	r2, #4294967295
 80033cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80033ce:	e05e      	b.n	800348e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b0f      	cmp	r3, #15
 80033d4:	d136      	bne.n	8003444 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d154      	bne.n	800348e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80033e4:	7dbb      	ldrb	r3, [r7, #22]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	7b5b      	ldrb	r3, [r3, #13]
 80033f4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80033f6:	7dbb      	ldrb	r3, [r7, #22]
 80033f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033fc:	75bb      	strb	r3, [r7, #22]
 80033fe:	7dbb      	ldrb	r3, [r7, #22]
 8003400:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800340a:	7dba      	ldrb	r2, [r7, #22]
 800340c:	7d7b      	ldrb	r3, [r7, #21]
 800340e:	429a      	cmp	r2, r3
 8003410:	d115      	bne.n	800343e <dir_find+0x106>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	330d      	adds	r3, #13
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	7d3a      	ldrb	r2, [r7, #20]
 800341c:	429a      	cmp	r2, r3
 800341e:	d10e      	bne.n	800343e <dir_find+0x106>
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f7ff fdea 	bl	8003004 <cmp_lfn>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <dir_find+0x106>
 8003436:	7d7b      	ldrb	r3, [r7, #21]
 8003438:	3b01      	subs	r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	e000      	b.n	8003440 <dir_find+0x108>
 800343e:	23ff      	movs	r3, #255	; 0xff
 8003440:	757b      	strb	r3, [r7, #21]
 8003442:	e024      	b.n	800348e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003444:	7d7b      	ldrb	r3, [r7, #21]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <dir_find+0x126>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff51 	bl	80032f6 <sum_sfn>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	7d3b      	ldrb	r3, [r7, #20]
 800345a:	4293      	cmp	r3, r2
 800345c:	d024      	beq.n	80034a8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <dir_find+0x14a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69d8      	ldr	r0, [r3, #28]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3320      	adds	r3, #32
 8003474:	220b      	movs	r2, #11
 8003476:	4619      	mov	r1, r3
 8003478:	f7fe ff5b 	bl	8002332 <mem_cmp>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d014      	beq.n	80034ac <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003482:	23ff      	movs	r3, #255	; 0xff
 8003484:	757b      	strb	r3, [r7, #21]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f04f 32ff 	mov.w	r2, #4294967295
 800348c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800348e:	2100      	movs	r1, #0
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff fc9b 	bl	8002dcc <dir_next>
 8003496:	4603      	mov	r3, r0
 8003498:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f43f af65 	beq.w	800336c <dir_find+0x34>
 80034a2:	e004      	b.n	80034ae <dir_find+0x176>
		if (res != FR_OK) break;
 80034a4:	bf00      	nop
 80034a6:	e002      	b.n	80034ae <dir_find+0x176>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80034ac:	bf00      	nop

	return res;
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61fb      	str	r3, [r7, #28]
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80034cc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <dir_register+0x20>
 80034d4:	2306      	movs	r3, #6
 80034d6:	e0e0      	b.n	800369a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
 80034dc:	e002      	b.n	80034e4 <dir_register+0x2c>
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	3301      	adds	r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f4      	bne.n	80034de <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f103 0120 	add.w	r1, r3, #32
 80034fa:	f107 030c 	add.w	r3, r7, #12
 80034fe:	220c      	movs	r2, #12
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe fedb 	bl	80022bc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d032      	beq.n	8003576 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2240      	movs	r2, #64	; 0x40
 8003514:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 8003518:	2301      	movs	r3, #1
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
 800351c:	e016      	b.n	800354c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f103 0020 	add.w	r0, r3, #32
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	f107 010c 	add.w	r1, r7, #12
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	f7ff fe3f 	bl	80031b0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff00 	bl	8003338 <dir_find>
 8003538:	4603      	mov	r3, r0
 800353a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800353e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	3301      	adds	r3, #1
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	2b63      	cmp	r3, #99	; 0x63
 8003550:	d9e5      	bls.n	800351e <dir_register+0x66>
 8003552:	e000      	b.n	8003556 <dir_register+0x9e>
			if (res != FR_OK) break;
 8003554:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	2b64      	cmp	r3, #100	; 0x64
 800355a:	d101      	bne.n	8003560 <dir_register+0xa8>
 800355c:	2307      	movs	r3, #7
 800355e:	e09c      	b.n	800369a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003564:	2b04      	cmp	r3, #4
 8003566:	d002      	beq.n	800356e <dir_register+0xb6>
 8003568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800356c:	e095      	b.n	800369a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800356e:	7dfa      	ldrb	r2, [r7, #23]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <dir_register+0xd8>
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	330c      	adds	r3, #12
 8003584:	4a47      	ldr	r2, [pc, #284]	; (80036a4 <dir_register+0x1ec>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	089b      	lsrs	r3, r3, #2
 800358c:	3301      	adds	r3, #1
 800358e:	e000      	b.n	8003592 <dir_register+0xda>
 8003590:	2301      	movs	r3, #1
 8003592:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003594:	6a39      	ldr	r1, [r7, #32]
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fcae 	bl	8002ef8 <dir_alloc>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80035a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d148      	bne.n	800363c <dir_register+0x184>
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d042      	beq.n	800363c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	015b      	lsls	r3, r3, #5
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fb87 	bl	8002cd6 <dir_sdi>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80035ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d132      	bne.n	800363c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3320      	adds	r3, #32
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fe8b 	bl	80032f6 <sum_sfn>
 80035e0:	4603      	mov	r3, r0
 80035e2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	4619      	mov	r1, r3
 80035ea:	69f8      	ldr	r0, [r7, #28]
 80035ec:	f7fe ffae 	bl	800254c <move_window>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80035f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11d      	bne.n	800363a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	68d8      	ldr	r0, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69d9      	ldr	r1, [r3, #28]
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	7efb      	ldrb	r3, [r7, #27]
 800360c:	f7ff fd68 	bl	80030e0 <put_lfn>
				fs->wflag = 1;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2201      	movs	r2, #1
 8003614:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003616:	2100      	movs	r1, #0
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff fbd7 	bl	8002dcc <dir_next>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8003624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <dir_register+0x184>
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	3b01      	subs	r3, #1
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1d5      	bne.n	80035e4 <dir_register+0x12c>
 8003638:	e000      	b.n	800363c <dir_register+0x184>
				if (res != FR_OK) break;
 800363a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800363c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003640:	2b00      	cmp	r3, #0
 8003642:	d128      	bne.n	8003696 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	4619      	mov	r1, r3
 800364a:	69f8      	ldr	r0, [r7, #28]
 800364c:	f7fe ff7e 	bl	800254c <move_window>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800365a:	2b00      	cmp	r3, #0
 800365c:	d11b      	bne.n	8003696 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	2220      	movs	r2, #32
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fe49 	bl	80022fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69d8      	ldr	r0, [r3, #28]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3320      	adds	r3, #32
 8003674:	220b      	movs	r2, #11
 8003676:	4619      	mov	r1, r3
 8003678:	f7fe fe20 	bl	80022bc <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	330c      	adds	r3, #12
 8003688:	f002 0218 	and.w	r2, r2, #24
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2201      	movs	r2, #1
 8003694:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800369a:	4618      	mov	r0, r3
 800369c:	3730      	adds	r7, #48	; 0x30
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	4ec4ec4f 	.word	0x4ec4ec4f

080036a8 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	; 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 80036c4:	f107 0308 	add.w	r3, r7, #8
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe febe 	bl	800244a <tchar2uni>
 80036ce:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d101      	bne.n	80036dc <create_name+0x34>
 80036d8:	2306      	movs	r3, #6
 80036da:	e1ad      	b.n	8003a38 <create_name+0x390>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e2:	d309      	bcc.n	80036f8 <create_name+0x50>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	0c19      	lsrs	r1, r3, #16
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	617a      	str	r2, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	b28a      	uxth	r2, r1
 80036f6:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 80036fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036fe:	2b1f      	cmp	r3, #31
 8003700:	d923      	bls.n	800374a <create_name+0xa2>
 8003702:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003704:	2b2f      	cmp	r3, #47	; 0x2f
 8003706:	d020      	beq.n	800374a <create_name+0xa2>
 8003708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800370a:	2b5c      	cmp	r3, #92	; 0x5c
 800370c:	d01d      	beq.n	800374a <create_name+0xa2>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800370e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003710:	2b7f      	cmp	r3, #127	; 0x7f
 8003712:	d809      	bhi.n	8003728 <create_name+0x80>
 8003714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003716:	4619      	mov	r1, r3
 8003718:	48a1      	ldr	r0, [pc, #644]	; (80039a0 <create_name+0x2f8>)
 800371a:	f7fe fe31 	bl	8002380 <chk_chr>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <create_name+0x80>
 8003724:	2306      	movs	r3, #6
 8003726:	e187      	b.n	8003a38 <create_name+0x390>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2bfe      	cmp	r3, #254	; 0xfe
 800372c:	d901      	bls.n	8003732 <create_name+0x8a>
 800372e:	2306      	movs	r3, #6
 8003730:	e182      	b.n	8003a38 <create_name+0x390>
		lfn[di++] = wc;					/* Store the Unicode character */
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	617a      	str	r2, [r7, #20]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003740:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8003742:	e7bf      	b.n	80036c4 <create_name+0x1c>
	}
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	3301      	adds	r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b2f      	cmp	r3, #47	; 0x2f
 8003750:	d0f8      	beq.n	8003744 <create_name+0x9c>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b5c      	cmp	r3, #92	; 0x5c
 8003758:	d0f4      	beq.n	8003744 <create_name+0x9c>
	*path = p;							/* Return pointer to the next segment */
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	601a      	str	r2, [r3, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003762:	2b1f      	cmp	r3, #31
 8003764:	d801      	bhi.n	800376a <create_name+0xc2>
 8003766:	2304      	movs	r3, #4
 8003768:	e000      	b.n	800376c <create_name+0xc4>
 800376a:	2300      	movs	r3, #0
 800376c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003770:	e011      	b.n	8003796 <create_name+0xee>
		wc = lfn[di - 1];
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003778:	3b01      	subs	r3, #1
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
 8003784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003786:	2b20      	cmp	r3, #32
 8003788:	d002      	beq.n	8003790 <create_name+0xe8>
 800378a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800378c:	2b2e      	cmp	r3, #46	; 0x2e
 800378e:	d106      	bne.n	800379e <create_name+0xf6>
		di--;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3b01      	subs	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ea      	bne.n	8003772 <create_name+0xca>
 800379c:	e000      	b.n	80037a0 <create_name+0xf8>
		if (wc != ' ' && wc != '.') break;
 800379e:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	2200      	movs	r2, #0
 80037aa:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <create_name+0x10e>
 80037b2:	2306      	movs	r3, #6
 80037b4:	e140      	b.n	8003a38 <create_name+0x390>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	e002      	b.n	80037c2 <create_name+0x11a>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	3301      	adds	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d0f5      	beq.n	80037bc <create_name+0x114>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <create_name+0x13c>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4413      	add	r3, r2
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	2b2e      	cmp	r3, #46	; 0x2e
 80037e2:	d109      	bne.n	80037f8 <create_name+0x150>
 80037e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80037e8:	f043 0303 	orr.w	r3, r3, #3
 80037ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 80037f0:	e002      	b.n	80037f8 <create_name+0x150>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <create_name+0x16a>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003804:	3b01      	subs	r3, #1
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4413      	add	r3, r2
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	2b2e      	cmp	r3, #46	; 0x2e
 8003810:	d1ef      	bne.n	80037f2 <create_name+0x14a>

	mem_set(dp->fn, ' ', 11);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3320      	adds	r3, #32
 8003816:	220b      	movs	r2, #11
 8003818:	2120      	movs	r1, #32
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fd6f 	bl	80022fe <mem_set>
	i = b = 0; ni = 8;
 8003820:	2300      	movs	r3, #0
 8003822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	2308      	movs	r3, #8
 800382c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	61ba      	str	r2, [r7, #24]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 800383e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80aa 	beq.w	800399a <create_name+0x2f2>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8003846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003848:	2b20      	cmp	r3, #32
 800384a:	d006      	beq.n	800385a <create_name+0x1b2>
 800384c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800384e:	2b2e      	cmp	r3, #46	; 0x2e
 8003850:	d10a      	bne.n	8003868 <create_name+0x1c0>
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	429a      	cmp	r2, r3
 8003858:	d006      	beq.n	8003868 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN;
 800385a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800385e:	f043 0303 	orr.w	r3, r3, #3
 8003862:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
 8003866:	e097      	b.n	8003998 <create_name+0x2f0>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	429a      	cmp	r2, r3
 800386e:	d203      	bcs.n	8003878 <create_name+0x1d0>
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	d123      	bne.n	80038c0 <create_name+0x218>
			if (ni == 11) {				/* Name extension overflow? */
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2b0b      	cmp	r3, #11
 800387c:	d106      	bne.n	800388c <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN;
 800387e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003882:	f043 0303 	orr.w	r3, r3, #3
 8003886:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 800388a:	e08e      	b.n	80039aa <create_name+0x302>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	429a      	cmp	r2, r3
 8003892:	d005      	beq.n	80038a0 <create_name+0x1f8>
 8003894:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003898:	f043 0303 	orr.w	r3, r3, #3
 800389c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d87f      	bhi.n	80039a8 <create_name+0x300>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	2308      	movs	r3, #8
 80038ae:	623b      	str	r3, [r7, #32]
 80038b0:	230b      	movs	r3, #11
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
 80038be:	e06b      	b.n	8003998 <create_name+0x2f0>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 80038c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038c2:	2b7f      	cmp	r3, #127	; 0x7f
 80038c4:	d911      	bls.n	80038ea <create_name+0x242>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 80038c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038ca:	f043 0302 	orr.w	r3, r3, #2
 80038ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
 80038d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 fb2f 	bl	8004f38 <ff_wtoupper>
 80038da:	4603      	mov	r3, r0
 80038dc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 fa75 	bl	8004dd0 <ff_uni2oem>
 80038e6:	4603      	mov	r3, r0
 80038e8:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 80038ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038ec:	2bff      	cmp	r3, #255	; 0xff
 80038ee:	d91a      	bls.n	8003926 <create_name+0x27e>
			if (i >= ni - 1) {			/* Field overflow? */
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	6a3a      	ldr	r2, [r7, #32]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d308      	bcc.n	800390c <create_name+0x264>
				cf |= NS_LOSS | NS_LFN;
 80038fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038fe:	f043 0303 	orr.w	r3, r3, #3
 8003902:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	e045      	b.n	8003998 <create_name+0x2f0>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800390c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	b299      	uxth	r1, r3
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	623a      	str	r2, [r7, #32]
 8003918:	b2c9      	uxtb	r1, r1
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	460a      	mov	r2, r1
 8003920:	f883 2020 	strb.w	r2, [r3, #32]
 8003924:	e02e      	b.n	8003984 <create_name+0x2dc>
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8003926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <create_name+0x294>
 800392c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800392e:	4619      	mov	r1, r3
 8003930:	481c      	ldr	r0, [pc, #112]	; (80039a4 <create_name+0x2fc>)
 8003932:	f7fe fd25 	bl	8002380 <chk_chr>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <create_name+0x2a6>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800393c:	235f      	movs	r3, #95	; 0x5f
 800393e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003940:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003944:	f043 0303 	orr.w	r3, r3, #3
 8003948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800394c:	e01a      	b.n	8003984 <create_name+0x2dc>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800394e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d908      	bls.n	8003966 <create_name+0x2be>
 8003954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003956:	2b5a      	cmp	r3, #90	; 0x5a
 8003958:	d805      	bhi.n	8003966 <create_name+0x2be>
					b |= 2;
 800395a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800395e:	f043 0302 	orr.w	r3, r3, #2
 8003962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8003966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003968:	2b60      	cmp	r3, #96	; 0x60
 800396a:	d90b      	bls.n	8003984 <create_name+0x2dc>
 800396c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800396e:	2b7a      	cmp	r3, #122	; 0x7a
 8003970:	d808      	bhi.n	8003984 <create_name+0x2dc>
					b |= 1; wc -= 0x20;
 8003972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800397e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003980:	3b20      	subs	r3, #32
 8003982:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	623a      	str	r2, [r7, #32]
 800398a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800398c:	b2d1      	uxtb	r1, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	460a      	mov	r2, r1
 8003994:	f883 2020 	strb.w	r2, [r3, #32]
		wc = lfn[si++];					/* Get an LFN character */
 8003998:	e749      	b.n	800382e <create_name+0x186>
		if (wc == 0) break;				/* Break on end of the LFN */
 800399a:	bf00      	nop
 800399c:	e005      	b.n	80039aa <create_name+0x302>
 800399e:	bf00      	nop
 80039a0:	08008b98 	.word	0x08008b98
 80039a4:	08008ba4 	.word	0x08008ba4
			if (si > di) break;						/* No name extension? */
 80039a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b0:	2be5      	cmp	r3, #229	; 0xe5
 80039b2:	d103      	bne.n	80039bc <create_name+0x314>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2205      	movs	r2, #5
 80039b8:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d104      	bne.n	80039cc <create_name+0x324>
 80039c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 80039cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	d005      	beq.n	80039e4 <create_name+0x33c>
 80039d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d105      	bne.n	80039f0 <create_name+0x348>
 80039e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 80039f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d117      	bne.n	8003a2c <create_name+0x384>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 80039fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <create_name+0x36c>
 8003a08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a0c:	f043 0310 	orr.w	r3, r3, #16
 8003a10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8003a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <create_name+0x384>
 8003a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a24:	f043 0308 	orr.w	r3, r3, #8
 8003a28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003a32:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8003a36:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003a50:	e002      	b.n	8003a58 <follow_path+0x18>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b2f      	cmp	r3, #47	; 0x2f
 8003a5e:	d0f8      	beq.n	8003a52 <follow_path+0x12>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b5c      	cmp	r3, #92	; 0x5c
 8003a66:	d0f4      	beq.n	8003a52 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b1f      	cmp	r3, #31
 8003a74:	d80a      	bhi.n	8003a8c <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8003a7e:	2100      	movs	r1, #0
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff f928 	bl	8002cd6 <dir_sdi>
 8003a86:	4603      	mov	r3, r0
 8003a88:	75fb      	strb	r3, [r7, #23]
 8003a8a:	e043      	b.n	8003b14 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff fe09 	bl	80036a8 <create_name>
 8003a96:	4603      	mov	r3, r0
 8003a98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d134      	bne.n	8003b0a <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff fc49 	bl	8003338 <dir_find>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003ab0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d127      	bne.n	8003b0e <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d122      	bne.n	8003b0e <follow_path+0xce>
 8003ac8:	2305      	movs	r3, #5
 8003aca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003acc:	e01f      	b.n	8003b0e <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d11c      	bne.n	8003b12 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	799b      	ldrb	r3, [r3, #6]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8003ae4:	2305      	movs	r3, #5
 8003ae6:	75fb      	strb	r3, [r7, #23]
 8003ae8:	e014      	b.n	8003b14 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af8:	4413      	add	r3, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	6938      	ldr	r0, [r7, #16]
 8003afe:	f7ff fa42 	bl	8002f86 <ld_clust>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003b08:	e7c0      	b.n	8003a8c <follow_path+0x4c>
			if (res != FR_OK) break;
 8003b0a:	bf00      	nop
 8003b0c:	e002      	b.n	8003b14 <follow_path+0xd4>
				break;
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003b12:	bf00      	nop
			}
		}
	}

	return res;
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b089      	sub	sp, #36	; 0x24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <get_ldnumber+0x22>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	e02d      	b.n	8003b9c <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	61fa      	str	r2, [r7, #28]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b1f      	cmp	r3, #31
 8003b4e:	d902      	bls.n	8003b56 <get_ldnumber+0x38>
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b3a      	cmp	r3, #58	; 0x3a
 8003b54:	d1f4      	bne.n	8003b40 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b3a      	cmp	r3, #58	; 0x3a
 8003b5a:	d11c      	bne.n	8003b96 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b2f      	cmp	r3, #47	; 0x2f
 8003b66:	d90c      	bls.n	8003b82 <get_ldnumber+0x64>
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b39      	cmp	r3, #57	; 0x39
 8003b6e:	d808      	bhi.n	8003b82 <get_ldnumber+0x64>
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	3302      	adds	r3, #2
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d103      	bne.n	8003b82 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	3b30      	subs	r3, #48	; 0x30
 8003b80:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	dc04      	bgt.n	8003b92 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	e002      	b.n	8003b9c <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8003b9a:	697b      	ldr	r3, [r7, #20]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3724      	adds	r7, #36	; 0x24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	70da      	strb	r2, [r3, #3]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003bc0:	6839      	ldr	r1, [r7, #0]
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe fcc2 	bl	800254c <move_window>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <check_fs+0x2a>
 8003bce:	2304      	movs	r3, #4
 8003bd0:	e038      	b.n	8003c44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3334      	adds	r3, #52	; 0x34
 8003bd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe faec 	bl	80021b8 <ld_word>
 8003be0:	4603      	mov	r3, r0
 8003be2:	461a      	mov	r2, r3
 8003be4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <check_fs+0x48>
 8003bec:	2303      	movs	r3, #3
 8003bee:	e029      	b.n	8003c44 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bf6:	2be9      	cmp	r3, #233	; 0xe9
 8003bf8:	d009      	beq.n	8003c0e <check_fs+0x66>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c00:	2beb      	cmp	r3, #235	; 0xeb
 8003c02:	d004      	beq.n	8003c0e <check_fs+0x66>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c0a:	2be8      	cmp	r3, #232	; 0xe8
 8003c0c:	d119      	bne.n	8003c42 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3334      	adds	r3, #52	; 0x34
 8003c12:	3336      	adds	r3, #54	; 0x36
 8003c14:	2203      	movs	r2, #3
 8003c16:	490d      	ldr	r1, [pc, #52]	; (8003c4c <check_fs+0xa4>)
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe fb8a 	bl	8002332 <mem_cmp>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <check_fs+0x80>
 8003c24:	2300      	movs	r3, #0
 8003c26:	e00d      	b.n	8003c44 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3334      	adds	r3, #52	; 0x34
 8003c2c:	3352      	adds	r3, #82	; 0x52
 8003c2e:	2205      	movs	r2, #5
 8003c30:	4907      	ldr	r1, [pc, #28]	; (8003c50 <check_fs+0xa8>)
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe fb7d 	bl	8002332 <mem_cmp>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <check_fs+0x9a>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8003c42:	2302      	movs	r3, #2
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	08008bac 	.word	0x08008bac
 8003c50:	08008bb0 	.word	0x08008bb0

08003c54 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b096      	sub	sp, #88	; 0x58
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff ff58 	bl	8003b1e <get_ldnumber>
 8003c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da01      	bge.n	8003c7a <find_volume+0x26>
 8003c76:	230b      	movs	r3, #11
 8003c78:	e23b      	b.n	80040f2 <find_volume+0x49e>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8003c7a:	4aa8      	ldr	r2, [pc, #672]	; (8003f1c <find_volume+0x2c8>)
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <find_volume+0x3a>
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	e231      	b.n	80040f2 <find_volume+0x49e>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01a      	beq.n	8003cda <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	785b      	ldrb	r3, [r3, #1]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fd ffb9 	bl	8001c20 <disk_status>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10c      	bne.n	8003cda <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <find_volume+0x82>
 8003cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003cd2:	230a      	movs	r3, #10
 8003cd4:	e20d      	b.n	80040f2 <find_volume+0x49e>
			}
			return FR_OK;				/* The filesystem object is valid */
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e20b      	b.n	80040f2 <find_volume+0x49e>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd fead 	bl	8001a4c <disk_initialize>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003cf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003d04:	2303      	movs	r3, #3
 8003d06:	e1f4      	b.n	80040f2 <find_volume+0x49e>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <find_volume+0xca>
 8003d0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003d1a:	230a      	movs	r3, #10
 8003d1c:	e1e9      	b.n	80040f2 <find_volume+0x49e>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003d22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d26:	f7ff ff3f 	bl	8003ba8 <check_fs>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003d30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d14b      	bne.n	8003dd0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3c:	e01f      	b.n	8003d7e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003d4c:	4413      	add	r3, r2
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	3304      	adds	r3, #4
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <find_volume+0x114>
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fa42 	bl	80021e8 <ld_dword>
 8003d64:	4602      	mov	r2, r0
 8003d66:	e000      	b.n	8003d6a <find_volume+0x116>
 8003d68:	2200      	movs	r2, #0
 8003d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003d72:	440b      	add	r3, r1
 8003d74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d9dc      	bls.n	8003d3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003d84:	2300      	movs	r3, #0
 8003d86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8003d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <find_volume+0x140>
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d90:	3b01      	subs	r3, #1
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003da2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <find_volume+0x162>
 8003daa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003dac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003dae:	f7ff fefb 	bl	8003ba8 <check_fs>
 8003db2:	4603      	mov	r3, r0
 8003db4:	e000      	b.n	8003db8 <find_volume+0x164>
 8003db6:	2303      	movs	r3, #3
 8003db8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d905      	bls.n	8003dd0 <find_volume+0x17c>
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d9e1      	bls.n	8003d94 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d101      	bne.n	8003ddc <find_volume+0x188>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e18a      	b.n	80040f2 <find_volume+0x49e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d901      	bls.n	8003de8 <find_volume+0x194>
 8003de4:	230d      	movs	r3, #13
 8003de6:	e184      	b.n	80040f2 <find_volume+0x49e>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	3334      	adds	r3, #52	; 0x34
 8003dec:	330b      	adds	r3, #11
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe f9e2 	bl	80021b8 <ld_word>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfa:	d001      	beq.n	8003e00 <find_volume+0x1ac>
 8003dfc:	230d      	movs	r3, #13
 8003dfe:	e178      	b.n	80040f2 <find_volume+0x49e>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	3334      	adds	r3, #52	; 0x34
 8003e04:	3316      	adds	r3, #22
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe f9d6 	bl	80021b8 <ld_word>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <find_volume+0x1d0>
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	3334      	adds	r3, #52	; 0x34
 8003e1a:	3324      	adds	r3, #36	; 0x24
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe f9e3 	bl	80021e8 <ld_dword>
 8003e22:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e28:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e36:	789b      	ldrb	r3, [r3, #2]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d005      	beq.n	8003e48 <find_volume+0x1f4>
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	789b      	ldrb	r3, [r3, #2]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d001      	beq.n	8003e48 <find_volume+0x1f4>
 8003e44:	230d      	movs	r3, #13
 8003e46:	e154      	b.n	80040f2 <find_volume+0x49e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	789b      	ldrb	r3, [r3, #2]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	895b      	ldrh	r3, [r3, #10]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <find_volume+0x228>
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	895b      	ldrh	r3, [r3, #10]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	895b      	ldrh	r3, [r3, #10]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <find_volume+0x22c>
 8003e7c:	230d      	movs	r3, #13
 8003e7e:	e138      	b.n	80040f2 <find_volume+0x49e>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	3334      	adds	r3, #52	; 0x34
 8003e84:	3311      	adds	r3, #17
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe f996 	bl	80021b8 <ld_word>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	891b      	ldrh	r3, [r3, #8]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <find_volume+0x252>
 8003ea2:	230d      	movs	r3, #13
 8003ea4:	e125      	b.n	80040f2 <find_volume+0x49e>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	3334      	adds	r3, #52	; 0x34
 8003eaa:	3313      	adds	r3, #19
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe f983 	bl	80021b8 <ld_word>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <find_volume+0x276>
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	3334      	adds	r3, #52	; 0x34
 8003ec0:	3320      	adds	r3, #32
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe f990 	bl	80021e8 <ld_dword>
 8003ec8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	3334      	adds	r3, #52	; 0x34
 8003ece:	330e      	adds	r3, #14
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe f971 	bl	80021b8 <ld_word>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003eda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <find_volume+0x290>
 8003ee0:	230d      	movs	r3, #13
 8003ee2:	e106      	b.n	80040f2 <find_volume+0x49e>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003ee4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee8:	4413      	add	r3, r2
 8003eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eec:	8912      	ldrh	r2, [r2, #8]
 8003eee:	0912      	lsrs	r2, r2, #4
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d201      	bcs.n	8003f02 <find_volume+0x2ae>
 8003efe:	230d      	movs	r3, #13
 8003f00:	e0f7      	b.n	80040f2 <find_volume+0x49e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f0a:	8952      	ldrh	r2, [r2, #10]
 8003f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d103      	bne.n	8003f20 <find_volume+0x2cc>
 8003f18:	230d      	movs	r3, #13
 8003f1a:	e0ea      	b.n	80040f2 <find_volume+0x49e>
 8003f1c:	20000030 	.word	0x20000030
		fmt = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	4a74      	ldr	r2, [pc, #464]	; (80040fc <find_volume+0x4a8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d802      	bhi.n	8003f34 <find_volume+0x2e0>
 8003f2e:	2303      	movs	r3, #3
 8003f30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d802      	bhi.n	8003f44 <find_volume+0x2f0>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d802      	bhi.n	8003f54 <find_volume+0x300>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8003f54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <find_volume+0x30c>
 8003f5c:	230d      	movs	r3, #13
 8003f5e:	e0c8      	b.n	80040f2 <find_volume+0x49e>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	1c9a      	adds	r2, r3, #2
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f6c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003f6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f72:	441a      	add	r2, r3
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8003f78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	441a      	add	r2, r3
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8003f82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d11e      	bne.n	8003fc8 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	3334      	adds	r3, #52	; 0x34
 8003f8e:	332a      	adds	r3, #42	; 0x2a
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe f911 	bl	80021b8 <ld_word>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <find_volume+0x34c>
 8003f9c:	230d      	movs	r3, #13
 8003f9e:	e0a8      	b.n	80040f2 <find_volume+0x49e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	891b      	ldrh	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <find_volume+0x358>
 8003fa8:	230d      	movs	r3, #13
 8003faa:	e0a2      	b.n	80040f2 <find_volume+0x49e>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	3334      	adds	r3, #52	; 0x34
 8003fb0:	332c      	adds	r3, #44	; 0x2c
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe f918 	bl	80021e8 <ld_dword>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc6:	e01f      	b.n	8004008 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	891b      	ldrh	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <find_volume+0x380>
 8003fd0:	230d      	movs	r3, #13
 8003fd2:	e08e      	b.n	80040f2 <find_volume+0x49e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fda:	441a      	add	r2, r3
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d103      	bne.n	8003ff0 <find_volume+0x39c>
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	e00a      	b.n	8004006 <find_volume+0x3b2>
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	085a      	lsrs	r2, r3, #1
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004006:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004012:	0a5b      	lsrs	r3, r3, #9
 8004014:	429a      	cmp	r2, r3
 8004016:	d201      	bcs.n	800401c <find_volume+0x3c8>
 8004018:	230d      	movs	r3, #13
 800401a:	e06a      	b.n	80040f2 <find_volume+0x49e>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800401c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401e:	f04f 32ff 	mov.w	r2, #4294967295
 8004022:	615a      	str	r2, [r3, #20]
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8004032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004036:	2b03      	cmp	r3, #3
 8004038:	d149      	bne.n	80040ce <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	3334      	adds	r3, #52	; 0x34
 800403e:	3330      	adds	r3, #48	; 0x30
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe f8b9 	bl	80021b8 <ld_word>
 8004046:	4603      	mov	r3, r0
 8004048:	2b01      	cmp	r3, #1
 800404a:	d140      	bne.n	80040ce <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800404c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404e:	3301      	adds	r3, #1
 8004050:	4619      	mov	r1, r3
 8004052:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004054:	f7fe fa7a 	bl	800254c <move_window>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d137      	bne.n	80040ce <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	2200      	movs	r2, #0
 8004062:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	3334      	adds	r3, #52	; 0x34
 8004068:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe f8a3 	bl	80021b8 <ld_word>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800407a:	429a      	cmp	r2, r3
 800407c:	d127      	bne.n	80040ce <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	3334      	adds	r3, #52	; 0x34
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe f8b0 	bl	80021e8 <ld_dword>
 8004088:	4602      	mov	r2, r0
 800408a:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <find_volume+0x4ac>)
 800408c:	429a      	cmp	r2, r3
 800408e:	d11e      	bne.n	80040ce <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	3334      	adds	r3, #52	; 0x34
 8004094:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe f8a5 	bl	80021e8 <ld_dword>
 800409e:	4602      	mov	r2, r0
 80040a0:	4b18      	ldr	r3, [pc, #96]	; (8004104 <find_volume+0x4b0>)
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d113      	bne.n	80040ce <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	3334      	adds	r3, #52	; 0x34
 80040aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe f89a 	bl	80021e8 <ld_dword>
 80040b4:	4602      	mov	r2, r0
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	615a      	str	r2, [r3, #20]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	3334      	adds	r3, #52	; 0x34
 80040be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe f890 	bl	80021e8 <ld_dword>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80040ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80040d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <find_volume+0x4b4>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <find_volume+0x4b4>)
 80040e0:	801a      	strh	r2, [r3, #0]
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <find_volume+0x4b4>)
 80040e4:	881a      	ldrh	r2, [r3, #0]
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <find_volume+0x4b8>)
 80040ee:	60da      	str	r2, [r3, #12]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3758      	adds	r7, #88	; 0x58
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	0ffffff5 	.word	0x0ffffff5
 8004100:	41615252 	.word	0x41615252
 8004104:	61417272 	.word	0x61417272
 8004108:	20000034 	.word	0x20000034
 800410c:	20000038 	.word	0x20000038

08004110 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800411a:	2309      	movs	r3, #9
 800411c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01c      	beq.n	800415e <validate+0x4e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d018      	beq.n	800415e <validate+0x4e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d013      	beq.n	800415e <validate+0x4e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	889a      	ldrh	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	88db      	ldrh	r3, [r3, #6]
 8004140:	429a      	cmp	r2, r3
 8004142:	d10c      	bne.n	800415e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd fd68 	bl	8001c20 <disk_status>
 8004150:	4603      	mov	r3, r0
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <validate+0x4e>
			res = FR_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <validate+0x5a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	e000      	b.n	800416c <validate+0x5c>
 800416a:	2300      	movs	r3, #0
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	6013      	str	r3, [r2, #0]
	return res;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	4613      	mov	r3, r2
 8004188:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800418e:	f107 0310 	add.w	r3, r7, #16
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fcc3 	bl	8003b1e <get_ldnumber>
 8004198:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	da01      	bge.n	80041a4 <f_mount+0x28>
 80041a0:	230b      	movs	r3, #11
 80041a2:	e025      	b.n	80041f0 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <f_mount+0x7c>)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	490b      	ldr	r1, [pc, #44]	; (80041f8 <f_mount+0x7c>)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <f_mount+0x5e>
 80041d6:	2300      	movs	r3, #0
 80041d8:	e00a      	b.n	80041f0 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80041da:	f107 010c 	add.w	r1, r7, #12
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	2200      	movs	r2, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fd35 	bl	8003c54 <find_volume>
 80041ea:	4603      	mov	r3, r0
 80041ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20000030 	.word	0x20000030

080041fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b099      	sub	sp, #100	; 0x64
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	4613      	mov	r3, r2
 8004208:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <f_open+0x18>
 8004210:	2309      	movs	r3, #9
 8004212:	e172      	b.n	80044fa <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800421a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800421c:	79fa      	ldrb	r2, [r7, #7]
 800421e:	f107 0110 	add.w	r1, r7, #16
 8004222:	f107 0308 	add.w	r3, r7, #8
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fd14 	bl	8003c54 <find_volume>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 8156 	bne.w	80044e8 <f_open+0x2ec>
		dj.obj.fs = fs;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	f107 0314 	add.w	r3, r7, #20
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fbf9 	bl	8003a40 <follow_path>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8004254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004258:	2b00      	cmp	r3, #0
 800425a:	d107      	bne.n	800426c <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800425c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004260:	b25b      	sxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	da02      	bge.n	800426c <f_open+0x70>
				res = FR_INVALID_NAME;
 8004266:	2306      	movs	r3, #6
 8004268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	f003 031c 	and.w	r3, r3, #28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d073      	beq.n	800435e <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8004276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800427a:	2b00      	cmp	r3, #0
 800427c:	d010      	beq.n	80042a0 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800427e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004282:	2b04      	cmp	r3, #4
 8004284:	d107      	bne.n	8004296 <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff f914 	bl	80034b8 <dir_register>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f043 0308 	orr.w	r3, r3, #8
 800429c:	71fb      	strb	r3, [r7, #7]
 800429e:	e010      	b.n	80042c2 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80042a0:	7ebb      	ldrb	r3, [r7, #26]
 80042a2:	f003 0311 	and.w	r3, r3, #17
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <f_open+0xb6>
					res = FR_DENIED;
 80042aa:	2307      	movs	r3, #7
 80042ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80042b0:	e007      	b.n	80042c2 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <f_open+0xc6>
 80042bc:	2308      	movs	r3, #8
 80042be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80042c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d163      	bne.n	8004392 <f_open+0x196>
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d05e      	beq.n	8004392 <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe fe53 	bl	8002f86 <ld_clust>
 80042e0:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	f103 040e 	add.w	r4, r3, #14
 80042e8:	f7fd ff5c 	bl	80021a4 <get_fattime>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4619      	mov	r1, r3
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7fd ffb7 	bl	8002264 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	330b      	adds	r3, #11
 80042fa:	2220      	movs	r2, #32
 80042fc:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004302:	2200      	movs	r2, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fe5d 	bl	8002fc4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	331c      	adds	r3, #28
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f7fd ffa7 	bl	8002264 <st_dword>
					fs->wflag = 1;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2201      	movs	r2, #1
 800431a:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800431c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800431e:	2b00      	cmp	r3, #0
 8004320:	d037      	beq.n	8004392 <f_open+0x196>
						dw = fs->winsect;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	2200      	movs	r2, #0
 800432e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fb52 	bl	80029da <remove_chain>
 8004336:	4603      	mov	r3, r0
 8004338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800433c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004340:	2b00      	cmp	r3, #0
 8004342:	d126      	bne.n	8004392 <f_open+0x196>
							res = move_window(fs, dw);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe f8ff 	bl	800254c <move_window>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004358:	3a01      	subs	r2, #1
 800435a:	611a      	str	r2, [r3, #16]
 800435c:	e019      	b.n	8004392 <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800435e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004362:	2b00      	cmp	r3, #0
 8004364:	d115      	bne.n	8004392 <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8004366:	7ebb      	ldrb	r3, [r7, #26]
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <f_open+0x17c>
					res = FR_NO_FILE;
 8004370:	2304      	movs	r3, #4
 8004372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004376:	e00c      	b.n	8004392 <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <f_open+0x196>
 8004382:	7ebb      	ldrb	r3, [r7, #26]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <f_open+0x196>
						res = FR_DENIED;
 800438c:	2307      	movs	r3, #7
 800438e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10f      	bne.n	80043ba <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <f_open+0x1b0>
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043aa:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80043b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80043ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f040 8092 	bne.w	80044e8 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fddb 	bl	8002f86 <ld_clust>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	331c      	adds	r3, #28
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd ff04 	bl	80021e8 <ld_dword>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	88da      	ldrh	r2, [r3, #6]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	79fa      	ldrb	r2, [r7, #7]
 80043f8:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3328      	adds	r3, #40	; 0x28
 8004410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd ff71 	bl	80022fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d060      	beq.n	80044e8 <f_open+0x2ec>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d05c      	beq.n	80044e8 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	895b      	ldrh	r3, [r3, #10]
 800443a:	025b      	lsls	r3, r3, #9
 800443c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	657b      	str	r3, [r7, #84]	; 0x54
 800444a:	e016      	b.n	800447a <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe f936 	bl	80026c2 <get_fat>
 8004456:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800445a:	2b01      	cmp	r3, #1
 800445c:	d802      	bhi.n	8004464 <f_open+0x268>
 800445e:	2302      	movs	r3, #2
 8004460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d102      	bne.n	8004472 <f_open+0x276>
 800446c:	2301      	movs	r3, #1
 800446e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004472:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	657b      	str	r3, [r7, #84]	; 0x54
 800447a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <f_open+0x28e>
 8004482:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004486:	429a      	cmp	r2, r3
 8004488:	d8e0      	bhi.n	800444c <f_open+0x250>
				}
				fp->clust = clst;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800448e:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004494:	2b00      	cmp	r3, #0
 8004496:	d127      	bne.n	80044e8 <f_open+0x2ec>
 8004498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d022      	beq.n	80044e8 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe f8ec 	bl	8002684 <clst2sect>
 80044ac:	6478      	str	r0, [r7, #68]	; 0x44
 80044ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d103      	bne.n	80044bc <f_open+0x2c0>
						res = FR_INT_ERR;
 80044b4:	2302      	movs	r3, #2
 80044b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80044ba:	e015      	b.n	80044e8 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80044bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044be:	0a5a      	lsrs	r2, r3, #9
 80044c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c2:	441a      	add	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	7858      	ldrb	r0, [r3, #1]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	2301      	movs	r3, #1
 80044d8:	f7fd fbb8 	bl	8001c4c <disk_read>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <f_open+0x2ec>
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80044e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <f_open+0x2fa>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80044f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3764      	adds	r7, #100	; 0x64
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd90      	pop	{r4, r7, pc}

08004502 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b08e      	sub	sp, #56	; 0x38
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f107 0214 	add.w	r2, r7, #20
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fdf4 	bl	8004110 <validate>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800452e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004532:	2b00      	cmp	r3, #0
 8004534:	d107      	bne.n	8004546 <f_read+0x44>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	7c5b      	ldrb	r3, [r3, #17]
 800453a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800453e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <f_read+0x4a>
 8004546:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800454a:	e109      	b.n	8004760 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	7c1b      	ldrb	r3, [r3, #16]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <f_read+0x5a>
 8004558:	2307      	movs	r3, #7
 800455a:	e101      	b.n	8004760 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	429a      	cmp	r2, r3
 800456e:	f240 80f2 	bls.w	8004756 <f_read+0x254>
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 8004576:	e0ee      	b.n	8004756 <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004580:	2b00      	cmp	r3, #0
 8004582:	f040 80ba 	bne.w	80046fa <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	0a5b      	lsrs	r3, r3, #9
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	8952      	ldrh	r2, [r2, #10]
 8004590:	3a01      	subs	r2, #1
 8004592:	4013      	ands	r3, r2
 8004594:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d123      	bne.n	80045e4 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	633b      	str	r3, [r7, #48]	; 0x30
 80045aa:	e007      	b.n	80045bc <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f7fe f884 	bl	80026c2 <get_fat>
 80045ba:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d804      	bhi.n	80045cc <f_read+0xca>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2202      	movs	r2, #2
 80045c6:	745a      	strb	r2, [r3, #17]
 80045c8:	2302      	movs	r3, #2
 80045ca:	e0c9      	b.n	8004760 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d104      	bne.n	80045de <f_read+0xdc>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	745a      	strb	r2, [r3, #17]
 80045da:	2301      	movs	r3, #1
 80045dc:	e0c0      	b.n	8004760 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e2:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f7fe f849 	bl	8002684 <clst2sect>
 80045f2:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <f_read+0x102>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2202      	movs	r2, #2
 80045fe:	745a      	strb	r2, [r3, #17]
 8004600:	2302      	movs	r3, #2
 8004602:	e0ad      	b.n	8004760 <f_read+0x25e>
			sect += csect;
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	0a5b      	lsrs	r3, r3, #9
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	d039      	beq.n	800468c <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	4413      	add	r3, r2
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	8952      	ldrh	r2, [r2, #10]
 8004622:	4293      	cmp	r3, r2
 8004624:	d905      	bls.n	8004632 <f_read+0x130>
					cc = fs->csize - csect;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	895b      	ldrh	r3, [r3, #10]
 800462a:	461a      	mov	r2, r3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	7858      	ldrb	r0, [r3, #1]
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800463c:	f7fd fb06 	bl	8001c4c <disk_read>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <f_read+0x14e>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	745a      	strb	r2, [r3, #17]
 800464c:	2301      	movs	r3, #1
 800464e:	e087      	b.n	8004760 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	7c1b      	ldrb	r3, [r3, #16]
 8004654:	b25b      	sxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	da14      	bge.n	8004684 <f_read+0x182>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004664:	429a      	cmp	r2, r3
 8004666:	d90d      	bls.n	8004684 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	025b      	lsls	r3, r3, #9
 8004672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004674:	18d0      	adds	r0, r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3328      	adds	r3, #40	; 0x28
 800467a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800467e:	4619      	mov	r1, r3
 8004680:	f7fd fe1c 	bl	80022bc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	025b      	lsls	r3, r3, #9
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800468a:	e050      	b.n	800472e <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	429a      	cmp	r2, r3
 8004694:	d02e      	beq.n	80046f4 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	7c1b      	ldrb	r3, [r3, #16]
 800469a:	b25b      	sxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	da18      	bge.n	80046d2 <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	7858      	ldrb	r0, [r3, #1]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	2301      	movs	r3, #1
 80046b0:	f7fd fb36 	bl	8001d20 <disk_write>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d004      	beq.n	80046c4 <f_read+0x1c2>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	745a      	strb	r2, [r3, #17]
 80046c0:	2301      	movs	r3, #1
 80046c2:	e04d      	b.n	8004760 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	7c1b      	ldrb	r3, [r3, #16]
 80046c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	7858      	ldrb	r0, [r3, #1]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80046dc:	2301      	movs	r3, #1
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	f7fd fab4 	bl	8001c4c <disk_read>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d004      	beq.n	80046f4 <f_read+0x1f2>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	745a      	strb	r2, [r3, #17]
 80046f0:	2301      	movs	r3, #1
 80046f2:	e035      	b.n	8004760 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004702:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d901      	bls.n	8004714 <f_read+0x212>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	4413      	add	r3, r2
 8004724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004726:	4619      	mov	r1, r3
 8004728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800472a:	f7fd fdc7 	bl	80022bc <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	441a      	add	r2, r3
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	4413      	add	r3, r2
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	441a      	add	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f af0d 	bne.w	8004578 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3738      	adds	r7, #56	; 0x38
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f107 0210 	add.w	r2, r7, #16
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fcc1 	bl	8004110 <validate>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004798:	2b00      	cmp	r3, #0
 800479a:	d107      	bne.n	80047ac <f_write+0x44>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	7c5b      	ldrb	r3, [r3, #17]
 80047a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80047a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <f_write+0x4a>
 80047ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047b0:	e13f      	b.n	8004a32 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	7c1b      	ldrb	r3, [r3, #16]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <f_write+0x5a>
 80047be:	2307      	movs	r3, #7
 80047c0:	e137      	b.n	8004a32 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	441a      	add	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	f080 8121 	bcs.w	8004a16 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	43db      	mvns	r3, r3
 80047da:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80047dc:	e11b      	b.n	8004a16 <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 80d7 	bne.w	800499a <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	0a5b      	lsrs	r3, r3, #9
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	8952      	ldrh	r2, [r2, #10]
 80047f6:	3a01      	subs	r2, #1
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d137      	bne.n	8004872 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10c      	bne.n	8004824 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10e      	bne.n	8004834 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe f942 	bl	8002aa4 <create_chain>
 8004820:	62b8      	str	r0, [r7, #40]	; 0x28
 8004822:	e007      	b.n	8004834 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f7fe f939 	bl	8002aa4 <create_chain>
 8004832:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80f2 	beq.w	8004a20 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	2b01      	cmp	r3, #1
 8004840:	d104      	bne.n	800484c <f_write+0xe4>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2202      	movs	r2, #2
 8004846:	745a      	strb	r2, [r3, #17]
 8004848:	2302      	movs	r3, #2
 800484a:	e0f2      	b.n	8004a32 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004852:	d104      	bne.n	800485e <f_write+0xf6>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	745a      	strb	r2, [r3, #17]
 800485a:	2301      	movs	r3, #1
 800485c:	e0e9      	b.n	8004a32 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004862:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <f_write+0x10a>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004870:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	7c1b      	ldrb	r3, [r3, #16]
 8004876:	b25b      	sxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	da18      	bge.n	80048ae <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	7858      	ldrb	r0, [r3, #1]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	2301      	movs	r3, #1
 800488c:	f7fd fa48 	bl	8001d20 <disk_write>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <f_write+0x138>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	745a      	strb	r2, [r3, #17]
 800489c:	2301      	movs	r3, #1
 800489e:	e0c8      	b.n	8004a32 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	7c1b      	ldrb	r3, [r3, #16]
 80048a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f7fd fee4 	bl	8002684 <clst2sect>
 80048bc:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <f_write+0x166>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2202      	movs	r2, #2
 80048c8:	745a      	strb	r2, [r3, #17]
 80048ca:	2302      	movs	r3, #2
 80048cc:	e0b1      	b.n	8004a32 <f_write+0x2ca>
			sect += csect;
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	4413      	add	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0a5b      	lsrs	r3, r3, #9
 80048da:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d03c      	beq.n	800495c <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	4413      	add	r3, r2
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	8952      	ldrh	r2, [r2, #10]
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d905      	bls.n	80048fc <f_write+0x194>
					cc = fs->csize - csect;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	895b      	ldrh	r3, [r3, #10]
 80048f4:	461a      	mov	r2, r3
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	7858      	ldrb	r0, [r3, #1]
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	69f9      	ldr	r1, [r7, #28]
 8004906:	f7fd fa0b 	bl	8001d20 <disk_write>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <f_write+0x1b2>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	745a      	strb	r2, [r3, #17]
 8004916:	2301      	movs	r3, #1
 8004918:	e08b      	b.n	8004a32 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	6a3a      	ldr	r2, [r7, #32]
 8004924:	429a      	cmp	r2, r3
 8004926:	d915      	bls.n	8004954 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	69da      	ldr	r2, [r3, #28]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	025b      	lsls	r3, r3, #9
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004940:	4619      	mov	r1, r3
 8004942:	f7fd fcbb 	bl	80022bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	7c1b      	ldrb	r3, [r3, #16]
 800494a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	025b      	lsls	r3, r3, #9
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800495a:	e03f      	b.n	80049dc <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	429a      	cmp	r2, r3
 8004964:	d016      	beq.n	8004994 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800496e:	429a      	cmp	r2, r3
 8004970:	d210      	bcs.n	8004994 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	7858      	ldrb	r0, [r3, #1]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800497c:	2301      	movs	r3, #1
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	f7fd f964 	bl	8001c4c <disk_read>
 8004984:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004986:	2b00      	cmp	r3, #0
 8004988:	d004      	beq.n	8004994 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	745a      	strb	r2, [r3, #17]
 8004990:	2301      	movs	r3, #1
 8004992:	e04e      	b.n	8004a32 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80049a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d901      	bls.n	80049b4 <f_write+0x24c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c2:	4413      	add	r3, r2
 80049c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c6:	69f9      	ldr	r1, [r7, #28]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fd fc77 	bl	80022bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	7c1b      	ldrb	r3, [r3, #16]
 80049d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	441a      	add	r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	4413      	add	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	695a      	ldr	r2, [r3, #20]
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	441a      	add	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	615a      	str	r2, [r3, #20]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	bf38      	it	cc
 8004a10:	461a      	movcc	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f47f aee0 	bne.w	80047de <f_write+0x76>
 8004a1e:	e000      	b.n	8004a22 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004a20:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	7c1b      	ldrb	r3, [r3, #16]
 8004a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3730      	adds	r7, #48	; 0x30
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b086      	sub	sp, #24
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f107 0208 	add.w	r2, r7, #8
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fb60 	bl	8004110 <validate>
 8004a50:	4603      	mov	r3, r0
 8004a52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d168      	bne.n	8004b2c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7c1b      	ldrb	r3, [r3, #16]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d062      	beq.n	8004b2c <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7c1b      	ldrb	r3, [r3, #16]
 8004a6a:	b25b      	sxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	da15      	bge.n	8004a9c <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	7858      	ldrb	r0, [r3, #1]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69da      	ldr	r2, [r3, #28]
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f7fd f94e 	bl	8001d20 <disk_write>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <f_sync+0x54>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e04f      	b.n	8004b2e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	7c1b      	ldrb	r3, [r3, #16]
 8004a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004a9c:	f7fd fb82 	bl	80021a4 <get_fattime>
 8004aa0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f7fd fd4e 	bl	800254c <move_window>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d138      	bne.n	8004b2c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	330b      	adds	r3, #11
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	330b      	adds	r3, #11
 8004aca:	f042 0220 	orr.w	r2, r2, #32
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	461a      	mov	r2, r3
 8004adc:	68f9      	ldr	r1, [r7, #12]
 8004ade:	f7fe fa71 	bl	8002fc4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f103 021c 	add.w	r2, r3, #28
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f7fd fbb8 	bl	8002264 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3316      	adds	r3, #22
 8004af8:	6939      	ldr	r1, [r7, #16]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fd fbb2 	bl	8002264 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3312      	adds	r3, #18
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fd fb91 	bl	800222e <st_word>
					fs->wflag = 1;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fd fd47 	bl	80025a8 <sync_fs>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	7c1b      	ldrb	r3, [r3, #16]
 8004b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff ff7b 	bl	8004a3a <f_sync>
 8004b44:	4603      	mov	r3, r0
 8004b46:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10e      	bne.n	8004b6c <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f107 0208 	add.w	r2, r7, #8
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fada 	bl	8004110 <validate>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b088      	sub	sp, #32
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f107 0208 	add.w	r2, r7, #8
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fac1 	bl	8004110 <validate>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) res = (FRESULT)fp->err;
 8004b92:	7ffb      	ldrb	r3, [r7, #31]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <f_lseek+0x28>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	7c5b      	ldrb	r3, [r3, #17]
 8004b9c:	77fb      	strb	r3, [r7, #31]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8004b9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <f_lseek+0x32>
 8004ba4:	7ffb      	ldrb	r3, [r7, #31]
 8004ba6:	e10f      	b.n	8004dc8 <f_lseek+0x252>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d908      	bls.n	8004bc4 <f_lseek+0x4e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7c1b      	ldrb	r3, [r3, #16]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <f_lseek+0x4e>
			ofs = fp->obj.objsize;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	615a      	str	r2, [r3, #20]
		if (ofs > 0) {
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80a7 	beq.w	8004d2a <f_lseek+0x1b4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	895b      	ldrh	r3, [r3, #10]
 8004be0:	025b      	lsls	r3, r3, #9
 8004be2:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01b      	beq.n	8004c22 <f_lseek+0xac>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	1e5a      	subs	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1e59      	subs	r1, r3, #1
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d30f      	bcc.n	8004c22 <f_lseek+0xac>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1e5a      	subs	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	425b      	negs	r3, r3
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	e022      	b.n	8004c68 <f_lseek+0xf2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	61bb      	str	r3, [r7, #24]
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d119      	bne.n	8004c62 <f_lseek+0xec>
					clst = create_chain(&fp->obj, 0);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2100      	movs	r1, #0
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fd ff36 	bl	8002aa4 <create_chain>
 8004c38:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d104      	bne.n	8004c4a <f_lseek+0xd4>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	745a      	strb	r2, [r3, #17]
 8004c46:	2302      	movs	r3, #2
 8004c48:	e0be      	b.n	8004dc8 <f_lseek+0x252>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d104      	bne.n	8004c5c <f_lseek+0xe6>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	745a      	strb	r2, [r3, #17]
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0b5      	b.n	8004dc8 <f_lseek+0x252>
					fp->obj.sclust = clst;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d05d      	beq.n	8004d2a <f_lseek+0x1b4>
				while (ofs > bcs) {						/* Cluster following loop */
 8004c6e:	e03a      	b.n	8004ce6 <f_lseek+0x170>
					ofs -= bcs; fp->fptr += bcs;
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	441a      	add	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7c1b      	ldrb	r3, [r3, #16]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <f_lseek+0x132>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69b9      	ldr	r1, [r7, #24]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fd ff05 	bl	8002aa4 <create_chain>
 8004c9a:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <f_lseek+0x13e>
							ofs = 0; break;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	e022      	b.n	8004cee <f_lseek+0x178>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69b9      	ldr	r1, [r7, #24]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fd fd08 	bl	80026c2 <get_fat>
 8004cb2:	61b8      	str	r0, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cba:	d104      	bne.n	8004cc6 <f_lseek+0x150>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	745a      	strb	r2, [r3, #17]
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e080      	b.n	8004dc8 <f_lseek+0x252>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d904      	bls.n	8004cd6 <f_lseek+0x160>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d304      	bcc.n	8004ce0 <f_lseek+0x16a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	745a      	strb	r2, [r3, #17]
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e073      	b.n	8004dc8 <f_lseek+0x252>
					fp->clust = clst;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d8c0      	bhi.n	8004c70 <f_lseek+0xfa>
				}
				fp->fptr += ofs;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	441a      	add	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d012      	beq.n	8004d2a <f_lseek+0x1b4>
					nsect = clst2sect(fs, clst);	/* Current sector */
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	69b9      	ldr	r1, [r7, #24]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fd fcbb 	bl	8002684 <clst2sect>
 8004d0e:	6178      	str	r0, [r7, #20]
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <f_lseek+0x1aa>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	745a      	strb	r2, [r3, #17]
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e053      	b.n	8004dc8 <f_lseek+0x252>
					nsect += (DWORD)(ofs / SS(fs));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	0a5b      	lsrs	r3, r3, #9
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4413      	add	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d90a      	bls.n	8004d4c <f_lseek+0x1d6>
			fp->obj.objsize = fp->fptr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	7c1b      	ldrb	r3, [r3, #16]
 8004d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	741a      	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d036      	beq.n	8004dc6 <f_lseek+0x250>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d031      	beq.n	8004dc6 <f_lseek+0x250>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	7c1b      	ldrb	r3, [r3, #16]
 8004d66:	b25b      	sxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	da18      	bge.n	8004d9e <f_lseek+0x228>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	7858      	ldrb	r0, [r3, #1]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f7fc ffd0 	bl	8001d20 <disk_write>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d004      	beq.n	8004d90 <f_lseek+0x21a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	745a      	strb	r2, [r3, #17]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e01b      	b.n	8004dc8 <f_lseek+0x252>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	7c1b      	ldrb	r3, [r3, #16]
 8004d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	741a      	strb	r2, [r3, #16]
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	7858      	ldrb	r0, [r3, #1]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8004da8:	2301      	movs	r3, #1
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	f7fc ff4e 	bl	8001c4c <disk_read>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <f_lseek+0x24a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	745a      	strb	r2, [r3, #17]
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e003      	b.n	8004dc8 <f_lseek+0x252>
#endif
			fp->sect = nsect;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
 8004dc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <ff_uni2oem>:
#if FF_CODE_PAGE >= 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b08b      	sub	sp, #44	; 0x2c
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
	const WCHAR *p;
	WCHAR c = 0, uc;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	84fb      	strh	r3, [r7, #38]	; 0x26
	UINT i = 0, n, li, hi;
 8004de0:	2300      	movs	r3, #0
 8004de2:	623b      	str	r3, [r7, #32]


	if (uni < 0x80) {	/* ASCII? */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b7f      	cmp	r3, #127	; 0x7f
 8004de8:	d802      	bhi.n	8004df0 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004dee:	e041      	b.n	8004e74 <ff_uni2oem+0xa4>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df6:	d23d      	bcs.n	8004e74 <ff_uni2oem+0xa4>
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
 8004dfe:	d139      	bne.n	8004e74 <ff_uni2oem+0xa4>
			uc = (WCHAR)uni;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	827b      	strh	r3, [r7, #18]
			p = CVTBL(uni2oem, FF_CODE_PAGE);
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <ff_uni2oem+0xb4>)
 8004e06:	60fb      	str	r3, [r7, #12]
			hi = sizeof CVTBL(uni2oem, FF_CODE_PAGE) / 4 - 1;
 8004e08:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 8004e0c:	617b      	str	r3, [r7, #20]
			li = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
			for (n = 16; n; n--) {
 8004e12:	2310      	movs	r3, #16
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	e01e      	b.n	8004e56 <ff_uni2oem+0x86>
				i = li + (hi - li) / 2;
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4413      	add	r3, r2
 8004e24:	623b      	str	r3, [r7, #32]
				if (uc == p[i * 2]) break;
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	8a7a      	ldrh	r2, [r7, #18]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d013      	beq.n	8004e5e <ff_uni2oem+0x8e>
				if (uc > p[i * 2]) {
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	8a7a      	ldrh	r2, [r7, #18]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d902      	bls.n	8004e4c <ff_uni2oem+0x7c>
					li = i;
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	e001      	b.n	8004e50 <ff_uni2oem+0x80>
				} else {
					hi = i;
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
			for (n = 16; n; n--) {
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1dd      	bne.n	8004e18 <ff_uni2oem+0x48>
 8004e5c:	e000      	b.n	8004e60 <ff_uni2oem+0x90>
				if (uc == p[i * 2]) break;
 8004e5e:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d006      	beq.n	8004e74 <ff_uni2oem+0xa4>
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
	}

	return c;
 8004e74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	372c      	adds	r7, #44	; 0x2c
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	08008c14 	.word	0x08008c14

08004e88 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b089      	sub	sp, #36	; 0x24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	460a      	mov	r2, r1
 8004e92:	80fb      	strh	r3, [r7, #6]
 8004e94:	4613      	mov	r3, r2
 8004e96:	80bb      	strh	r3, [r7, #4]
	const WCHAR *p;
	WCHAR c = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	83fb      	strh	r3, [r7, #30]
	UINT i = 0, n, li, hi;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]


	if (oem < 0x80) {	/* ASCII? */
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea4:	d802      	bhi.n	8004eac <ff_oem2uni+0x24>
		c = oem;
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	83fb      	strh	r3, [r7, #30]
 8004eaa:	e03b      	b.n	8004f24 <ff_oem2uni+0x9c>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it valid code page? */
 8004eac:	88bb      	ldrh	r3, [r7, #4]
 8004eae:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
 8004eb2:	d137      	bne.n	8004f24 <ff_oem2uni+0x9c>
			p = CVTBL(oem2uni, FF_CODE_PAGE);
 8004eb4:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <ff_oem2uni+0xac>)
 8004eb6:	60bb      	str	r3, [r7, #8]
			hi = sizeof CVTBL(oem2uni, FF_CODE_PAGE) / 4 - 1;
 8004eb8:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 8004ebc:	60fb      	str	r3, [r7, #12]
			li = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	613b      	str	r3, [r7, #16]
			for (n = 16; n; n--) {
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	e01e      	b.n	8004f06 <ff_oem2uni+0x7e>
				i = li + (hi - li) / 2;
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
				if (oem == p[i * 2]) break;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	88fa      	ldrh	r2, [r7, #6]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d013      	beq.n	8004f0e <ff_oem2uni+0x86>
				if (oem > p[i * 2]) {
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d902      	bls.n	8004efc <ff_oem2uni+0x74>
					li = i;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	e001      	b.n	8004f00 <ff_oem2uni+0x78>
				} else {
					hi = i;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	60fb      	str	r3, [r7, #12]
			for (n = 16; n; n--) {
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1dd      	bne.n	8004ec8 <ff_oem2uni+0x40>
 8004f0c:	e000      	b.n	8004f10 <ff_oem2uni+0x88>
				if (oem == p[i * 2]) break;
 8004f0e:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <ff_oem2uni+0x9c>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	83fb      	strh	r3, [r7, #30]
		}
	}

	return c;
 8004f24:	8bfb      	ldrh	r3, [r7, #30]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3724      	adds	r7, #36	; 0x24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	0800ff8c 	.word	0x0800ff8c

08004f38 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f46:	d27d      	bcs.n	8005044 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8004f4c:	8a7b      	ldrh	r3, [r7, #18]
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f52:	d201      	bcs.n	8004f58 <ff_wtoupper+0x20>
 8004f54:	4b3f      	ldr	r3, [pc, #252]	; (8005054 <ff_wtoupper+0x11c>)
 8004f56:	e000      	b.n	8004f5a <ff_wtoupper+0x22>
 8004f58:	4b3f      	ldr	r3, [pc, #252]	; (8005058 <ff_wtoupper+0x120>)
 8004f5a:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	1c9a      	adds	r2, r3, #2
 8004f60:	617a      	str	r2, [r7, #20]
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8004f66:	8a3b      	ldrh	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d069      	beq.n	8005040 <ff_wtoupper+0x108>
 8004f6c:	8a7a      	ldrh	r2, [r7, #18]
 8004f6e:	8a3b      	ldrh	r3, [r7, #16]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d365      	bcc.n	8005040 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	1c9a      	adds	r2, r3, #2
 8004f78:	617a      	str	r2, [r7, #20]
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	81fb      	strh	r3, [r7, #14]
 8004f7e:	89fb      	ldrh	r3, [r7, #14]
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	81bb      	strh	r3, [r7, #12]
 8004f84:	89fb      	ldrh	r3, [r7, #14]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 8004f8a:	8a7a      	ldrh	r2, [r7, #18]
 8004f8c:	8a39      	ldrh	r1, [r7, #16]
 8004f8e:	89fb      	ldrh	r3, [r7, #14]
 8004f90:	440b      	add	r3, r1
 8004f92:	429a      	cmp	r2, r3
 8004f94:	da4a      	bge.n	800502c <ff_wtoupper+0xf4>
				switch (cmd) {
 8004f96:	89bb      	ldrh	r3, [r7, #12]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d850      	bhi.n	800503e <ff_wtoupper+0x106>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <ff_wtoupper+0x6c>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fdb 	.word	0x08004fdb
 8004fac:	08004ff1 	.word	0x08004ff1
 8004fb0:	08004ff9 	.word	0x08004ff9
 8004fb4:	08005001 	.word	0x08005001
 8004fb8:	08005009 	.word	0x08005009
 8004fbc:	08005011 	.word	0x08005011
 8004fc0:	08005019 	.word	0x08005019
 8004fc4:	08005021 	.word	0x08005021
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8004fc8:	8a7a      	ldrh	r2, [r7, #18]
 8004fca:	8a3b      	ldrh	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	827b      	strh	r3, [r7, #18]
 8004fd8:	e027      	b.n	800502a <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8004fda:	8a7a      	ldrh	r2, [r7, #18]
 8004fdc:	8a3b      	ldrh	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8a7a      	ldrh	r2, [r7, #18]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	827b      	strh	r3, [r7, #18]
 8004fee:	e01c      	b.n	800502a <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 8004ff0:	8a7b      	ldrh	r3, [r7, #18]
 8004ff2:	3b10      	subs	r3, #16
 8004ff4:	827b      	strh	r3, [r7, #18]
 8004ff6:	e018      	b.n	800502a <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8004ff8:	8a7b      	ldrh	r3, [r7, #18]
 8004ffa:	3b20      	subs	r3, #32
 8004ffc:	827b      	strh	r3, [r7, #18]
 8004ffe:	e014      	b.n	800502a <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8005000:	8a7b      	ldrh	r3, [r7, #18]
 8005002:	3b30      	subs	r3, #48	; 0x30
 8005004:	827b      	strh	r3, [r7, #18]
 8005006:	e010      	b.n	800502a <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8005008:	8a7b      	ldrh	r3, [r7, #18]
 800500a:	3b1a      	subs	r3, #26
 800500c:	827b      	strh	r3, [r7, #18]
 800500e:	e00c      	b.n	800502a <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 8005010:	8a7b      	ldrh	r3, [r7, #18]
 8005012:	3308      	adds	r3, #8
 8005014:	827b      	strh	r3, [r7, #18]
 8005016:	e008      	b.n	800502a <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 8005018:	8a7b      	ldrh	r3, [r7, #18]
 800501a:	3b50      	subs	r3, #80	; 0x50
 800501c:	827b      	strh	r3, [r7, #18]
 800501e:	e004      	b.n	800502a <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8005020:	8a7b      	ldrh	r3, [r7, #18]
 8005022:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8005026:	827b      	strh	r3, [r7, #18]
 8005028:	bf00      	nop
				}
				break;
 800502a:	e008      	b.n	800503e <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 800502c:	89bb      	ldrh	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d194      	bne.n	8004f5c <ff_wtoupper+0x24>
 8005032:	89fb      	ldrh	r3, [r7, #14]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4413      	add	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 800503c:	e78e      	b.n	8004f5c <ff_wtoupper+0x24>
				break;
 800503e:	bf00      	nop
		}
		uni = uc;
 8005040:	8a7b      	ldrh	r3, [r7, #18]
 8005042:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8005044:	687b      	ldr	r3, [r7, #4]
}
 8005046:	4618      	mov	r0, r3
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	08017304 	.word	0x08017304
 8005058:	080174f8 	.word	0x080174f8

0800505c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800505c:	b5b0      	push	{r4, r5, r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800506a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800506e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8005072:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005076:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8005078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800507c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800507e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800508c:	f107 0310 	add.w	r3, r7, #16
 8005090:	4618      	mov	r0, r3
 8005092:	f000 f80e 	bl	80050b2 <Lcd_init>

	return lcd;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	461d      	mov	r5, r3
 800509a:	f107 0410 	add.w	r4, r7, #16
 800509e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	3728      	adds	r7, #40	; 0x28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bdb0      	pop	{r4, r5, r7, pc}

080050b2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
	// test
	if(lcd->mode == LCD_4_BIT_MODE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	7d9b      	ldrb	r3, [r3, #22]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d112      	bne.n	80050e8 <Lcd_init+0x36>
	{
			lcd_write_command(lcd, 0x33);
 80050c2:	2133      	movs	r1, #51	; 0x33
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f867 	bl	8005198 <lcd_write_command>
			DELAY(1);
 80050ca:	2001      	movs	r0, #1
 80050cc:	f000 feec 	bl	8005ea8 <HAL_Delay>
			lcd_write_command(lcd, 0x32);
 80050d0:	2132      	movs	r1, #50	; 0x32
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f860 	bl	8005198 <lcd_write_command>
			DELAY(1);
 80050d8:	2001      	movs	r0, #1
 80050da:	f000 fee5 	bl	8005ea8 <HAL_Delay>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80050de:	2128      	movs	r1, #40	; 0x28
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f859 	bl	8005198 <lcd_write_command>
 80050e6:	e003      	b.n	80050f0 <Lcd_init+0x3e>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80050e8:	2138      	movs	r1, #56	; 0x38
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f854 	bl	8005198 <lcd_write_command>

	DELAY(1);
 80050f0:	2001      	movs	r0, #1
 80050f2:	f000 fed9 	bl	8005ea8 <HAL_Delay>

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80050f6:	2101      	movs	r1, #1
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f84d 	bl	8005198 <lcd_write_command>
	DELAY(1);
 80050fe:	2001      	movs	r0, #1
 8005100:	f000 fed2 	bl	8005ea8 <HAL_Delay>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8005104:	210c      	movs	r1, #12
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f846 	bl	8005198 <lcd_write_command>
	DELAY(1);
 800510c:	2001      	movs	r0, #1
 800510e:	f000 fecb 	bl	8005ea8 <HAL_Delay>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8005112:	2106      	movs	r1, #6
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f83f 	bl	8005198 <lcd_write_command>
	DELAY(1);
 800511a:	2001      	movs	r0, #1
 800511c:	f000 fec4 	bl	8005ea8 <HAL_Delay>
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
 8005136:	e00a      	b.n	800514e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	4413      	add	r3, r2
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f856 	bl	80051f4 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	3301      	adds	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
 800514e:	7bfc      	ldrb	r4, [r7, #15]
 8005150:	6838      	ldr	r0, [r7, #0]
 8005152:	f7fb f839 	bl	80001c8 <strlen>
 8005156:	4603      	mov	r3, r0
 8005158:	429c      	cmp	r4, r3
 800515a:	d3ed      	bcc.n	8005138 <Lcd_string+0x10>
	}
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bd90      	pop	{r4, r7, pc}

08005164 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	70fb      	strb	r3, [r7, #3]
 8005170:	4613      	mov	r3, r2
 8005172:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	4a07      	ldr	r2, [pc, #28]	; (8005194 <Lcd_cursor+0x30>)
 8005178:	5cd2      	ldrb	r2, [r2, r3]
 800517a:	78bb      	ldrb	r3, [r7, #2]
 800517c:	4413      	add	r3, r2
 800517e:	b2db      	uxtb	r3, r3
 8005180:	3b80      	subs	r3, #128	; 0x80
 8005182:	b2db      	uxtb	r3, r3
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f806 	bl	8005198 <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	080175b4 	.word	0x080175b4

08005198 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6898      	ldr	r0, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	899b      	ldrh	r3, [r3, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	4619      	mov	r1, r3
 80051b0:	f001 fe2e 	bl	8006e10 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	7d9b      	ldrb	r3, [r3, #22]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d111      	bne.n	80051e0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2204      	movs	r2, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f842 	bl	8005250 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2204      	movs	r2, #4
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f839 	bl	8005250 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80051de:	e005      	b.n	80051ec <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	2208      	movs	r2, #8
 80051e4:	4619      	mov	r1, r3
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f832 	bl	8005250 <lcd_write>
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6898      	ldr	r0, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	899b      	ldrh	r3, [r3, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	4619      	mov	r1, r3
 800520c:	f001 fe00 	bl	8006e10 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	7d9b      	ldrb	r3, [r3, #22]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d111      	bne.n	800523c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	091b      	lsrs	r3, r3, #4
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2204      	movs	r2, #4
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f814 	bl	8005250 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2204      	movs	r2, #4
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f80b 	bl	8005250 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800523a:	e005      	b.n	8005248 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	2208      	movs	r2, #8
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f804 	bl	8005250 <lcd_write>
}
 8005248:	bf00      	nop
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	70fb      	strb	r3, [r7, #3]
 800525c:	4613      	mov	r3, r2
 800525e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]
 8005264:	e019      	b.n	800529a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4413      	add	r3, r2
 800527c:	8819      	ldrh	r1, [r3, #0]
 800527e:	78fa      	ldrb	r2, [r7, #3]
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	fa42 f303 	asr.w	r3, r2, r3
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	f001 fdbe 	bl	8006e10 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	3301      	adds	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
 800529a:	7bfa      	ldrb	r2, [r7, #15]
 800529c:	78bb      	ldrb	r3, [r7, #2]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d3e1      	bcc.n	8005266 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6918      	ldr	r0, [r3, #16]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8a9b      	ldrh	r3, [r3, #20]
 80052aa:	2201      	movs	r2, #1
 80052ac:	4619      	mov	r1, r3
 80052ae:	f001 fdaf 	bl	8006e10 <HAL_GPIO_WritePin>
	// test
	// no ja wiem wiem ze timery i te sprawy ale
	// NJE CHCE MI SIE
	// a to dziala i sa niskie opoznienia!
	// niby jest 62.5 us (> 53.3 us) wiec jest git!
	for (int i = 0; i < 500; ++i);
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	e002      	b.n	80052be <lcd_write+0x6e>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80052c4:	dbf8      	blt.n	80052b8 <lcd_write+0x68>

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6918      	ldr	r0, [r3, #16]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8a9b      	ldrh	r3, [r3, #20]
 80052ce:	2200      	movs	r2, #0
 80052d0:	4619      	mov	r1, r3
 80052d2:	f001 fd9d 	bl	8006e10 <HAL_GPIO_WritePin>
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a08      	ldr	r2, [pc, #32]	; (8005310 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d106      	bne.n	8005300 <HAL_TIM_PeriodElapsedCallback+0x20>
		stopTimer(&htim3);
 80052f2:	4808      	ldr	r0, [pc, #32]	; (8005314 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80052f4:	f7fb f911 	bl	800051a <stopTimer>
		onButton(&recorder);
 80052f8:	4807      	ldr	r0, [pc, #28]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80052fa:	f7fb fa21 	bl	8000740 <onButton>
		return;
 80052fe:	e003      	b.n	8005308 <HAL_TIM_PeriodElapsedCallback+0x28>
	}

	onTimerUpdate(&recorder, htim);
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4805      	ldr	r0, [pc, #20]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8005304:	f7fb fa0e 	bl	8000724 <onTimerUpdate>
}
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40000400 	.word	0x40000400
 8005314:	200107c8 	.word	0x200107c8
 8005318:	200002f0 	.word	0x200002f0

0800531c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	80fb      	strh	r3, [r7, #6]
	setTimer(&htim3, 1000, 839);
 8005326:	f240 3247 	movw	r2, #839	; 0x347
 800532a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800532e:	4805      	ldr	r0, [pc, #20]	; (8005344 <HAL_GPIO_EXTI_Callback+0x28>)
 8005330:	f7fb f8dd 	bl	80004ee <setTimer>
	startTimer(&htim3);
 8005334:	4803      	ldr	r0, [pc, #12]	; (8005344 <HAL_GPIO_EXTI_Callback+0x28>)
 8005336:	f7fb f8cf 	bl	80004d8 <startTimer>
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	200107c8 	.word	0x200107c8

08005348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005348:	b5b0      	push	{r4, r5, r7, lr}
 800534a:	b090      	sub	sp, #64	; 0x40
 800534c:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800534e:	f000 fd39 	bl	8005dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005352:	f000 f89d 	bl	8005490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005356:	f000 faa1 	bl	800589c <MX_GPIO_Init>
  MX_TIM4_Init();
 800535a:	f000 fa51 	bl	8005800 <MX_TIM4_Init>
  MX_DAC_Init();
 800535e:	f000 f953 	bl	8005608 <MX_DAC_Init>
  MX_TIM3_Init();
 8005362:	f000 f9ff 	bl	8005764 <MX_TIM3_Init>
  MX_ADC1_Init();
 8005366:	f000 f8fd 	bl	8005564 <MX_ADC1_Init>
  MX_SPI2_Init();
 800536a:	f000 f977 	bl	800565c <MX_SPI2_Init>
  MX_TIM2_Init();
 800536e:	f000 f9ab 	bl	80056c8 <MX_TIM2_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  recorder.soundTimer = &htim4;
 8005372:	4b39      	ldr	r3, [pc, #228]	; (8005458 <main+0x110>)
 8005374:	4a39      	ldr	r2, [pc, #228]	; (800545c <main+0x114>)
 8005376:	601a      	str	r2, [r3, #0]
  recorder.fileTimer = &htim2;
 8005378:	4b37      	ldr	r3, [pc, #220]	; (8005458 <main+0x110>)
 800537a:	4a39      	ldr	r2, [pc, #228]	; (8005460 <main+0x118>)
 800537c:	605a      	str	r2, [r3, #4]
  recorder.speaker = &hdac;
 800537e:	4b36      	ldr	r3, [pc, #216]	; (8005458 <main+0x110>)
 8005380:	4a38      	ldr	r2, [pc, #224]	; (8005464 <main+0x11c>)
 8005382:	609a      	str	r2, [r3, #8]
  recorder.microphone = &hadc1;
 8005384:	4b34      	ldr	r3, [pc, #208]	; (8005458 <main+0x110>)
 8005386:	4a38      	ldr	r2, [pc, #224]	; (8005468 <main+0x120>)
 8005388:	60da      	str	r2, [r3, #12]

  Lcd_PortType dataPorts[] = {
 800538a:	4b38      	ldr	r3, [pc, #224]	; (800546c <main+0x124>)
 800538c:	f107 0420 	add.w	r4, r7, #32
 8005390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005392:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOD, GPIOD, GPIOD, GPIOD
  };

  Lcd_PinType dataPins[] = {
 8005396:	4a36      	ldr	r2, [pc, #216]	; (8005470 <main+0x128>)
 8005398:	f107 0318 	add.w	r3, r7, #24
 800539c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053a0:	e883 0003 	stmia.w	r3, {r0, r1}
		  GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6
  };

  lcd = Lcd_create(dataPorts, dataPins,
 80053a4:	4c33      	ldr	r4, [pc, #204]	; (8005474 <main+0x12c>)
 80053a6:	4638      	mov	r0, r7
 80053a8:	f107 0218 	add.w	r2, r7, #24
 80053ac:	f107 0120 	add.w	r1, r7, #32
 80053b0:	2300      	movs	r3, #0
 80053b2:	9303      	str	r3, [sp, #12]
 80053b4:	2304      	movs	r3, #4
 80053b6:	9302      	str	r3, [sp, #8]
 80053b8:	4b2f      	ldr	r3, [pc, #188]	; (8005478 <main+0x130>)
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	2302      	movs	r3, #2
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	4b2d      	ldr	r3, [pc, #180]	; (8005478 <main+0x130>)
 80053c2:	f7ff fe4b 	bl	800505c <Lcd_create>
 80053c6:	4625      	mov	r5, r4
 80053c8:	463c      	mov	r4, r7
 80053ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053d2:	e885 0003 	stmia.w	r5, {r0, r1}
		  GPIOD, GPIO_PIN_1, GPIOD, GPIO_PIN_2,
		  LCD_4_BIT_MODE);

  recorder.lcd = &lcd;
 80053d6:	4b20      	ldr	r3, [pc, #128]	; (8005458 <main+0x110>)
 80053d8:	4a26      	ldr	r2, [pc, #152]	; (8005474 <main+0x12c>)
 80053da:	611a      	str	r2, [r3, #16]
  if (f_mount(&recorder.fatFs, "", 0) == FR_OK) {
 80053dc:	2200      	movs	r2, #0
 80053de:	4927      	ldr	r1, [pc, #156]	; (800547c <main+0x134>)
 80053e0:	4827      	ldr	r0, [pc, #156]	; (8005480 <main+0x138>)
 80053e2:	f7fe fecb 	bl	800417c <f_mount>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10d      	bne.n	8005408 <main+0xc0>
		setLcdCursor(&recorder, 1, 0);
 80053ec:	2200      	movs	r2, #0
 80053ee:	2101      	movs	r1, #1
 80053f0:	4819      	ldr	r0, [pc, #100]	; (8005458 <main+0x110>)
 80053f2:	f7fb f8de 	bl	80005b2 <setLcdCursor>
		setLcdText(&recorder, "Ok                  ");
 80053f6:	4923      	ldr	r1, [pc, #140]	; (8005484 <main+0x13c>)
 80053f8:	4817      	ldr	r0, [pc, #92]	; (8005458 <main+0x110>)
 80053fa:	f7fb f8ed 	bl	80005d8 <setLcdText>
		HAL_Delay(2000);
 80053fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005402:	f000 fd51 	bl	8005ea8 <HAL_Delay>
 8005406:	e00c      	b.n	8005422 <main+0xda>
  }
  else {
		setLcdCursor(&recorder, 1, 0);
 8005408:	2200      	movs	r2, #0
 800540a:	2101      	movs	r1, #1
 800540c:	4812      	ldr	r0, [pc, #72]	; (8005458 <main+0x110>)
 800540e:	f7fb f8d0 	bl	80005b2 <setLcdCursor>
		setLcdText(&recorder, "Fail                ");
 8005412:	491d      	ldr	r1, [pc, #116]	; (8005488 <main+0x140>)
 8005414:	4810      	ldr	r0, [pc, #64]	; (8005458 <main+0x110>)
 8005416:	f7fb f8df 	bl	80005d8 <setLcdText>
		HAL_Delay(2000);
 800541a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800541e:	f000 fd43 	bl	8005ea8 <HAL_Delay>
  }


  changeToStateWaiting(&recorder);
 8005422:	480d      	ldr	r0, [pc, #52]	; (8005458 <main+0x110>)
 8005424:	f7fb f906 	bl	8000634 <changeToStateWaiting>

  // fix for first instant, non-delayed PeriodElapsed
  // interrupt that happens for some reasons
  setTimer(&htim3, 1000, 839);
 8005428:	f240 3247 	movw	r2, #839	; 0x347
 800542c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005430:	4816      	ldr	r0, [pc, #88]	; (800548c <main+0x144>)
 8005432:	f7fb f85c 	bl	80004ee <setTimer>
  startTimer(&htim3);
 8005436:	4815      	ldr	r0, [pc, #84]	; (800548c <main+0x144>)
 8005438:	f7fb f84e 	bl	80004d8 <startTimer>
  stopTimer(&htim3);
 800543c:	4813      	ldr	r0, [pc, #76]	; (800548c <main+0x144>)
 800543e:	f7fb f86c 	bl	800051a <stopTimer>

  stopTimer(&htim4);
 8005442:	4806      	ldr	r0, [pc, #24]	; (800545c <main+0x114>)
 8005444:	f7fb f869 	bl	800051a <stopTimer>
  stopTimer(&htim2);
 8005448:	4805      	ldr	r0, [pc, #20]	; (8005460 <main+0x118>)
 800544a:	f7fb f866 	bl	800051a <stopTimer>

  while (1)
  {
	  onUpdate(&recorder);
 800544e:	4802      	ldr	r0, [pc, #8]	; (8005458 <main+0x110>)
 8005450:	f7fb f95c 	bl	800070c <onUpdate>
 8005454:	e7fb      	b.n	800544e <main+0x106>
 8005456:	bf00      	nop
 8005458:	200002f0 	.word	0x200002f0
 800545c:	200002b0 	.word	0x200002b0
 8005460:	20010864 	.word	0x20010864
 8005464:	20010850 	.word	0x20010850
 8005468:	20010808 	.word	0x20010808
 800546c:	08008bec 	.word	0x08008bec
 8005470:	08008bfc 	.word	0x08008bfc
 8005474:	20000240 	.word	0x20000240
 8005478:	40020c00 	.word	0x40020c00
 800547c:	08008bb8 	.word	0x08008bb8
 8005480:	20000328 	.word	0x20000328
 8005484:	08008bbc 	.word	0x08008bbc
 8005488:	08008bd4 	.word	0x08008bd4
 800548c:	200107c8 	.word	0x200107c8

08005490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b094      	sub	sp, #80	; 0x50
 8005494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005496:	f107 0320 	add.w	r3, r7, #32
 800549a:	2230      	movs	r2, #48	; 0x30
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f003 f95a 	bl	8008758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054a4:	f107 030c 	add.w	r3, r7, #12
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	609a      	str	r2, [r3, #8]
 80054b0:	60da      	str	r2, [r3, #12]
 80054b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80054b4:	2300      	movs	r3, #0
 80054b6:	60bb      	str	r3, [r7, #8]
 80054b8:	4b28      	ldr	r3, [pc, #160]	; (800555c <SystemClock_Config+0xcc>)
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	4a27      	ldr	r2, [pc, #156]	; (800555c <SystemClock_Config+0xcc>)
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c2:	6413      	str	r3, [r2, #64]	; 0x40
 80054c4:	4b25      	ldr	r3, [pc, #148]	; (800555c <SystemClock_Config+0xcc>)
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80054d0:	2300      	movs	r3, #0
 80054d2:	607b      	str	r3, [r7, #4]
 80054d4:	4b22      	ldr	r3, [pc, #136]	; (8005560 <SystemClock_Config+0xd0>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a21      	ldr	r2, [pc, #132]	; (8005560 <SystemClock_Config+0xd0>)
 80054da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b1f      	ldr	r3, [pc, #124]	; (8005560 <SystemClock_Config+0xd0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054f6:	2302      	movs	r3, #2
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005500:	2304      	movs	r3, #4
 8005502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005504:	23a8      	movs	r3, #168	; 0xa8
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005508:	2302      	movs	r3, #2
 800550a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800550c:	2304      	movs	r3, #4
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005510:	f107 0320 	add.w	r3, r7, #32
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fcad 	bl	8006e74 <HAL_RCC_OscConfig>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005520:	f000 fa58 	bl	80059d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005524:	230f      	movs	r3, #15
 8005526:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005528:	2302      	movs	r3, #2
 800552a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005530:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005534:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800553a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800553c:	f107 030c 	add.w	r3, r7, #12
 8005540:	2105      	movs	r1, #5
 8005542:	4618      	mov	r0, r3
 8005544:	f001 ff06 	bl	8007354 <HAL_RCC_ClockConfig>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800554e:	f000 fa41 	bl	80059d4 <Error_Handler>
  }
}
 8005552:	bf00      	nop
 8005554:	3750      	adds	r7, #80	; 0x50
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800
 8005560:	40007000 	.word	0x40007000

08005564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800556a:	463b      	mov	r3, r7
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	605a      	str	r2, [r3, #4]
 8005572:	609a      	str	r2, [r3, #8]
 8005574:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005576:	4b21      	ldr	r3, [pc, #132]	; (80055fc <MX_ADC1_Init+0x98>)
 8005578:	4a21      	ldr	r2, [pc, #132]	; (8005600 <MX_ADC1_Init+0x9c>)
 800557a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800557c:	4b1f      	ldr	r3, [pc, #124]	; (80055fc <MX_ADC1_Init+0x98>)
 800557e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005582:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005584:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <MX_ADC1_Init+0x98>)
 8005586:	2200      	movs	r2, #0
 8005588:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800558a:	4b1c      	ldr	r3, [pc, #112]	; (80055fc <MX_ADC1_Init+0x98>)
 800558c:	2200      	movs	r2, #0
 800558e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005590:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <MX_ADC1_Init+0x98>)
 8005592:	2200      	movs	r2, #0
 8005594:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005596:	4b19      	ldr	r3, [pc, #100]	; (80055fc <MX_ADC1_Init+0x98>)
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800559e:	4b17      	ldr	r3, [pc, #92]	; (80055fc <MX_ADC1_Init+0x98>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <MX_ADC1_Init+0x98>)
 80055a6:	4a17      	ldr	r2, [pc, #92]	; (8005604 <MX_ADC1_Init+0xa0>)
 80055a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80055aa:	4b14      	ldr	r3, [pc, #80]	; (80055fc <MX_ADC1_Init+0x98>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <MX_ADC1_Init+0x98>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <MX_ADC1_Init+0x98>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80055be:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <MX_ADC1_Init+0x98>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80055c4:	480d      	ldr	r0, [pc, #52]	; (80055fc <MX_ADC1_Init+0x98>)
 80055c6:	f000 fc91 	bl	8005eec <HAL_ADC_Init>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80055d0:	f000 fa00 	bl	80059d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80055d4:	2301      	movs	r3, #1
 80055d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80055d8:	2301      	movs	r3, #1
 80055da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055e0:	463b      	mov	r3, r7
 80055e2:	4619      	mov	r1, r3
 80055e4:	4805      	ldr	r0, [pc, #20]	; (80055fc <MX_ADC1_Init+0x98>)
 80055e6:	f000 fe1d 	bl	8006224 <HAL_ADC_ConfigChannel>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80055f0:	f000 f9f0 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80055f4:	bf00      	nop
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20010808 	.word	0x20010808
 8005600:	40012000 	.word	0x40012000
 8005604:	0f000001 	.word	0x0f000001

08005608 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800560e:	463b      	mov	r3, r7
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8005616:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <MX_DAC_Init+0x4c>)
 8005618:	4a0f      	ldr	r2, [pc, #60]	; (8005658 <MX_DAC_Init+0x50>)
 800561a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800561c:	480d      	ldr	r0, [pc, #52]	; (8005654 <MX_DAC_Init+0x4c>)
 800561e:	f001 f930 	bl	8006882 <HAL_DAC_Init>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8005628:	f000 f9d4 	bl	80059d4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800562c:	2300      	movs	r3, #0
 800562e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005630:	2300      	movs	r3, #0
 8005632:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005634:	463b      	mov	r3, r7
 8005636:	2200      	movs	r2, #0
 8005638:	4619      	mov	r1, r3
 800563a:	4806      	ldr	r0, [pc, #24]	; (8005654 <MX_DAC_Init+0x4c>)
 800563c:	f001 f9c4 	bl	80069c8 <HAL_DAC_ConfigChannel>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8005646:	f000 f9c5 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20010850 	.word	0x20010850
 8005658:	40007400 	.word	0x40007400

0800565c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005660:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <MX_SPI2_Init+0x64>)
 8005662:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <MX_SPI2_Init+0x68>)
 8005664:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005666:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <MX_SPI2_Init+0x64>)
 8005668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800566c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800566e:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <MX_SPI2_Init+0x64>)
 8005670:	2200      	movs	r2, #0
 8005672:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005674:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <MX_SPI2_Init+0x64>)
 8005676:	2200      	movs	r2, #0
 8005678:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <MX_SPI2_Init+0x64>)
 800567c:	2200      	movs	r2, #0
 800567e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005680:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <MX_SPI2_Init+0x64>)
 8005682:	2200      	movs	r2, #0
 8005684:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005686:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <MX_SPI2_Init+0x64>)
 8005688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800568e:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <MX_SPI2_Init+0x64>)
 8005690:	2218      	movs	r2, #24
 8005692:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005694:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <MX_SPI2_Init+0x64>)
 8005696:	2200      	movs	r2, #0
 8005698:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800569a:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <MX_SPI2_Init+0x64>)
 800569c:	2200      	movs	r2, #0
 800569e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a0:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <MX_SPI2_Init+0x64>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <MX_SPI2_Init+0x64>)
 80056a8:	220a      	movs	r2, #10
 80056aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80056ac:	4804      	ldr	r0, [pc, #16]	; (80056c0 <MX_SPI2_Init+0x64>)
 80056ae:	f002 f80f 	bl	80076d0 <HAL_SPI_Init>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80056b8:	f000 f98c 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80056bc:	bf00      	nop
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000258 	.word	0x20000258
 80056c4:	40003800 	.word	0x40003800

080056c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056ce:	f107 0308 	add.w	r3, r7, #8
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	605a      	str	r2, [r3, #4]
 80056d8:	609a      	str	r2, [r3, #8]
 80056da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056dc:	463b      	mov	r3, r7
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80056e4:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <MX_TIM2_Init+0x98>)
 80056e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80056ec:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <MX_TIM2_Init+0x98>)
 80056ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056f4:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <MX_TIM2_Init+0x98>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839;
 80056fa:	4b19      	ldr	r3, [pc, #100]	; (8005760 <MX_TIM2_Init+0x98>)
 80056fc:	f240 3247 	movw	r2, #839	; 0x347
 8005700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005702:	4b17      	ldr	r3, [pc, #92]	; (8005760 <MX_TIM2_Init+0x98>)
 8005704:	2200      	movs	r2, #0
 8005706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005708:	4b15      	ldr	r3, [pc, #84]	; (8005760 <MX_TIM2_Init+0x98>)
 800570a:	2200      	movs	r2, #0
 800570c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800570e:	4814      	ldr	r0, [pc, #80]	; (8005760 <MX_TIM2_Init+0x98>)
 8005710:	f002 fbd2 	bl	8007eb8 <HAL_TIM_Base_Init>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800571a:	f000 f95b 	bl	80059d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800571e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	4619      	mov	r1, r3
 800572a:	480d      	ldr	r0, [pc, #52]	; (8005760 <MX_TIM2_Init+0x98>)
 800572c:	f002 fd46 	bl	80081bc <HAL_TIM_ConfigClockSource>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005736:	f000 f94d 	bl	80059d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800573a:	2300      	movs	r3, #0
 800573c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005742:	463b      	mov	r3, r7
 8005744:	4619      	mov	r1, r3
 8005746:	4806      	ldr	r0, [pc, #24]	; (8005760 <MX_TIM2_Init+0x98>)
 8005748:	f002 ff52 	bl	80085f0 <HAL_TIMEx_MasterConfigSynchronization>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005752:	f000 f93f 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20010864 	.word	0x20010864

08005764 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800576a:	f107 0308 	add.w	r3, r7, #8
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	609a      	str	r2, [r3, #8]
 8005776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005778:	463b      	mov	r3, r7
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005780:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <MX_TIM3_Init+0x94>)
 8005782:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <MX_TIM3_Init+0x98>)
 8005784:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8005786:	4b1c      	ldr	r3, [pc, #112]	; (80057f8 <MX_TIM3_Init+0x94>)
 8005788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800578c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800578e:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <MX_TIM3_Init+0x94>)
 8005790:	2200      	movs	r2, #0
 8005792:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 839;
 8005794:	4b18      	ldr	r3, [pc, #96]	; (80057f8 <MX_TIM3_Init+0x94>)
 8005796:	f240 3247 	movw	r2, #839	; 0x347
 800579a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <MX_TIM3_Init+0x94>)
 800579e:	2200      	movs	r2, #0
 80057a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057a2:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <MX_TIM3_Init+0x94>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80057a8:	4813      	ldr	r0, [pc, #76]	; (80057f8 <MX_TIM3_Init+0x94>)
 80057aa:	f002 fb85 	bl	8007eb8 <HAL_TIM_Base_Init>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80057b4:	f000 f90e 	bl	80059d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80057be:	f107 0308 	add.w	r3, r7, #8
 80057c2:	4619      	mov	r1, r3
 80057c4:	480c      	ldr	r0, [pc, #48]	; (80057f8 <MX_TIM3_Init+0x94>)
 80057c6:	f002 fcf9 	bl	80081bc <HAL_TIM_ConfigClockSource>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80057d0:	f000 f900 	bl	80059d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057d4:	2300      	movs	r3, #0
 80057d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057d8:	2300      	movs	r3, #0
 80057da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80057dc:	463b      	mov	r3, r7
 80057de:	4619      	mov	r1, r3
 80057e0:	4805      	ldr	r0, [pc, #20]	; (80057f8 <MX_TIM3_Init+0x94>)
 80057e2:	f002 ff05 	bl	80085f0 <HAL_TIMEx_MasterConfigSynchronization>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80057ec:	f000 f8f2 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80057f0:	bf00      	nop
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	200107c8 	.word	0x200107c8
 80057fc:	40000400 	.word	0x40000400

08005800 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005806:	f107 0308 	add.w	r3, r7, #8
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	605a      	str	r2, [r3, #4]
 8005810:	609a      	str	r2, [r3, #8]
 8005812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005814:	463b      	mov	r3, r7
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800581c:	4b1d      	ldr	r3, [pc, #116]	; (8005894 <MX_TIM4_Init+0x94>)
 800581e:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <MX_TIM4_Init+0x98>)
 8005820:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1049;
 8005822:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <MX_TIM4_Init+0x94>)
 8005824:	f240 4219 	movw	r2, #1049	; 0x419
 8005828:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800582a:	4b1a      	ldr	r3, [pc, #104]	; (8005894 <MX_TIM4_Init+0x94>)
 800582c:	2200      	movs	r2, #0
 800582e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4;
 8005830:	4b18      	ldr	r3, [pc, #96]	; (8005894 <MX_TIM4_Init+0x94>)
 8005832:	2204      	movs	r2, #4
 8005834:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005836:	4b17      	ldr	r3, [pc, #92]	; (8005894 <MX_TIM4_Init+0x94>)
 8005838:	2200      	movs	r2, #0
 800583a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800583c:	4b15      	ldr	r3, [pc, #84]	; (8005894 <MX_TIM4_Init+0x94>)
 800583e:	2200      	movs	r2, #0
 8005840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005842:	4814      	ldr	r0, [pc, #80]	; (8005894 <MX_TIM4_Init+0x94>)
 8005844:	f002 fb38 	bl	8007eb8 <HAL_TIM_Base_Init>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800584e:	f000 f8c1 	bl	80059d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005858:	f107 0308 	add.w	r3, r7, #8
 800585c:	4619      	mov	r1, r3
 800585e:	480d      	ldr	r0, [pc, #52]	; (8005894 <MX_TIM4_Init+0x94>)
 8005860:	f002 fcac 	bl	80081bc <HAL_TIM_ConfigClockSource>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800586a:	f000 f8b3 	bl	80059d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800586e:	2300      	movs	r3, #0
 8005870:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005872:	2300      	movs	r3, #0
 8005874:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005876:	463b      	mov	r3, r7
 8005878:	4619      	mov	r1, r3
 800587a:	4806      	ldr	r0, [pc, #24]	; (8005894 <MX_TIM4_Init+0x94>)
 800587c:	f002 feb8 	bl	80085f0 <HAL_TIMEx_MasterConfigSynchronization>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005886:	f000 f8a5 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800588a:	bf00      	nop
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	200002b0 	.word	0x200002b0
 8005898:	40000800 	.word	0x40000800

0800589c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058a2:	f107 0314 	add.w	r3, r7, #20
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	4b42      	ldr	r3, [pc, #264]	; (80059c0 <MX_GPIO_Init+0x124>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	4a41      	ldr	r2, [pc, #260]	; (80059c0 <MX_GPIO_Init+0x124>)
 80058bc:	f043 0310 	orr.w	r3, r3, #16
 80058c0:	6313      	str	r3, [r2, #48]	; 0x30
 80058c2:	4b3f      	ldr	r3, [pc, #252]	; (80059c0 <MX_GPIO_Init+0x124>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <MX_GPIO_Init+0x124>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	4a3a      	ldr	r2, [pc, #232]	; (80059c0 <MX_GPIO_Init+0x124>)
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	6313      	str	r3, [r2, #48]	; 0x30
 80058de:	4b38      	ldr	r3, [pc, #224]	; (80059c0 <MX_GPIO_Init+0x124>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	4b34      	ldr	r3, [pc, #208]	; (80059c0 <MX_GPIO_Init+0x124>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	4a33      	ldr	r2, [pc, #204]	; (80059c0 <MX_GPIO_Init+0x124>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6313      	str	r3, [r2, #48]	; 0x30
 80058fa:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <MX_GPIO_Init+0x124>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <MX_GPIO_Init+0x124>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	4a2c      	ldr	r2, [pc, #176]	; (80059c0 <MX_GPIO_Init+0x124>)
 8005910:	f043 0302 	orr.w	r3, r3, #2
 8005914:	6313      	str	r3, [r2, #48]	; 0x30
 8005916:	4b2a      	ldr	r3, [pc, #168]	; (80059c0 <MX_GPIO_Init+0x124>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	607b      	str	r3, [r7, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005922:	2300      	movs	r3, #0
 8005924:	603b      	str	r3, [r7, #0]
 8005926:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <MX_GPIO_Init+0x124>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <MX_GPIO_Init+0x124>)
 800592c:	f043 0308 	orr.w	r3, r3, #8
 8005930:	6313      	str	r3, [r2, #48]	; 0x30
 8005932:	4b23      	ldr	r3, [pc, #140]	; (80059c0 <MX_GPIO_Init+0x124>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800593e:	2200      	movs	r2, #0
 8005940:	2108      	movs	r1, #8
 8005942:	4820      	ldr	r0, [pc, #128]	; (80059c4 <MX_GPIO_Init+0x128>)
 8005944:	f001 fa64 	bl	8006e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8005948:	2200      	movs	r2, #0
 800594a:	f24f 017e 	movw	r1, #61566	; 0xf07e
 800594e:	481e      	ldr	r0, [pc, #120]	; (80059c8 <MX_GPIO_Init+0x12c>)
 8005950:	f001 fa5e 	bl	8006e10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005954:	2308      	movs	r3, #8
 8005956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005958:	2301      	movs	r3, #1
 800595a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595c:	2300      	movs	r3, #0
 800595e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005960:	2300      	movs	r3, #0
 8005962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005964:	f107 0314 	add.w	r3, r7, #20
 8005968:	4619      	mov	r1, r3
 800596a:	4816      	ldr	r0, [pc, #88]	; (80059c4 <MX_GPIO_Init+0x128>)
 800596c:	f001 f89e 	bl	8006aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005970:	2301      	movs	r3, #1
 8005972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005974:	4b15      	ldr	r3, [pc, #84]	; (80059cc <MX_GPIO_Init+0x130>)
 8005976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005978:	2302      	movs	r3, #2
 800597a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800597c:	f107 0314 	add.w	r3, r7, #20
 8005980:	4619      	mov	r1, r3
 8005982:	4813      	ldr	r0, [pc, #76]	; (80059d0 <MX_GPIO_Init+0x134>)
 8005984:	f001 f892 	bl	8006aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD1 PD2 PD3 PD4 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8005988:	f24f 037e 	movw	r3, #61566	; 0xf07e
 800598c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800598e:	2301      	movs	r3, #1
 8005990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005996:	2300      	movs	r3, #0
 8005998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800599a:	f107 0314 	add.w	r3, r7, #20
 800599e:	4619      	mov	r1, r3
 80059a0:	4809      	ldr	r0, [pc, #36]	; (80059c8 <MX_GPIO_Init+0x12c>)
 80059a2:	f001 f883 	bl	8006aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 80059a6:	2200      	movs	r2, #0
 80059a8:	2103      	movs	r1, #3
 80059aa:	2006      	movs	r0, #6
 80059ac:	f000 ff33 	bl	8006816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80059b0:	2006      	movs	r0, #6
 80059b2:	f000 ff4c 	bl	800684e <HAL_NVIC_EnableIRQ>

}
 80059b6:	bf00      	nop
 80059b8:	3728      	adds	r7, #40	; 0x28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40023800 	.word	0x40023800
 80059c4:	40021000 	.word	0x40021000
 80059c8:	40020c00 	.word	0x40020c00
 80059cc:	10110000 	.word	0x10110000
 80059d0:	40020000 	.word	0x40020000

080059d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80059d8:	bf00      	nop
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <HAL_MspInit+0x4c>)
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	4a0f      	ldr	r2, [pc, #60]	; (8005a30 <HAL_MspInit+0x4c>)
 80059f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059f8:	6453      	str	r3, [r2, #68]	; 0x44
 80059fa:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <HAL_MspInit+0x4c>)
 80059fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a02:	607b      	str	r3, [r7, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a06:	2300      	movs	r3, #0
 8005a08:	603b      	str	r3, [r7, #0]
 8005a0a:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <HAL_MspInit+0x4c>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	4a08      	ldr	r2, [pc, #32]	; (8005a30 <HAL_MspInit+0x4c>)
 8005a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a14:	6413      	str	r3, [r2, #64]	; 0x40
 8005a16:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <HAL_MspInit+0x4c>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800

08005a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a3c:	f107 0314 	add.w	r3, r7, #20
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	609a      	str	r2, [r3, #8]
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a17      	ldr	r2, [pc, #92]	; (8005ab0 <HAL_ADC_MspInit+0x7c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d127      	bne.n	8005aa6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a56:	2300      	movs	r3, #0
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	4b16      	ldr	r3, [pc, #88]	; (8005ab4 <HAL_ADC_MspInit+0x80>)
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <HAL_ADC_MspInit+0x80>)
 8005a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a64:	6453      	str	r3, [r2, #68]	; 0x44
 8005a66:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <HAL_ADC_MspInit+0x80>)
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <HAL_ADC_MspInit+0x80>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	4a0e      	ldr	r2, [pc, #56]	; (8005ab4 <HAL_ADC_MspInit+0x80>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	6313      	str	r3, [r2, #48]	; 0x30
 8005a82:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <HAL_ADC_MspInit+0x80>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a92:	2303      	movs	r3, #3
 8005a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a9a:	f107 0314 	add.w	r3, r7, #20
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4805      	ldr	r0, [pc, #20]	; (8005ab8 <HAL_ADC_MspInit+0x84>)
 8005aa2:	f001 f803 	bl	8006aac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005aa6:	bf00      	nop
 8005aa8:	3728      	adds	r7, #40	; 0x28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40012000 	.word	0x40012000
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	40020000 	.word	0x40020000

08005abc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ac4:	f107 0314 	add.w	r3, r7, #20
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	605a      	str	r2, [r3, #4]
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	60da      	str	r2, [r3, #12]
 8005ad2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <HAL_DAC_MspInit+0x7c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d127      	bne.n	8005b2e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_DAC_MspInit+0x80>)
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <HAL_DAC_MspInit+0x80>)
 8005ae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aec:	6413      	str	r3, [r2, #64]	; 0x40
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <HAL_DAC_MspInit+0x80>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <HAL_DAC_MspInit+0x80>)
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	4a0e      	ldr	r2, [pc, #56]	; (8005b3c <HAL_DAC_MspInit+0x80>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6313      	str	r3, [r2, #48]	; 0x30
 8005b0a:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <HAL_DAC_MspInit+0x80>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005b16:	2310      	movs	r3, #16
 8005b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b22:	f107 0314 	add.w	r3, r7, #20
 8005b26:	4619      	mov	r1, r3
 8005b28:	4805      	ldr	r0, [pc, #20]	; (8005b40 <HAL_DAC_MspInit+0x84>)
 8005b2a:	f000 ffbf 	bl	8006aac <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005b2e:	bf00      	nop
 8005b30:	3728      	adds	r7, #40	; 0x28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40007400 	.word	0x40007400
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	40020000 	.word	0x40020000

08005b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	; 0x28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b4c:	f107 0314 	add.w	r3, r7, #20
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_SPI_MspInit+0x84>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d12c      	bne.n	8005bc0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	4b18      	ldr	r3, [pc, #96]	; (8005bcc <HAL_SPI_MspInit+0x88>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	4a17      	ldr	r2, [pc, #92]	; (8005bcc <HAL_SPI_MspInit+0x88>)
 8005b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b74:	6413      	str	r3, [r2, #64]	; 0x40
 8005b76:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <HAL_SPI_MspInit+0x88>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <HAL_SPI_MspInit+0x88>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <HAL_SPI_MspInit+0x88>)
 8005b8c:	f043 0302 	orr.w	r3, r3, #2
 8005b90:	6313      	str	r3, [r2, #48]	; 0x30
 8005b92:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <HAL_SPI_MspInit+0x88>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005b9e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bac:	2303      	movs	r3, #3
 8005bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005bb0:	2305      	movs	r3, #5
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bb4:	f107 0314 	add.w	r3, r7, #20
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4805      	ldr	r0, [pc, #20]	; (8005bd0 <HAL_SPI_MspInit+0x8c>)
 8005bbc:	f000 ff76 	bl	8006aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005bc0:	bf00      	nop
 8005bc2:	3728      	adds	r7, #40	; 0x28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40003800 	.word	0x40003800
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	40020400 	.word	0x40020400

08005bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d116      	bne.n	8005c14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	4b28      	ldr	r3, [pc, #160]	; (8005c8c <HAL_TIM_Base_MspInit+0xb8>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	4a27      	ldr	r2, [pc, #156]	; (8005c8c <HAL_TIM_Base_MspInit+0xb8>)
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8005bf6:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <HAL_TIM_Base_MspInit+0xb8>)
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8005c02:	2200      	movs	r2, #0
 8005c04:	2102      	movs	r1, #2
 8005c06:	201c      	movs	r0, #28
 8005c08:	f000 fe05 	bl	8006816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005c0c:	201c      	movs	r0, #28
 8005c0e:	f000 fe1e 	bl	800684e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005c12:	e036      	b.n	8005c82 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1d      	ldr	r2, [pc, #116]	; (8005c90 <HAL_TIM_Base_MspInit+0xbc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d116      	bne.n	8005c4c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <HAL_TIM_Base_MspInit+0xb8>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	4a19      	ldr	r2, [pc, #100]	; (8005c8c <HAL_TIM_Base_MspInit+0xb8>)
 8005c28:	f043 0302 	orr.w	r3, r3, #2
 8005c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2e:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <HAL_TIM_Base_MspInit+0xb8>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2103      	movs	r1, #3
 8005c3e:	201d      	movs	r0, #29
 8005c40:	f000 fde9 	bl	8006816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005c44:	201d      	movs	r0, #29
 8005c46:	f000 fe02 	bl	800684e <HAL_NVIC_EnableIRQ>
}
 8005c4a:	e01a      	b.n	8005c82 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a10      	ldr	r2, [pc, #64]	; (8005c94 <HAL_TIM_Base_MspInit+0xc0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d115      	bne.n	8005c82 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <HAL_TIM_Base_MspInit+0xb8>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	4a0b      	ldr	r2, [pc, #44]	; (8005c8c <HAL_TIM_Base_MspInit+0xb8>)
 8005c60:	f043 0304 	orr.w	r3, r3, #4
 8005c64:	6413      	str	r3, [r2, #64]	; 0x40
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <HAL_TIM_Base_MspInit+0xb8>)
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8005c72:	2200      	movs	r2, #0
 8005c74:	2101      	movs	r1, #1
 8005c76:	201e      	movs	r0, #30
 8005c78:	f000 fdcd 	bl	8006816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005c7c:	201e      	movs	r0, #30
 8005c7e:	f000 fde6 	bl	800684e <HAL_NVIC_EnableIRQ>
}
 8005c82:	bf00      	nop
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	40000400 	.word	0x40000400
 8005c94:	40000800 	.word	0x40000800

08005c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005caa:	e7fe      	b.n	8005caa <HardFault_Handler+0x4>

08005cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cb0:	e7fe      	b.n	8005cb0 <MemManage_Handler+0x4>

08005cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cb6:	e7fe      	b.n	8005cb6 <BusFault_Handler+0x4>

08005cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cbc:	e7fe      	b.n	8005cbc <UsageFault_Handler+0x4>

08005cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cc2:	bf00      	nop
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cd0:	bf00      	nop
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8005cec:	f7fc fa42 	bl	8002174 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cf0:	f000 f8ba 	bl	8005e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cf4:	bf00      	nop
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	f001 f8a1 	bl	8006e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005d02:	bf00      	nop
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005d0c:	4802      	ldr	r0, [pc, #8]	; (8005d18 <TIM2_IRQHandler+0x10>)
 8005d0e:	f002 f94d 	bl	8007fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20010864 	.word	0x20010864

08005d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005d20:	4802      	ldr	r0, [pc, #8]	; (8005d2c <TIM3_IRQHandler+0x10>)
 8005d22:	f002 f943 	bl	8007fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005d26:	bf00      	nop
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	200107c8 	.word	0x200107c8

08005d30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005d34:	4802      	ldr	r0, [pc, #8]	; (8005d40 <TIM4_IRQHandler+0x10>)
 8005d36:	f002 f939 	bl	8007fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005d3a:	bf00      	nop
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	200002b0 	.word	0x200002b0

08005d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d48:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <SystemInit+0x28>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	4a07      	ldr	r2, [pc, #28]	; (8005d6c <SystemInit+0x28>)
 8005d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d58:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <SystemInit+0x28>)
 8005d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8005d60:	bf00      	nop
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	e000ed00 	.word	0xe000ed00

08005d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d76:	e003      	b.n	8005d80 <LoopCopyDataInit>

08005d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005d7e:	3104      	adds	r1, #4

08005d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005d80:	480b      	ldr	r0, [pc, #44]	; (8005db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005d82:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005d88:	d3f6      	bcc.n	8005d78 <CopyDataInit>
  ldr  r2, =_sbss
 8005d8a:	4a0b      	ldr	r2, [pc, #44]	; (8005db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005d8c:	e002      	b.n	8005d94 <LoopFillZerobss>

08005d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005d90:	f842 3b04 	str.w	r3, [r2], #4

08005d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005d98:	d3f9      	bcc.n	8005d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005d9a:	f7ff ffd3 	bl	8005d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d9e:	f002 fcb7 	bl	8008710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005da2:	f7ff fad1 	bl	8005348 <main>
  bx  lr    
 8005da6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005da8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005dac:	080175d8 	.word	0x080175d8
  ldr  r0, =_sdata
 8005db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005db4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8005db8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8005dbc:	200108a8 	.word	0x200108a8

08005dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dc0:	e7fe      	b.n	8005dc0 <ADC_IRQHandler>
	...

08005dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <HAL_Init+0x40>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	; (8005e04 <HAL_Init+0x40>)
 8005dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_Init+0x40>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <HAL_Init+0x40>)
 8005dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005de0:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <HAL_Init+0x40>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a07      	ldr	r2, [pc, #28]	; (8005e04 <HAL_Init+0x40>)
 8005de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dec:	2003      	movs	r0, #3
 8005dee:	f000 fd07 	bl	8006800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005df2:	2000      	movs	r0, #0
 8005df4:	f000 f808 	bl	8005e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005df8:	f7ff fdf4 	bl	80059e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40023c00 	.word	0x40023c00

08005e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e10:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <HAL_InitTick+0x54>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <HAL_InitTick+0x58>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fd1f 	bl	800686a <HAL_SYSTICK_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e00e      	b.n	8005e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b0f      	cmp	r3, #15
 8005e3a:	d80a      	bhi.n	8005e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	f000 fce7 	bl	8006816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e48:	4a06      	ldr	r2, [pc, #24]	; (8005e64 <HAL_InitTick+0x5c>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e000      	b.n	8005e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20000004 	.word	0x20000004
 8005e60:	2000000c 	.word	0x2000000c
 8005e64:	20000008 	.word	0x20000008

08005e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_IncTick+0x20>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <HAL_IncTick+0x24>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4413      	add	r3, r2
 8005e78:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <HAL_IncTick+0x24>)
 8005e7a:	6013      	str	r3, [r2, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	2000000c 	.word	0x2000000c
 8005e8c:	200108a4 	.word	0x200108a4

08005e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  return uwTick;
 8005e94:	4b03      	ldr	r3, [pc, #12]	; (8005ea4 <HAL_GetTick+0x14>)
 8005e96:	681b      	ldr	r3, [r3, #0]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	200108a4 	.word	0x200108a4

08005ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005eb0:	f7ff ffee 	bl	8005e90 <HAL_GetTick>
 8005eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d005      	beq.n	8005ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ec2:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <HAL_Delay+0x40>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005ece:	bf00      	nop
 8005ed0:	f7ff ffde 	bl	8005e90 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d8f7      	bhi.n	8005ed0 <HAL_Delay+0x28>
  {
  }
}
 8005ee0:	bf00      	nop
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	2000000c 	.word	0x2000000c

08005eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e033      	b.n	8005f6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff fd92 	bl	8005a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d118      	bne.n	8005f5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005f32:	f023 0302 	bic.w	r3, r3, #2
 8005f36:	f043 0202 	orr.w	r2, r3, #2
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa92 	bl	8006468 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	f043 0201 	orr.w	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
 8005f5a:	e001      	b.n	8005f60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_ADC_Start+0x1a>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e0a5      	b.n	80060da <HAL_ADC_Start+0x166>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d018      	beq.n	8005fd6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005fb4:	4b4c      	ldr	r3, [pc, #304]	; (80060e8 <HAL_ADC_Start+0x174>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a4c      	ldr	r2, [pc, #304]	; (80060ec <HAL_ADC_Start+0x178>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	0c9a      	lsrs	r2, r3, #18
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	4413      	add	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005fc8:	e002      	b.n	8005fd0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f9      	bne.n	8005fca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d179      	bne.n	80060d8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800600e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800601e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006022:	d106      	bne.n	8006032 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006028:	f023 0206 	bic.w	r2, r3, #6
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	645a      	str	r2, [r3, #68]	; 0x44
 8006030:	e002      	b.n	8006038 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006040:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <HAL_ADC_Start+0x17c>)
 8006042:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800604c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2b00      	cmp	r3, #0
 8006058:	d12a      	bne.n	80060b0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a25      	ldr	r2, [pc, #148]	; (80060f4 <HAL_ADC_Start+0x180>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d015      	beq.n	8006090 <HAL_ADC_Start+0x11c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a23      	ldr	r2, [pc, #140]	; (80060f8 <HAL_ADC_Start+0x184>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d105      	bne.n	800607a <HAL_ADC_Start+0x106>
 800606e:	4b20      	ldr	r3, [pc, #128]	; (80060f0 <HAL_ADC_Start+0x17c>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <HAL_ADC_Start+0x188>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d129      	bne.n	80060d8 <HAL_ADC_Start+0x164>
 8006084:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <HAL_ADC_Start+0x17c>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 031f 	and.w	r3, r3, #31
 800608c:	2b0f      	cmp	r3, #15
 800608e:	d823      	bhi.n	80060d8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d11c      	bne.n	80060d8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060ac:	609a      	str	r2, [r3, #8]
 80060ae:	e013      	b.n	80060d8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a0f      	ldr	r2, [pc, #60]	; (80060f4 <HAL_ADC_Start+0x180>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d10e      	bne.n	80060d8 <HAL_ADC_Start+0x164>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060d6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	20000004 	.word	0x20000004
 80060ec:	431bde83 	.word	0x431bde83
 80060f0:	40012300 	.word	0x40012300
 80060f4:	40012000 	.word	0x40012000
 80060f8:	40012100 	.word	0x40012100
 80060fc:	40012200 	.word	0x40012200

08006100 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611c:	d113      	bne.n	8006146 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800612c:	d10b      	bne.n	8006146 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f043 0220 	orr.w	r2, r3, #32
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e05c      	b.n	8006200 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006146:	f7ff fea3 	bl	8005e90 <HAL_GetTick>
 800614a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800614c:	e01a      	b.n	8006184 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d016      	beq.n	8006184 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_ADC_PollForConversion+0x6c>
 800615c:	f7ff fe98 	bl	8005e90 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d20b      	bcs.n	8006184 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	f043 0204 	orr.w	r2, r3, #4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e03d      	b.n	8006200 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d1dd      	bne.n	800614e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f06f 0212 	mvn.w	r2, #18
 800619a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d123      	bne.n	80061fe <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d11f      	bne.n	80061fe <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d006      	beq.n	80061da <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d111      	bne.n	80061fe <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d105      	bne.n	80061fe <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f043 0201 	orr.w	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_ADC_ConfigChannel+0x1c>
 800623c:	2302      	movs	r3, #2
 800623e:	e105      	b.n	800644c <HAL_ADC_ConfigChannel+0x228>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b09      	cmp	r3, #9
 800624e:	d925      	bls.n	800629c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68d9      	ldr	r1, [r3, #12]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	b29b      	uxth	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	4613      	mov	r3, r2
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	4413      	add	r3, r2
 8006264:	3b1e      	subs	r3, #30
 8006266:	2207      	movs	r2, #7
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	43da      	mvns	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	400a      	ands	r2, r1
 8006274:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68d9      	ldr	r1, [r3, #12]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	4618      	mov	r0, r3
 8006288:	4603      	mov	r3, r0
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	4403      	add	r3, r0
 800628e:	3b1e      	subs	r3, #30
 8006290:	409a      	lsls	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	60da      	str	r2, [r3, #12]
 800629a:	e022      	b.n	80062e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6919      	ldr	r1, [r3, #16]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	4613      	mov	r3, r2
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	4413      	add	r3, r2
 80062b0:	2207      	movs	r2, #7
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43da      	mvns	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	400a      	ands	r2, r1
 80062be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6919      	ldr	r1, [r3, #16]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	4618      	mov	r0, r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4403      	add	r3, r0
 80062d8:	409a      	lsls	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b06      	cmp	r3, #6
 80062e8:	d824      	bhi.n	8006334 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	3b05      	subs	r3, #5
 80062fc:	221f      	movs	r2, #31
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43da      	mvns	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	400a      	ands	r2, r1
 800630a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	4618      	mov	r0, r3
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	3b05      	subs	r3, #5
 8006326:	fa00 f203 	lsl.w	r2, r0, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	635a      	str	r2, [r3, #52]	; 0x34
 8006332:	e04c      	b.n	80063ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b0c      	cmp	r3, #12
 800633a:	d824      	bhi.n	8006386 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	3b23      	subs	r3, #35	; 0x23
 800634e:	221f      	movs	r2, #31
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	43da      	mvns	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	400a      	ands	r2, r1
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	4618      	mov	r0, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	3b23      	subs	r3, #35	; 0x23
 8006378:	fa00 f203 	lsl.w	r2, r0, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
 8006384:	e023      	b.n	80063ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	3b41      	subs	r3, #65	; 0x41
 8006398:	221f      	movs	r2, #31
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	43da      	mvns	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	400a      	ands	r2, r1
 80063a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	4618      	mov	r0, r3
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	3b41      	subs	r3, #65	; 0x41
 80063c2:	fa00 f203 	lsl.w	r2, r0, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063ce:	4b22      	ldr	r3, [pc, #136]	; (8006458 <HAL_ADC_ConfigChannel+0x234>)
 80063d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a21      	ldr	r2, [pc, #132]	; (800645c <HAL_ADC_ConfigChannel+0x238>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d109      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x1cc>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b12      	cmp	r3, #18
 80063e2:	d105      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a19      	ldr	r2, [pc, #100]	; (800645c <HAL_ADC_ConfigChannel+0x238>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d123      	bne.n	8006442 <HAL_ADC_ConfigChannel+0x21e>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b10      	cmp	r3, #16
 8006400:	d003      	beq.n	800640a <HAL_ADC_ConfigChannel+0x1e6>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b11      	cmp	r3, #17
 8006408:	d11b      	bne.n	8006442 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b10      	cmp	r3, #16
 800641c:	d111      	bne.n	8006442 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800641e:	4b10      	ldr	r3, [pc, #64]	; (8006460 <HAL_ADC_ConfigChannel+0x23c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a10      	ldr	r2, [pc, #64]	; (8006464 <HAL_ADC_ConfigChannel+0x240>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	0c9a      	lsrs	r2, r3, #18
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006434:	e002      	b.n	800643c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	3b01      	subs	r3, #1
 800643a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f9      	bne.n	8006436 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	40012300 	.word	0x40012300
 800645c:	40012000 	.word	0x40012000
 8006460:	20000004 	.word	0x20000004
 8006464:	431bde83 	.word	0x431bde83

08006468 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006470:	4b79      	ldr	r3, [pc, #484]	; (8006658 <ADC_Init+0x1f0>)
 8006472:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	431a      	orrs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800649c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6859      	ldr	r1, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	021a      	lsls	r2, r3, #8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80064c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6859      	ldr	r1, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6899      	ldr	r1, [r3, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fa:	4a58      	ldr	r2, [pc, #352]	; (800665c <ADC_Init+0x1f4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d022      	beq.n	8006546 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800650e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6899      	ldr	r1, [r3, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6899      	ldr	r1, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	e00f      	b.n	8006566 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006564:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0202 	bic.w	r2, r2, #2
 8006574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6899      	ldr	r1, [r3, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	7e1b      	ldrb	r3, [r3, #24]
 8006580:	005a      	lsls	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80065b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	3b01      	subs	r3, #1
 80065c0:	035a      	lsls	r2, r3, #13
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	e007      	b.n	80065dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	051a      	lsls	r2, r3, #20
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6899      	ldr	r1, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800661e:	025a      	lsls	r2, r3, #9
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6899      	ldr	r1, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	029a      	lsls	r2, r3, #10
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	609a      	str	r2, [r3, #8]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	40012300 	.word	0x40012300
 800665c:	0f000001 	.word	0x0f000001

08006660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006670:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800667c:	4013      	ands	r3, r2
 800667e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800668c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006692:	4a04      	ldr	r2, [pc, #16]	; (80066a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	60d3      	str	r3, [r2, #12]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	e000ed00 	.word	0xe000ed00

080066a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066ac:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <__NVIC_GetPriorityGrouping+0x18>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	0a1b      	lsrs	r3, r3, #8
 80066b2:	f003 0307 	and.w	r3, r3, #7
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	e000ed00 	.word	0xe000ed00

080066c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	db0b      	blt.n	80066ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	f003 021f 	and.w	r2, r3, #31
 80066dc:	4907      	ldr	r1, [pc, #28]	; (80066fc <__NVIC_EnableIRQ+0x38>)
 80066de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	2001      	movs	r0, #1
 80066e6:	fa00 f202 	lsl.w	r2, r0, r2
 80066ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	e000e100 	.word	0xe000e100

08006700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800670c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006710:	2b00      	cmp	r3, #0
 8006712:	db0a      	blt.n	800672a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	b2da      	uxtb	r2, r3
 8006718:	490c      	ldr	r1, [pc, #48]	; (800674c <__NVIC_SetPriority+0x4c>)
 800671a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800671e:	0112      	lsls	r2, r2, #4
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	440b      	add	r3, r1
 8006724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006728:	e00a      	b.n	8006740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	b2da      	uxtb	r2, r3
 800672e:	4908      	ldr	r1, [pc, #32]	; (8006750 <__NVIC_SetPriority+0x50>)
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	3b04      	subs	r3, #4
 8006738:	0112      	lsls	r2, r2, #4
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	440b      	add	r3, r1
 800673e:	761a      	strb	r2, [r3, #24]
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	e000e100 	.word	0xe000e100
 8006750:	e000ed00 	.word	0xe000ed00

08006754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006754:	b480      	push	{r7}
 8006756:	b089      	sub	sp, #36	; 0x24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f1c3 0307 	rsb	r3, r3, #7
 800676e:	2b04      	cmp	r3, #4
 8006770:	bf28      	it	cs
 8006772:	2304      	movcs	r3, #4
 8006774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	3304      	adds	r3, #4
 800677a:	2b06      	cmp	r3, #6
 800677c:	d902      	bls.n	8006784 <NVIC_EncodePriority+0x30>
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	3b03      	subs	r3, #3
 8006782:	e000      	b.n	8006786 <NVIC_EncodePriority+0x32>
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006788:	f04f 32ff 	mov.w	r2, #4294967295
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43da      	mvns	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	401a      	ands	r2, r3
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800679c:	f04f 31ff 	mov.w	r1, #4294967295
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	fa01 f303 	lsl.w	r3, r1, r3
 80067a6:	43d9      	mvns	r1, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067ac:	4313      	orrs	r3, r2
         );
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3724      	adds	r7, #36	; 0x24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067cc:	d301      	bcc.n	80067d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067ce:	2301      	movs	r3, #1
 80067d0:	e00f      	b.n	80067f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067d2:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <SysTick_Config+0x40>)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067da:	210f      	movs	r1, #15
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	f7ff ff8e 	bl	8006700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <SysTick_Config+0x40>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067ea:	4b04      	ldr	r3, [pc, #16]	; (80067fc <SysTick_Config+0x40>)
 80067ec:	2207      	movs	r2, #7
 80067ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	e000e010 	.word	0xe000e010

08006800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff ff29 	bl	8006660 <__NVIC_SetPriorityGrouping>
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006816:	b580      	push	{r7, lr}
 8006818:	b086      	sub	sp, #24
 800681a:	af00      	add	r7, sp, #0
 800681c:	4603      	mov	r3, r0
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006828:	f7ff ff3e 	bl	80066a8 <__NVIC_GetPriorityGrouping>
 800682c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	6978      	ldr	r0, [r7, #20]
 8006834:	f7ff ff8e 	bl	8006754 <NVIC_EncodePriority>
 8006838:	4602      	mov	r2, r0
 800683a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800683e:	4611      	mov	r1, r2
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff ff5d 	bl	8006700 <__NVIC_SetPriority>
}
 8006846:	bf00      	nop
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	4603      	mov	r3, r0
 8006856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff ff31 	bl	80066c4 <__NVIC_EnableIRQ>
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff ffa2 	bl	80067bc <SysTick_Config>
 8006878:	4603      	mov	r3, r0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e014      	b.n	80068be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	791b      	ldrb	r3, [r3, #4]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d105      	bne.n	80068aa <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff f909 	bl	8005abc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2202      	movs	r2, #2
 80068ae:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	2300      	movs	r3, #0
 80068d6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	795b      	ldrb	r3, [r3, #5]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_DAC_Start+0x1e>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e050      	b.n	8006986 <HAL_DAC_Start+0xc0>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6819      	ldr	r1, [r3, #0]
 80068f6:	2201      	movs	r2, #1
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	409a      	lsls	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d11a      	bne.n	8006940 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006920:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b04      	cmp	r3, #4
 8006926:	d127      	bne.n	8006978 <HAL_DAC_Start+0xb2>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b38      	cmp	r3, #56	; 0x38
 800692c:	d124      	bne.n	8006978 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0201 	orr.w	r2, r2, #1
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	e01b      	b.n	8006978 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800694a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006956:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800695e:	d10b      	bne.n	8006978 <HAL_DAC_Start+0xb2>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8006966:	d107      	bne.n	8006978 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0202 	orr.w	r2, r2, #2
 8006976:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6819      	ldr	r1, [r3, #0]
 80069a2:	2201      	movs	r2, #1
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	43da      	mvns	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	400a      	ands	r2, r1
 80069b2:	601a      	str	r2, [r3, #0]
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	795b      	ldrb	r3, [r3, #5]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_DAC_ConfigChannel+0x20>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e036      	b.n	8006a56 <HAL_DAC_ConfigChannel+0x8e>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2202      	movs	r2, #2
 80069f2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80069fc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	43db      	mvns	r3, r3
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6819      	ldr	r1, [r3, #0]
 8006a36:	22c0      	movs	r2, #192	; 0xc0
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	43da      	mvns	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	400a      	ands	r2, r1
 8006a46:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8006a62:	b480      	push	{r7}
 8006a64:	b087      	sub	sp, #28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
 8006a6e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d105      	bne.n	8006a8c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4413      	add	r3, r2
 8006a86:	3308      	adds	r3, #8
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	e004      	b.n	8006a96 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	3314      	adds	r3, #20
 8006a94:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b089      	sub	sp, #36	; 0x24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	e16b      	b.n	8006da0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ac8:	2201      	movs	r2, #1
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	f040 815a 	bne.w	8006d9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d00b      	beq.n	8006b06 <HAL_GPIO_Init+0x5a>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d007      	beq.n	8006b06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006afa:	2b11      	cmp	r3, #17
 8006afc:	d003      	beq.n	8006b06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b12      	cmp	r3, #18
 8006b04:	d130      	bne.n	8006b68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	2203      	movs	r2, #3
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	43db      	mvns	r3, r3
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	43db      	mvns	r3, r3
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	091b      	lsrs	r3, r3, #4
 8006b52:	f003 0201 	and.w	r2, r3, #1
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	2203      	movs	r2, #3
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d003      	beq.n	8006ba8 <HAL_GPIO_Init+0xfc>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b12      	cmp	r3, #18
 8006ba6:	d123      	bne.n	8006bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	08da      	lsrs	r2, r3, #3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3208      	adds	r2, #8
 8006bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	220f      	movs	r2, #15
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	08da      	lsrs	r2, r3, #3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3208      	adds	r2, #8
 8006bea:	69b9      	ldr	r1, [r7, #24]
 8006bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	43db      	mvns	r3, r3
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	4013      	ands	r3, r2
 8006c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f003 0203 	and.w	r2, r3, #3
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	fa02 f303 	lsl.w	r3, r2, r3
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80b4 	beq.w	8006d9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c32:	2300      	movs	r3, #0
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	4b5f      	ldr	r3, [pc, #380]	; (8006db4 <HAL_GPIO_Init+0x308>)
 8006c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3a:	4a5e      	ldr	r2, [pc, #376]	; (8006db4 <HAL_GPIO_Init+0x308>)
 8006c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c40:	6453      	str	r3, [r2, #68]	; 0x44
 8006c42:	4b5c      	ldr	r3, [pc, #368]	; (8006db4 <HAL_GPIO_Init+0x308>)
 8006c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c4e:	4a5a      	ldr	r2, [pc, #360]	; (8006db8 <HAL_GPIO_Init+0x30c>)
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	089b      	lsrs	r3, r3, #2
 8006c54:	3302      	adds	r3, #2
 8006c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	220f      	movs	r2, #15
 8006c66:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a51      	ldr	r2, [pc, #324]	; (8006dbc <HAL_GPIO_Init+0x310>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d02b      	beq.n	8006cd2 <HAL_GPIO_Init+0x226>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a50      	ldr	r2, [pc, #320]	; (8006dc0 <HAL_GPIO_Init+0x314>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d025      	beq.n	8006cce <HAL_GPIO_Init+0x222>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a4f      	ldr	r2, [pc, #316]	; (8006dc4 <HAL_GPIO_Init+0x318>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d01f      	beq.n	8006cca <HAL_GPIO_Init+0x21e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a4e      	ldr	r2, [pc, #312]	; (8006dc8 <HAL_GPIO_Init+0x31c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d019      	beq.n	8006cc6 <HAL_GPIO_Init+0x21a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a4d      	ldr	r2, [pc, #308]	; (8006dcc <HAL_GPIO_Init+0x320>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <HAL_GPIO_Init+0x216>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a4c      	ldr	r2, [pc, #304]	; (8006dd0 <HAL_GPIO_Init+0x324>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00d      	beq.n	8006cbe <HAL_GPIO_Init+0x212>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a4b      	ldr	r2, [pc, #300]	; (8006dd4 <HAL_GPIO_Init+0x328>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d007      	beq.n	8006cba <HAL_GPIO_Init+0x20e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a4a      	ldr	r2, [pc, #296]	; (8006dd8 <HAL_GPIO_Init+0x32c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d101      	bne.n	8006cb6 <HAL_GPIO_Init+0x20a>
 8006cb2:	2307      	movs	r3, #7
 8006cb4:	e00e      	b.n	8006cd4 <HAL_GPIO_Init+0x228>
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	e00c      	b.n	8006cd4 <HAL_GPIO_Init+0x228>
 8006cba:	2306      	movs	r3, #6
 8006cbc:	e00a      	b.n	8006cd4 <HAL_GPIO_Init+0x228>
 8006cbe:	2305      	movs	r3, #5
 8006cc0:	e008      	b.n	8006cd4 <HAL_GPIO_Init+0x228>
 8006cc2:	2304      	movs	r3, #4
 8006cc4:	e006      	b.n	8006cd4 <HAL_GPIO_Init+0x228>
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e004      	b.n	8006cd4 <HAL_GPIO_Init+0x228>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e002      	b.n	8006cd4 <HAL_GPIO_Init+0x228>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <HAL_GPIO_Init+0x228>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	f002 0203 	and.w	r2, r2, #3
 8006cda:	0092      	lsls	r2, r2, #2
 8006cdc:	4093      	lsls	r3, r2
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ce4:	4934      	ldr	r1, [pc, #208]	; (8006db8 <HAL_GPIO_Init+0x30c>)
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	089b      	lsrs	r3, r3, #2
 8006cea:	3302      	adds	r3, #2
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cf2:	4b3a      	ldr	r3, [pc, #232]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	43db      	mvns	r3, r3
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d16:	4a31      	ldr	r2, [pc, #196]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006d1c:	4b2f      	ldr	r3, [pc, #188]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	43db      	mvns	r3, r3
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d40:	4a26      	ldr	r2, [pc, #152]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d46:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	43db      	mvns	r3, r3
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	4013      	ands	r3, r2
 8006d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d6a:	4a1c      	ldr	r2, [pc, #112]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d70:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d94:	4a11      	ldr	r2, [pc, #68]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b0f      	cmp	r3, #15
 8006da4:	f67f ae90 	bls.w	8006ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006da8:	bf00      	nop
 8006daa:	3724      	adds	r7, #36	; 0x24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40023800 	.word	0x40023800
 8006db8:	40013800 	.word	0x40013800
 8006dbc:	40020000 	.word	0x40020000
 8006dc0:	40020400 	.word	0x40020400
 8006dc4:	40020800 	.word	0x40020800
 8006dc8:	40020c00 	.word	0x40020c00
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	40021400 	.word	0x40021400
 8006dd4:	40021800 	.word	0x40021800
 8006dd8:	40021c00 	.word	0x40021c00
 8006ddc:	40013c00 	.word	0x40013c00

08006de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	887b      	ldrh	r3, [r7, #2]
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e001      	b.n	8006e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	807b      	strh	r3, [r7, #2]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e20:	787b      	ldrb	r3, [r7, #1]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e26:	887a      	ldrh	r2, [r7, #2]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e2c:	e003      	b.n	8006e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e2e:	887b      	ldrh	r3, [r7, #2]
 8006e30:	041a      	lsls	r2, r3, #16
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	619a      	str	r2, [r3, #24]
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e4e:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e50:	695a      	ldr	r2, [r3, #20]
 8006e52:	88fb      	ldrh	r3, [r7, #6]
 8006e54:	4013      	ands	r3, r2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d006      	beq.n	8006e68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e5a:	4a05      	ldr	r2, [pc, #20]	; (8006e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe fa5a 	bl	800531c <HAL_GPIO_EXTI_Callback>
  }
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40013c00 	.word	0x40013c00

08006e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e25b      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d075      	beq.n	8006f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e92:	4ba3      	ldr	r3, [pc, #652]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d00c      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e9e:	4ba0      	ldr	r3, [pc, #640]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d112      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eaa:	4b9d      	ldr	r3, [pc, #628]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eb6:	d10b      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb8:	4b99      	ldr	r3, [pc, #612]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d05b      	beq.n	8006f7c <HAL_RCC_OscConfig+0x108>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d157      	bne.n	8006f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e236      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x74>
 8006eda:	4b91      	ldr	r3, [pc, #580]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a90      	ldr	r2, [pc, #576]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e01d      	b.n	8006f24 <HAL_RCC_OscConfig+0xb0>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ef0:	d10c      	bne.n	8006f0c <HAL_RCC_OscConfig+0x98>
 8006ef2:	4b8b      	ldr	r3, [pc, #556]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a8a      	ldr	r2, [pc, #552]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	4b88      	ldr	r3, [pc, #544]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a87      	ldr	r2, [pc, #540]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	e00b      	b.n	8006f24 <HAL_RCC_OscConfig+0xb0>
 8006f0c:	4b84      	ldr	r3, [pc, #528]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a83      	ldr	r2, [pc, #524]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	4b81      	ldr	r3, [pc, #516]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a80      	ldr	r2, [pc, #512]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d013      	beq.n	8006f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2c:	f7fe ffb0 	bl	8005e90 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f34:	f7fe ffac 	bl	8005e90 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b64      	cmp	r3, #100	; 0x64
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e1fb      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f46:	4b76      	ldr	r3, [pc, #472]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0xc0>
 8006f52:	e014      	b.n	8006f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f54:	f7fe ff9c 	bl	8005e90 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f5c:	f7fe ff98 	bl	8005e90 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b64      	cmp	r3, #100	; 0x64
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e1e7      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f6e:	4b6c      	ldr	r3, [pc, #432]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f0      	bne.n	8006f5c <HAL_RCC_OscConfig+0xe8>
 8006f7a:	e000      	b.n	8006f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d063      	beq.n	8007052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f8a:	4b65      	ldr	r3, [pc, #404]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 030c 	and.w	r3, r3, #12
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f96:	4b62      	ldr	r3, [pc, #392]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d11c      	bne.n	8006fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fa2:	4b5f      	ldr	r3, [pc, #380]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d116      	bne.n	8006fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fae:	4b5c      	ldr	r3, [pc, #368]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x152>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d001      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e1bb      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc6:	4b56      	ldr	r3, [pc, #344]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4952      	ldr	r1, [pc, #328]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fda:	e03a      	b.n	8007052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d020      	beq.n	8007026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fe4:	4b4f      	ldr	r3, [pc, #316]	; (8007124 <HAL_RCC_OscConfig+0x2b0>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fea:	f7fe ff51 	bl	8005e90 <HAL_GetTick>
 8006fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff0:	e008      	b.n	8007004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ff2:	f7fe ff4d 	bl	8005e90 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d901      	bls.n	8007004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e19c      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007004:	4b46      	ldr	r3, [pc, #280]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0f0      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007010:	4b43      	ldr	r3, [pc, #268]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	4940      	ldr	r1, [pc, #256]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8007020:	4313      	orrs	r3, r2
 8007022:	600b      	str	r3, [r1, #0]
 8007024:	e015      	b.n	8007052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007026:	4b3f      	ldr	r3, [pc, #252]	; (8007124 <HAL_RCC_OscConfig+0x2b0>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702c:	f7fe ff30 	bl	8005e90 <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007034:	f7fe ff2c 	bl	8005e90 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e17b      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007046:	4b36      	ldr	r3, [pc, #216]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1f0      	bne.n	8007034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d030      	beq.n	80070c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d016      	beq.n	8007094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007066:	4b30      	ldr	r3, [pc, #192]	; (8007128 <HAL_RCC_OscConfig+0x2b4>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800706c:	f7fe ff10 	bl	8005e90 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007074:	f7fe ff0c 	bl	8005e90 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e15b      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007086:	4b26      	ldr	r3, [pc, #152]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 8007088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0f0      	beq.n	8007074 <HAL_RCC_OscConfig+0x200>
 8007092:	e015      	b.n	80070c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007094:	4b24      	ldr	r3, [pc, #144]	; (8007128 <HAL_RCC_OscConfig+0x2b4>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800709a:	f7fe fef9 	bl	8005e90 <HAL_GetTick>
 800709e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070a0:	e008      	b.n	80070b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070a2:	f7fe fef5 	bl	8005e90 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e144      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b4:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 80070b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1f0      	bne.n	80070a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80a0 	beq.w	800720e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070d2:	4b13      	ldr	r3, [pc, #76]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10f      	bne.n	80070fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070de:	2300      	movs	r3, #0
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	4a0e      	ldr	r2, [pc, #56]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 80070e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ec:	6413      	str	r3, [r2, #64]	; 0x40
 80070ee:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <HAL_RCC_OscConfig+0x2ac>)
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070f6:	60bb      	str	r3, [r7, #8]
 80070f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070fa:	2301      	movs	r3, #1
 80070fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fe:	4b0b      	ldr	r3, [pc, #44]	; (800712c <HAL_RCC_OscConfig+0x2b8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007106:	2b00      	cmp	r3, #0
 8007108:	d121      	bne.n	800714e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800710a:	4b08      	ldr	r3, [pc, #32]	; (800712c <HAL_RCC_OscConfig+0x2b8>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a07      	ldr	r2, [pc, #28]	; (800712c <HAL_RCC_OscConfig+0x2b8>)
 8007110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007116:	f7fe febb 	bl	8005e90 <HAL_GetTick>
 800711a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800711c:	e011      	b.n	8007142 <HAL_RCC_OscConfig+0x2ce>
 800711e:	bf00      	nop
 8007120:	40023800 	.word	0x40023800
 8007124:	42470000 	.word	0x42470000
 8007128:	42470e80 	.word	0x42470e80
 800712c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007130:	f7fe feae 	bl	8005e90 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e0fd      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007142:	4b81      	ldr	r3, [pc, #516]	; (8007348 <HAL_RCC_OscConfig+0x4d4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0f0      	beq.n	8007130 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d106      	bne.n	8007164 <HAL_RCC_OscConfig+0x2f0>
 8007156:	4b7d      	ldr	r3, [pc, #500]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 8007158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715a:	4a7c      	ldr	r2, [pc, #496]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 800715c:	f043 0301 	orr.w	r3, r3, #1
 8007160:	6713      	str	r3, [r2, #112]	; 0x70
 8007162:	e01c      	b.n	800719e <HAL_RCC_OscConfig+0x32a>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b05      	cmp	r3, #5
 800716a:	d10c      	bne.n	8007186 <HAL_RCC_OscConfig+0x312>
 800716c:	4b77      	ldr	r3, [pc, #476]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 800716e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007170:	4a76      	ldr	r2, [pc, #472]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 8007172:	f043 0304 	orr.w	r3, r3, #4
 8007176:	6713      	str	r3, [r2, #112]	; 0x70
 8007178:	4b74      	ldr	r3, [pc, #464]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	4a73      	ldr	r2, [pc, #460]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	6713      	str	r3, [r2, #112]	; 0x70
 8007184:	e00b      	b.n	800719e <HAL_RCC_OscConfig+0x32a>
 8007186:	4b71      	ldr	r3, [pc, #452]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 8007188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718a:	4a70      	ldr	r2, [pc, #448]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 800718c:	f023 0301 	bic.w	r3, r3, #1
 8007190:	6713      	str	r3, [r2, #112]	; 0x70
 8007192:	4b6e      	ldr	r3, [pc, #440]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 8007194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007196:	4a6d      	ldr	r2, [pc, #436]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 8007198:	f023 0304 	bic.w	r3, r3, #4
 800719c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d015      	beq.n	80071d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a6:	f7fe fe73 	bl	8005e90 <HAL_GetTick>
 80071aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ac:	e00a      	b.n	80071c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071ae:	f7fe fe6f 	bl	8005e90 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071bc:	4293      	cmp	r3, r2
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e0bc      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071c4:	4b61      	ldr	r3, [pc, #388]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 80071c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0ee      	beq.n	80071ae <HAL_RCC_OscConfig+0x33a>
 80071d0:	e014      	b.n	80071fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071d2:	f7fe fe5d 	bl	8005e90 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071d8:	e00a      	b.n	80071f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071da:	f7fe fe59 	bl	8005e90 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d901      	bls.n	80071f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e0a6      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071f0:	4b56      	ldr	r3, [pc, #344]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 80071f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1ee      	bne.n	80071da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d105      	bne.n	800720e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007202:	4b52      	ldr	r3, [pc, #328]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	4a51      	ldr	r2, [pc, #324]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 8007208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800720c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8092 	beq.w	800733c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007218:	4b4c      	ldr	r3, [pc, #304]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 030c 	and.w	r3, r3, #12
 8007220:	2b08      	cmp	r3, #8
 8007222:	d05c      	beq.n	80072de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b02      	cmp	r3, #2
 800722a:	d141      	bne.n	80072b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800722c:	4b48      	ldr	r3, [pc, #288]	; (8007350 <HAL_RCC_OscConfig+0x4dc>)
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007232:	f7fe fe2d 	bl	8005e90 <HAL_GetTick>
 8007236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007238:	e008      	b.n	800724c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800723a:	f7fe fe29 	bl	8005e90 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b02      	cmp	r3, #2
 8007246:	d901      	bls.n	800724c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e078      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800724c:	4b3f      	ldr	r3, [pc, #252]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1f0      	bne.n	800723a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	69da      	ldr	r2, [r3, #28]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	019b      	lsls	r3, r3, #6
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	085b      	lsrs	r3, r3, #1
 8007270:	3b01      	subs	r3, #1
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	061b      	lsls	r3, r3, #24
 800727c:	4933      	ldr	r1, [pc, #204]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 800727e:	4313      	orrs	r3, r2
 8007280:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007282:	4b33      	ldr	r3, [pc, #204]	; (8007350 <HAL_RCC_OscConfig+0x4dc>)
 8007284:	2201      	movs	r2, #1
 8007286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007288:	f7fe fe02 	bl	8005e90 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007290:	f7fe fdfe 	bl	8005e90 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e04d      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072a2:	4b2a      	ldr	r3, [pc, #168]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f0      	beq.n	8007290 <HAL_RCC_OscConfig+0x41c>
 80072ae:	e045      	b.n	800733c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072b0:	4b27      	ldr	r3, [pc, #156]	; (8007350 <HAL_RCC_OscConfig+0x4dc>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b6:	f7fe fdeb 	bl	8005e90 <HAL_GetTick>
 80072ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072bc:	e008      	b.n	80072d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072be:	f7fe fde7 	bl	8005e90 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e036      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072d0:	4b1e      	ldr	r3, [pc, #120]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1f0      	bne.n	80072be <HAL_RCC_OscConfig+0x44a>
 80072dc:	e02e      	b.n	800733c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d101      	bne.n	80072ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e029      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80072ea:	4b18      	ldr	r3, [pc, #96]	; (800734c <HAL_RCC_OscConfig+0x4d8>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d11c      	bne.n	8007338 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007308:	429a      	cmp	r2, r3
 800730a:	d115      	bne.n	8007338 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007312:	4013      	ands	r3, r2
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007318:	4293      	cmp	r3, r2
 800731a:	d10d      	bne.n	8007338 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007326:	429a      	cmp	r2, r3
 8007328:	d106      	bne.n	8007338 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007334:	429a      	cmp	r2, r3
 8007336:	d001      	beq.n	800733c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40007000 	.word	0x40007000
 800734c:	40023800 	.word	0x40023800
 8007350:	42470060 	.word	0x42470060

08007354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0cc      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007368:	4b68      	ldr	r3, [pc, #416]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d90c      	bls.n	8007390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007376:	4b65      	ldr	r3, [pc, #404]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800737e:	4b63      	ldr	r3, [pc, #396]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d001      	beq.n	8007390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e0b8      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d020      	beq.n	80073de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073a8:	4b59      	ldr	r3, [pc, #356]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	4a58      	ldr	r2, [pc, #352]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073c0:	4b53      	ldr	r3, [pc, #332]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	4a52      	ldr	r2, [pc, #328]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073cc:	4b50      	ldr	r3, [pc, #320]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	494d      	ldr	r1, [pc, #308]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d044      	beq.n	8007474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d107      	bne.n	8007402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f2:	4b47      	ldr	r3, [pc, #284]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d119      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e07f      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b02      	cmp	r3, #2
 8007408:	d003      	beq.n	8007412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800740e:	2b03      	cmp	r3, #3
 8007410:	d107      	bne.n	8007422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007412:	4b3f      	ldr	r3, [pc, #252]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e06f      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007422:	4b3b      	ldr	r3, [pc, #236]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e067      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007432:	4b37      	ldr	r3, [pc, #220]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f023 0203 	bic.w	r2, r3, #3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	4934      	ldr	r1, [pc, #208]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007440:	4313      	orrs	r3, r2
 8007442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007444:	f7fe fd24 	bl	8005e90 <HAL_GetTick>
 8007448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744a:	e00a      	b.n	8007462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800744c:	f7fe fd20 	bl	8005e90 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	f241 3288 	movw	r2, #5000	; 0x1388
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e04f      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007462:	4b2b      	ldr	r3, [pc, #172]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 020c 	and.w	r2, r3, #12
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	429a      	cmp	r2, r3
 8007472:	d1eb      	bne.n	800744c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007474:	4b25      	ldr	r3, [pc, #148]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d20c      	bcs.n	800749c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007482:	4b22      	ldr	r3, [pc, #136]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800748a:	4b20      	ldr	r3, [pc, #128]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 030f 	and.w	r3, r3, #15
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d001      	beq.n	800749c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e032      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074a8:	4b19      	ldr	r3, [pc, #100]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	4916      	ldr	r1, [pc, #88]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d009      	beq.n	80074da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074c6:	4b12      	ldr	r3, [pc, #72]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	490e      	ldr	r1, [pc, #56]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074da:	f000 f821 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 80074de:	4601      	mov	r1, r0
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	091b      	lsrs	r3, r3, #4
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	4a0a      	ldr	r2, [pc, #40]	; (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 80074ec:	5cd3      	ldrb	r3, [r2, r3]
 80074ee:	fa21 f303 	lsr.w	r3, r1, r3
 80074f2:	4a09      	ldr	r2, [pc, #36]	; (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80074f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074f6:	4b09      	ldr	r3, [pc, #36]	; (800751c <HAL_RCC_ClockConfig+0x1c8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fc84 	bl	8005e08 <HAL_InitTick>

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	40023c00 	.word	0x40023c00
 8007510:	40023800 	.word	0x40023800
 8007514:	080175b8 	.word	0x080175b8
 8007518:	20000004 	.word	0x20000004
 800751c:	20000008 	.word	0x20000008

08007520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	607b      	str	r3, [r7, #4]
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	2300      	movs	r3, #0
 8007530:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007536:	4b63      	ldr	r3, [pc, #396]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 030c 	and.w	r3, r3, #12
 800753e:	2b04      	cmp	r3, #4
 8007540:	d007      	beq.n	8007552 <HAL_RCC_GetSysClockFreq+0x32>
 8007542:	2b08      	cmp	r3, #8
 8007544:	d008      	beq.n	8007558 <HAL_RCC_GetSysClockFreq+0x38>
 8007546:	2b00      	cmp	r3, #0
 8007548:	f040 80b4 	bne.w	80076b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800754c:	4b5e      	ldr	r3, [pc, #376]	; (80076c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800754e:	60bb      	str	r3, [r7, #8]
       break;
 8007550:	e0b3      	b.n	80076ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007552:	4b5e      	ldr	r3, [pc, #376]	; (80076cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007554:	60bb      	str	r3, [r7, #8]
      break;
 8007556:	e0b0      	b.n	80076ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007558:	4b5a      	ldr	r3, [pc, #360]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007560:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007562:	4b58      	ldr	r3, [pc, #352]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d04a      	beq.n	8007604 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800756e:	4b55      	ldr	r3, [pc, #340]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	099b      	lsrs	r3, r3, #6
 8007574:	f04f 0400 	mov.w	r4, #0
 8007578:	f240 11ff 	movw	r1, #511	; 0x1ff
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	ea03 0501 	and.w	r5, r3, r1
 8007584:	ea04 0602 	and.w	r6, r4, r2
 8007588:	4629      	mov	r1, r5
 800758a:	4632      	mov	r2, r6
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	f04f 0400 	mov.w	r4, #0
 8007594:	0154      	lsls	r4, r2, #5
 8007596:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800759a:	014b      	lsls	r3, r1, #5
 800759c:	4619      	mov	r1, r3
 800759e:	4622      	mov	r2, r4
 80075a0:	1b49      	subs	r1, r1, r5
 80075a2:	eb62 0206 	sbc.w	r2, r2, r6
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	f04f 0400 	mov.w	r4, #0
 80075ae:	0194      	lsls	r4, r2, #6
 80075b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80075b4:	018b      	lsls	r3, r1, #6
 80075b6:	1a5b      	subs	r3, r3, r1
 80075b8:	eb64 0402 	sbc.w	r4, r4, r2
 80075bc:	f04f 0100 	mov.w	r1, #0
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	00e2      	lsls	r2, r4, #3
 80075c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80075ca:	00d9      	lsls	r1, r3, #3
 80075cc:	460b      	mov	r3, r1
 80075ce:	4614      	mov	r4, r2
 80075d0:	195b      	adds	r3, r3, r5
 80075d2:	eb44 0406 	adc.w	r4, r4, r6
 80075d6:	f04f 0100 	mov.w	r1, #0
 80075da:	f04f 0200 	mov.w	r2, #0
 80075de:	0262      	lsls	r2, r4, #9
 80075e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80075e4:	0259      	lsls	r1, r3, #9
 80075e6:	460b      	mov	r3, r1
 80075e8:	4614      	mov	r4, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	4621      	mov	r1, r4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f04f 0400 	mov.w	r4, #0
 80075f4:	461a      	mov	r2, r3
 80075f6:	4623      	mov	r3, r4
 80075f8:	f7f8 fdee 	bl	80001d8 <__aeabi_uldivmod>
 80075fc:	4603      	mov	r3, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e049      	b.n	8007698 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007604:	4b2f      	ldr	r3, [pc, #188]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	099b      	lsrs	r3, r3, #6
 800760a:	f04f 0400 	mov.w	r4, #0
 800760e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	ea03 0501 	and.w	r5, r3, r1
 800761a:	ea04 0602 	and.w	r6, r4, r2
 800761e:	4629      	mov	r1, r5
 8007620:	4632      	mov	r2, r6
 8007622:	f04f 0300 	mov.w	r3, #0
 8007626:	f04f 0400 	mov.w	r4, #0
 800762a:	0154      	lsls	r4, r2, #5
 800762c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007630:	014b      	lsls	r3, r1, #5
 8007632:	4619      	mov	r1, r3
 8007634:	4622      	mov	r2, r4
 8007636:	1b49      	subs	r1, r1, r5
 8007638:	eb62 0206 	sbc.w	r2, r2, r6
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	f04f 0400 	mov.w	r4, #0
 8007644:	0194      	lsls	r4, r2, #6
 8007646:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800764a:	018b      	lsls	r3, r1, #6
 800764c:	1a5b      	subs	r3, r3, r1
 800764e:	eb64 0402 	sbc.w	r4, r4, r2
 8007652:	f04f 0100 	mov.w	r1, #0
 8007656:	f04f 0200 	mov.w	r2, #0
 800765a:	00e2      	lsls	r2, r4, #3
 800765c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007660:	00d9      	lsls	r1, r3, #3
 8007662:	460b      	mov	r3, r1
 8007664:	4614      	mov	r4, r2
 8007666:	195b      	adds	r3, r3, r5
 8007668:	eb44 0406 	adc.w	r4, r4, r6
 800766c:	f04f 0100 	mov.w	r1, #0
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	02a2      	lsls	r2, r4, #10
 8007676:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800767a:	0299      	lsls	r1, r3, #10
 800767c:	460b      	mov	r3, r1
 800767e:	4614      	mov	r4, r2
 8007680:	4618      	mov	r0, r3
 8007682:	4621      	mov	r1, r4
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f04f 0400 	mov.w	r4, #0
 800768a:	461a      	mov	r2, r3
 800768c:	4623      	mov	r3, r4
 800768e:	f7f8 fda3 	bl	80001d8 <__aeabi_uldivmod>
 8007692:	4603      	mov	r3, r0
 8007694:	460c      	mov	r4, r1
 8007696:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	0c1b      	lsrs	r3, r3, #16
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	3301      	adds	r3, #1
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b0:	60bb      	str	r3, [r7, #8]
      break;
 80076b2:	e002      	b.n	80076ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076b4:	4b04      	ldr	r3, [pc, #16]	; (80076c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80076b6:	60bb      	str	r3, [r7, #8]
      break;
 80076b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076ba:	68bb      	ldr	r3, [r7, #8]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c4:	40023800 	.word	0x40023800
 80076c8:	00f42400 	.word	0x00f42400
 80076cc:	007a1200 	.word	0x007a1200

080076d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e056      	b.n	8007790 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7fe fa21 	bl	8005b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2202      	movs	r2, #2
 8007706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007718:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	ea42 0103 	orr.w	r1, r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	0c1b      	lsrs	r3, r3, #16
 8007760:	f003 0104 	and.w	r1, r3, #4
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	69da      	ldr	r2, [r3, #28]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800777e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	4613      	mov	r3, r2
 80077a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d101      	bne.n	80077ba <HAL_SPI_Transmit+0x22>
 80077b6:	2302      	movs	r3, #2
 80077b8:	e11e      	b.n	80079f8 <HAL_SPI_Transmit+0x260>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077c2:	f7fe fb65 	bl	8005e90 <HAL_GetTick>
 80077c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80077c8:	88fb      	ldrh	r3, [r7, #6]
 80077ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d002      	beq.n	80077de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80077d8:	2302      	movs	r3, #2
 80077da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077dc:	e103      	b.n	80079e6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_SPI_Transmit+0x52>
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077ee:	e0fa      	b.n	80079e6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2203      	movs	r2, #3
 80077f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	88fa      	ldrh	r2, [r7, #6]
 8007808:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	88fa      	ldrh	r2, [r7, #6]
 800780e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007836:	d107      	bne.n	8007848 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007846:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007852:	2b40      	cmp	r3, #64	; 0x40
 8007854:	d007      	beq.n	8007866 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007864:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800786e:	d14b      	bne.n	8007908 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_SPI_Transmit+0xe6>
 8007878:	8afb      	ldrh	r3, [r7, #22]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d13e      	bne.n	80078fc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	881a      	ldrh	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788e:	1c9a      	adds	r2, r3, #2
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80078a2:	e02b      	b.n	80078fc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d112      	bne.n	80078d8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	881a      	ldrh	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c2:	1c9a      	adds	r2, r3, #2
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	3b01      	subs	r3, #1
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80078d6:	e011      	b.n	80078fc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078d8:	f7fe fada 	bl	8005e90 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d803      	bhi.n	80078f0 <HAL_SPI_Transmit+0x158>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ee:	d102      	bne.n	80078f6 <HAL_SPI_Transmit+0x15e>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d102      	bne.n	80078fc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078fa:	e074      	b.n	80079e6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1ce      	bne.n	80078a4 <HAL_SPI_Transmit+0x10c>
 8007906:	e04c      	b.n	80079a2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <HAL_SPI_Transmit+0x17e>
 8007910:	8afb      	ldrh	r3, [r7, #22]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d140      	bne.n	8007998 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	330c      	adds	r3, #12
 8007920:	7812      	ldrb	r2, [r2, #0]
 8007922:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800793c:	e02c      	b.n	8007998 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b02      	cmp	r3, #2
 800794a:	d113      	bne.n	8007974 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	330c      	adds	r3, #12
 8007956:	7812      	ldrb	r2, [r2, #0]
 8007958:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	86da      	strh	r2, [r3, #54]	; 0x36
 8007972:	e011      	b.n	8007998 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007974:	f7fe fa8c 	bl	8005e90 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d803      	bhi.n	800798c <HAL_SPI_Transmit+0x1f4>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798a:	d102      	bne.n	8007992 <HAL_SPI_Transmit+0x1fa>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d102      	bne.n	8007998 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007996:	e026      	b.n	80079e6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1cd      	bne.n	800793e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 fa44 	bl	8007e34 <SPI_EndRxTxTransaction>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2220      	movs	r2, #32
 80079b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	77fb      	strb	r3, [r7, #31]
 80079e2:	e000      	b.n	80079e6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80079e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08c      	sub	sp, #48	; 0x30
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d101      	bne.n	8007a26 <HAL_SPI_TransmitReceive+0x26>
 8007a22:	2302      	movs	r3, #2
 8007a24:	e18a      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x33c>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a2e:	f7fe fa2f 	bl	8005e90 <HAL_GetTick>
 8007a32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a44:	887b      	ldrh	r3, [r7, #2]
 8007a46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d00f      	beq.n	8007a70 <HAL_SPI_TransmitReceive+0x70>
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a56:	d107      	bne.n	8007a68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d103      	bne.n	8007a68 <HAL_SPI_TransmitReceive+0x68>
 8007a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d003      	beq.n	8007a70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a68:	2302      	movs	r3, #2
 8007a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a6e:	e15b      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <HAL_SPI_TransmitReceive+0x82>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_SPI_TransmitReceive+0x82>
 8007a7c:	887b      	ldrh	r3, [r7, #2]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a88:	e14e      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d003      	beq.n	8007a9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2205      	movs	r2, #5
 8007a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	887a      	ldrh	r2, [r7, #2]
 8007aae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	887a      	ldrh	r2, [r7, #2]
 8007ab4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	887a      	ldrh	r2, [r7, #2]
 8007ac0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	887a      	ldrh	r2, [r7, #2]
 8007ac6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ade:	2b40      	cmp	r3, #64	; 0x40
 8007ae0:	d007      	beq.n	8007af2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007afa:	d178      	bne.n	8007bee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <HAL_SPI_TransmitReceive+0x10a>
 8007b04:	8b7b      	ldrh	r3, [r7, #26]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d166      	bne.n	8007bd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0e:	881a      	ldrh	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1a:	1c9a      	adds	r2, r3, #2
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b2e:	e053      	b.n	8007bd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d11b      	bne.n	8007b76 <HAL_SPI_TransmitReceive+0x176>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d016      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x176>
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d113      	bne.n	8007b76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	881a      	ldrh	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	1c9a      	adds	r2, r3, #2
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d119      	bne.n	8007bb8 <HAL_SPI_TransmitReceive+0x1b8>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d014      	beq.n	8007bb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	b292      	uxth	r2, r2
 8007b9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	1c9a      	adds	r2, r3, #2
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bb8:	f7fe f96a 	bl	8005e90 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d807      	bhi.n	8007bd8 <HAL_SPI_TransmitReceive+0x1d8>
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bce:	d003      	beq.n	8007bd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bd6:	e0a7      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1a6      	bne.n	8007b30 <HAL_SPI_TransmitReceive+0x130>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1a1      	bne.n	8007b30 <HAL_SPI_TransmitReceive+0x130>
 8007bec:	e07c      	b.n	8007ce8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <HAL_SPI_TransmitReceive+0x1fc>
 8007bf6:	8b7b      	ldrh	r3, [r7, #26]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d16b      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	330c      	adds	r3, #12
 8007c06:	7812      	ldrb	r2, [r2, #0]
 8007c08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c22:	e057      	b.n	8007cd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d11c      	bne.n	8007c6c <HAL_SPI_TransmitReceive+0x26c>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d017      	beq.n	8007c6c <HAL_SPI_TransmitReceive+0x26c>
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d114      	bne.n	8007c6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	7812      	ldrb	r2, [r2, #0]
 8007c4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d119      	bne.n	8007cae <HAL_SPI_TransmitReceive+0x2ae>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d014      	beq.n	8007cae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007caa:	2301      	movs	r3, #1
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cae:	f7fe f8ef 	bl	8005e90 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d803      	bhi.n	8007cc6 <HAL_SPI_TransmitReceive+0x2c6>
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc4:	d102      	bne.n	8007ccc <HAL_SPI_TransmitReceive+0x2cc>
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d103      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cd2:	e029      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1a2      	bne.n	8007c24 <HAL_SPI_TransmitReceive+0x224>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d19d      	bne.n	8007c24 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f8a1 	bl	8007e34 <SPI_EndRxTxTransaction>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d006      	beq.n	8007d06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2220      	movs	r2, #32
 8007d02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d04:	e010      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	e000      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3730      	adds	r7, #48	; 0x30
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d52:	b2db      	uxtb	r3, r3
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d70:	e04c      	b.n	8007e0c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d78:	d048      	beq.n	8007e0c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007d7a:	f7fe f889 	bl	8005e90 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d902      	bls.n	8007d90 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d13d      	bne.n	8007e0c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007da8:	d111      	bne.n	8007dce <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007db2:	d004      	beq.n	8007dbe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dbc:	d107      	bne.n	8007dce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dcc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd6:	d10f      	bne.n	8007df8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007df6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e00f      	b.n	8007e2c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	4013      	ands	r3, r2
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	bf0c      	ite	eq
 8007e1c:	2301      	moveq	r3, #1
 8007e1e:	2300      	movne	r3, #0
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d1a3      	bne.n	8007d72 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e40:	4b1b      	ldr	r3, [pc, #108]	; (8007eb0 <SPI_EndRxTxTransaction+0x7c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <SPI_EndRxTxTransaction+0x80>)
 8007e46:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4a:	0d5b      	lsrs	r3, r3, #21
 8007e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e50:	fb02 f303 	mul.w	r3, r2, r3
 8007e54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e5e:	d112      	bne.n	8007e86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2200      	movs	r2, #0
 8007e68:	2180      	movs	r1, #128	; 0x80
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f7ff ff78 	bl	8007d60 <SPI_WaitFlagStateUntilTimeout>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d016      	beq.n	8007ea4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7a:	f043 0220 	orr.w	r2, r3, #32
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e00f      	b.n	8007ea6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9c:	2b80      	cmp	r3, #128	; 0x80
 8007e9e:	d0f2      	beq.n	8007e86 <SPI_EndRxTxTransaction+0x52>
 8007ea0:	e000      	b.n	8007ea4 <SPI_EndRxTxTransaction+0x70>
        break;
 8007ea2:	bf00      	nop
  }

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000004 	.word	0x20000004
 8007eb4:	165e9f81 	.word	0x165e9f81

08007eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e01d      	b.n	8007f06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d106      	bne.n	8007ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7fd fe78 	bl	8005bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	f000 fa40 	bl	800837c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0201 	orr.w	r2, r2, #1
 8007f24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b06      	cmp	r3, #6
 8007f36:	d007      	beq.n	8007f48 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0201 	orr.w	r2, r2, #1
 8007f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0201 	bic.w	r2, r2, #1
 8007f6c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6a1a      	ldr	r2, [r3, #32]
 8007f74:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f78:	4013      	ands	r3, r2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10f      	bne.n	8007f9e <HAL_TIM_Base_Stop_IT+0x48>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6a1a      	ldr	r2, [r3, #32]
 8007f84:	f240 4344 	movw	r3, #1092	; 0x444
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d107      	bne.n	8007f9e <HAL_TIM_Base_Stop_IT+0x48>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0201 	bic.w	r2, r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d122      	bne.n	8008008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d11b      	bne.n	8008008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0202 	mvn.w	r2, #2
 8007fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f9a5 	bl	800833e <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f997 	bl	800832a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f9a8 	bl	8008352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b04      	cmp	r3, #4
 8008014:	d122      	bne.n	800805c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b04      	cmp	r3, #4
 8008022:	d11b      	bne.n	800805c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f06f 0204 	mvn.w	r2, #4
 800802c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2202      	movs	r2, #2
 8008032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f97b 	bl	800833e <HAL_TIM_IC_CaptureCallback>
 8008048:	e005      	b.n	8008056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f96d 	bl	800832a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f97e 	bl	8008352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	2b08      	cmp	r3, #8
 8008068:	d122      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b08      	cmp	r3, #8
 8008076:	d11b      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f06f 0208 	mvn.w	r2, #8
 8008080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2204      	movs	r2, #4
 8008086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f951 	bl	800833e <HAL_TIM_IC_CaptureCallback>
 800809c:	e005      	b.n	80080aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f943 	bl	800832a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f954 	bl	8008352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d122      	bne.n	8008104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	2b10      	cmp	r3, #16
 80080ca:	d11b      	bne.n	8008104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f06f 0210 	mvn.w	r2, #16
 80080d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2208      	movs	r2, #8
 80080da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f927 	bl	800833e <HAL_TIM_IC_CaptureCallback>
 80080f0:	e005      	b.n	80080fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f919 	bl	800832a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f92a 	bl	8008352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b01      	cmp	r3, #1
 8008110:	d10e      	bne.n	8008130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b01      	cmp	r3, #1
 800811e:	d107      	bne.n	8008130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0201 	mvn.w	r2, #1
 8008128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fd f8d8 	bl	80052e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813a:	2b80      	cmp	r3, #128	; 0x80
 800813c:	d10e      	bne.n	800815c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008148:	2b80      	cmp	r3, #128	; 0x80
 800814a:	d107      	bne.n	800815c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fad0 	bl	80086fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008166:	2b40      	cmp	r3, #64	; 0x40
 8008168:	d10e      	bne.n	8008188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	d107      	bne.n	8008188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f8ef 	bl	8008366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	f003 0320 	and.w	r3, r3, #32
 8008192:	2b20      	cmp	r3, #32
 8008194:	d10e      	bne.n	80081b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d107      	bne.n	80081b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0220 	mvn.w	r2, #32
 80081ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa9a 	bl	80086e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_TIM_ConfigClockSource+0x18>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e0a6      	b.n	8008322 <HAL_TIM_ConfigClockSource+0x166>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b40      	cmp	r3, #64	; 0x40
 800820a:	d067      	beq.n	80082dc <HAL_TIM_ConfigClockSource+0x120>
 800820c:	2b40      	cmp	r3, #64	; 0x40
 800820e:	d80b      	bhi.n	8008228 <HAL_TIM_ConfigClockSource+0x6c>
 8008210:	2b10      	cmp	r3, #16
 8008212:	d073      	beq.n	80082fc <HAL_TIM_ConfigClockSource+0x140>
 8008214:	2b10      	cmp	r3, #16
 8008216:	d802      	bhi.n	800821e <HAL_TIM_ConfigClockSource+0x62>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d06f      	beq.n	80082fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800821c:	e078      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800821e:	2b20      	cmp	r3, #32
 8008220:	d06c      	beq.n	80082fc <HAL_TIM_ConfigClockSource+0x140>
 8008222:	2b30      	cmp	r3, #48	; 0x30
 8008224:	d06a      	beq.n	80082fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008226:	e073      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008228:	2b70      	cmp	r3, #112	; 0x70
 800822a:	d00d      	beq.n	8008248 <HAL_TIM_ConfigClockSource+0x8c>
 800822c:	2b70      	cmp	r3, #112	; 0x70
 800822e:	d804      	bhi.n	800823a <HAL_TIM_ConfigClockSource+0x7e>
 8008230:	2b50      	cmp	r3, #80	; 0x50
 8008232:	d033      	beq.n	800829c <HAL_TIM_ConfigClockSource+0xe0>
 8008234:	2b60      	cmp	r3, #96	; 0x60
 8008236:	d041      	beq.n	80082bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008238:	e06a      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800823a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823e:	d066      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x152>
 8008240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008244:	d017      	beq.n	8008276 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008246:	e063      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	6899      	ldr	r1, [r3, #8]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f000 f9aa 	bl	80085b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800826a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	609a      	str	r2, [r3, #8]
      break;
 8008274:	e04c      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6818      	ldr	r0, [r3, #0]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	6899      	ldr	r1, [r3, #8]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f000 f993 	bl	80085b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008298:	609a      	str	r2, [r3, #8]
      break;
 800829a:	e039      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6818      	ldr	r0, [r3, #0]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	6859      	ldr	r1, [r3, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	461a      	mov	r2, r3
 80082aa:	f000 f907 	bl	80084bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2150      	movs	r1, #80	; 0x50
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 f960 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 80082ba:	e029      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	6859      	ldr	r1, [r3, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	461a      	mov	r2, r3
 80082ca:	f000 f926 	bl	800851a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2160      	movs	r1, #96	; 0x60
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 f950 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 80082da:	e019      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	6859      	ldr	r1, [r3, #4]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	461a      	mov	r2, r3
 80082ea:	f000 f8e7 	bl	80084bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2140      	movs	r1, #64	; 0x40
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 f940 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 80082fa:	e009      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f000 f937 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 800830c:	e000      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800830e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
	...

0800837c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a40      	ldr	r2, [pc, #256]	; (8008490 <TIM_Base_SetConfig+0x114>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d013      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839a:	d00f      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a3d      	ldr	r2, [pc, #244]	; (8008494 <TIM_Base_SetConfig+0x118>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00b      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a3c      	ldr	r2, [pc, #240]	; (8008498 <TIM_Base_SetConfig+0x11c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d007      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a3b      	ldr	r2, [pc, #236]	; (800849c <TIM_Base_SetConfig+0x120>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d003      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a3a      	ldr	r2, [pc, #232]	; (80084a0 <TIM_Base_SetConfig+0x124>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d108      	bne.n	80083ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a2f      	ldr	r2, [pc, #188]	; (8008490 <TIM_Base_SetConfig+0x114>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d02b      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083dc:	d027      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a2c      	ldr	r2, [pc, #176]	; (8008494 <TIM_Base_SetConfig+0x118>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d023      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a2b      	ldr	r2, [pc, #172]	; (8008498 <TIM_Base_SetConfig+0x11c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d01f      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a2a      	ldr	r2, [pc, #168]	; (800849c <TIM_Base_SetConfig+0x120>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d01b      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a29      	ldr	r2, [pc, #164]	; (80084a0 <TIM_Base_SetConfig+0x124>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d017      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a28      	ldr	r2, [pc, #160]	; (80084a4 <TIM_Base_SetConfig+0x128>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a27      	ldr	r2, [pc, #156]	; (80084a8 <TIM_Base_SetConfig+0x12c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00f      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a26      	ldr	r2, [pc, #152]	; (80084ac <TIM_Base_SetConfig+0x130>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00b      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a25      	ldr	r2, [pc, #148]	; (80084b0 <TIM_Base_SetConfig+0x134>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a24      	ldr	r2, [pc, #144]	; (80084b4 <TIM_Base_SetConfig+0x138>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a23      	ldr	r2, [pc, #140]	; (80084b8 <TIM_Base_SetConfig+0x13c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d108      	bne.n	8008440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a0a      	ldr	r2, [pc, #40]	; (8008490 <TIM_Base_SetConfig+0x114>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d003      	beq.n	8008474 <TIM_Base_SetConfig+0xf8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a0c      	ldr	r2, [pc, #48]	; (80084a0 <TIM_Base_SetConfig+0x124>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d103      	bne.n	800847c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	691a      	ldr	r2, [r3, #16]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	615a      	str	r2, [r3, #20]
}
 8008482:	bf00      	nop
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	40010000 	.word	0x40010000
 8008494:	40000400 	.word	0x40000400
 8008498:	40000800 	.word	0x40000800
 800849c:	40000c00 	.word	0x40000c00
 80084a0:	40010400 	.word	0x40010400
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40014400 	.word	0x40014400
 80084ac:	40014800 	.word	0x40014800
 80084b0:	40001800 	.word	0x40001800
 80084b4:	40001c00 	.word	0x40001c00
 80084b8:	40002000 	.word	0x40002000

080084bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f023 0201 	bic.w	r2, r3, #1
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f023 030a 	bic.w	r3, r3, #10
 80084f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	621a      	str	r2, [r3, #32]
}
 800850e:	bf00      	nop
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800851a:	b480      	push	{r7}
 800851c:	b087      	sub	sp, #28
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	f023 0210 	bic.w	r2, r3, #16
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	031b      	lsls	r3, r3, #12
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008556:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	621a      	str	r2, [r3, #32]
}
 800856e:	bf00      	nop
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4313      	orrs	r3, r2
 8008598:	f043 0307 	orr.w	r3, r3, #7
 800859c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	609a      	str	r2, [r3, #8]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	021a      	lsls	r2, r3, #8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	609a      	str	r2, [r3, #8]
}
 80085e4:	bf00      	nop
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008604:	2302      	movs	r3, #2
 8008606:	e05a      	b.n	80086be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a21      	ldr	r2, [pc, #132]	; (80086cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d022      	beq.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008654:	d01d      	beq.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a1d      	ldr	r2, [pc, #116]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d018      	beq.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1b      	ldr	r2, [pc, #108]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d013      	beq.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a1a      	ldr	r2, [pc, #104]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00e      	beq.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a18      	ldr	r2, [pc, #96]	; (80086dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d009      	beq.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a17      	ldr	r2, [pc, #92]	; (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d004      	beq.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a15      	ldr	r2, [pc, #84]	; (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d10c      	bne.n	80086ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	40010000 	.word	0x40010000
 80086d0:	40000400 	.word	0x40000400
 80086d4:	40000800 	.word	0x40000800
 80086d8:	40000c00 	.word	0x40000c00
 80086dc:	40010400 	.word	0x40010400
 80086e0:	40014000 	.word	0x40014000
 80086e4:	40001800 	.word	0x40001800

080086e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <__libc_init_array>:
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	4e0d      	ldr	r6, [pc, #52]	; (8008748 <__libc_init_array+0x38>)
 8008714:	4c0d      	ldr	r4, [pc, #52]	; (800874c <__libc_init_array+0x3c>)
 8008716:	1ba4      	subs	r4, r4, r6
 8008718:	10a4      	asrs	r4, r4, #2
 800871a:	2500      	movs	r5, #0
 800871c:	42a5      	cmp	r5, r4
 800871e:	d109      	bne.n	8008734 <__libc_init_array+0x24>
 8008720:	4e0b      	ldr	r6, [pc, #44]	; (8008750 <__libc_init_array+0x40>)
 8008722:	4c0c      	ldr	r4, [pc, #48]	; (8008754 <__libc_init_array+0x44>)
 8008724:	f000 f820 	bl	8008768 <_init>
 8008728:	1ba4      	subs	r4, r4, r6
 800872a:	10a4      	asrs	r4, r4, #2
 800872c:	2500      	movs	r5, #0
 800872e:	42a5      	cmp	r5, r4
 8008730:	d105      	bne.n	800873e <__libc_init_array+0x2e>
 8008732:	bd70      	pop	{r4, r5, r6, pc}
 8008734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008738:	4798      	blx	r3
 800873a:	3501      	adds	r5, #1
 800873c:	e7ee      	b.n	800871c <__libc_init_array+0xc>
 800873e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008742:	4798      	blx	r3
 8008744:	3501      	adds	r5, #1
 8008746:	e7f2      	b.n	800872e <__libc_init_array+0x1e>
 8008748:	080175d0 	.word	0x080175d0
 800874c:	080175d0 	.word	0x080175d0
 8008750:	080175d0 	.word	0x080175d0
 8008754:	080175d4 	.word	0x080175d4

08008758 <memset>:
 8008758:	4402      	add	r2, r0
 800875a:	4603      	mov	r3, r0
 800875c:	4293      	cmp	r3, r2
 800875e:	d100      	bne.n	8008762 <memset+0xa>
 8008760:	4770      	bx	lr
 8008762:	f803 1b01 	strb.w	r1, [r3], #1
 8008766:	e7f9      	b.n	800875c <memset+0x4>

08008768 <_init>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	bf00      	nop
 800876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876e:	bc08      	pop	{r3}
 8008770:	469e      	mov	lr, r3
 8008772:	4770      	bx	lr

08008774 <_fini>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	bf00      	nop
 8008778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877a:	bc08      	pop	{r3}
 800877c:	469e      	mov	lr, r3
 800877e:	4770      	bx	lr
